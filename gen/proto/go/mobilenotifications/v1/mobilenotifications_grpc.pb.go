// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/mobilenotifications/v1/mobilenotifications.proto

package mobilenotificationsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MobileNotificationsService_SendNotification_FullMethodName = "/teleport.mobilenotifications.v1.MobileNotificationsService/SendNotification"
	MobileNotificationsService_RegisterDevice_FullMethodName   = "/teleport.mobilenotifications.v1.MobileNotificationsService/RegisterDevice"
)

// MobileNotificationsServiceClient is the client API for MobileNotificationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MobileNotificationsServiceClient interface {
	// SendNotification sends a push notification to a mobile device.
	SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error)
	// RegisterDevice registers a device token with the server.
	RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error)
}

type mobileNotificationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMobileNotificationsServiceClient(cc grpc.ClientConnInterface) MobileNotificationsServiceClient {
	return &mobileNotificationsServiceClient{cc}
}

func (c *mobileNotificationsServiceClient) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error) {
	out := new(SendNotificationResponse)
	err := c.cc.Invoke(ctx, MobileNotificationsService_SendNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileNotificationsServiceClient) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error) {
	out := new(RegisterDeviceResponse)
	err := c.cc.Invoke(ctx, MobileNotificationsService_RegisterDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MobileNotificationsServiceServer is the server API for MobileNotificationsService service.
// All implementations must embed UnimplementedMobileNotificationsServiceServer
// for forward compatibility
type MobileNotificationsServiceServer interface {
	// SendNotification sends a push notification to a mobile device.
	SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error)
	// RegisterDevice registers a device token with the server.
	RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error)
	mustEmbedUnimplementedMobileNotificationsServiceServer()
}

// UnimplementedMobileNotificationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMobileNotificationsServiceServer struct {
}

func (UnimplementedMobileNotificationsServiceServer) SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedMobileNotificationsServiceServer) RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedMobileNotificationsServiceServer) mustEmbedUnimplementedMobileNotificationsServiceServer() {
}

// UnsafeMobileNotificationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MobileNotificationsServiceServer will
// result in compilation errors.
type UnsafeMobileNotificationsServiceServer interface {
	mustEmbedUnimplementedMobileNotificationsServiceServer()
}

func RegisterMobileNotificationsServiceServer(s grpc.ServiceRegistrar, srv MobileNotificationsServiceServer) {
	s.RegisterService(&MobileNotificationsService_ServiceDesc, srv)
}

func _MobileNotificationsService_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobileNotificationsServiceServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MobileNotificationsService_SendNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobileNotificationsServiceServer).SendNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobileNotificationsService_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobileNotificationsServiceServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MobileNotificationsService_RegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobileNotificationsServiceServer).RegisterDevice(ctx, req.(*RegisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MobileNotificationsService_ServiceDesc is the grpc.ServiceDesc for MobileNotificationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MobileNotificationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.mobilenotifications.v1.MobileNotificationsService",
	HandlerType: (*MobileNotificationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotification",
			Handler:    _MobileNotificationsService_SendNotification_Handler,
		},
		{
			MethodName: "RegisterDevice",
			Handler:    _MobileNotificationsService_RegisterDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/mobilenotifications/v1/mobilenotifications.proto",
}
