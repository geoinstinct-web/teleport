//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: accessgraph/v1alpha/registration_service.proto

package accessgraphv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccessGraphRegistrationService_Register_FullMethodName = "/accessgraph.v1alpha.AccessGraphRegistrationService/Register"
)

// AccessGraphRegistrationServiceClient is the client API for AccessGraphRegistrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessGraphRegistrationServiceClient interface {
	// Register submits a new tenant representing this Teleport cluster to the TAG service,
	// identified by its HostCA certificate.
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type accessGraphRegistrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessGraphRegistrationServiceClient(cc grpc.ClientConnInterface) AccessGraphRegistrationServiceClient {
	return &accessGraphRegistrationServiceClient{cc}
}

func (c *accessGraphRegistrationServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, AccessGraphRegistrationService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessGraphRegistrationServiceServer is the server API for AccessGraphRegistrationService service.
// All implementations must embed UnimplementedAccessGraphRegistrationServiceServer
// for forward compatibility
type AccessGraphRegistrationServiceServer interface {
	// Register submits a new tenant representing this Teleport cluster to the TAG service,
	// identified by its HostCA certificate.
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedAccessGraphRegistrationServiceServer()
}

// UnimplementedAccessGraphRegistrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccessGraphRegistrationServiceServer struct {
}

func (UnimplementedAccessGraphRegistrationServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAccessGraphRegistrationServiceServer) mustEmbedUnimplementedAccessGraphRegistrationServiceServer() {
}

// UnsafeAccessGraphRegistrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessGraphRegistrationServiceServer will
// result in compilation errors.
type UnsafeAccessGraphRegistrationServiceServer interface {
	mustEmbedUnimplementedAccessGraphRegistrationServiceServer()
}

func RegisterAccessGraphRegistrationServiceServer(s grpc.ServiceRegistrar, srv AccessGraphRegistrationServiceServer) {
	s.RegisterService(&AccessGraphRegistrationService_ServiceDesc, srv)
}

func _AccessGraphRegistrationService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessGraphRegistrationServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessGraphRegistrationService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessGraphRegistrationServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessGraphRegistrationService_ServiceDesc is the grpc.ServiceDesc for AccessGraphRegistrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessGraphRegistrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accessgraph.v1alpha.AccessGraphRegistrationService",
	HandlerType: (*AccessGraphRegistrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AccessGraphRegistrationService_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accessgraph/v1alpha/registration_service.proto",
}
