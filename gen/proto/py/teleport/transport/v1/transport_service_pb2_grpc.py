# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from teleport.transport.v1 import transport_service_pb2 as teleport_dot_transport_dot_v1_dot_transport__service__pb2


class TransportServiceStub(object):
    """TransportService provides methods to proxy connections to various Teleport instances.

    All connections are operate on top of a bidirectional stream which transports
    raw payloads from higher level protocols (i.e. SSH). Clients must send an initial
    message on the stream to set up the connections accordingly. After the initial
    request either side may freely send data in any order until the stream is terminated.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetClusterDetails = channel.unary_unary(
                '/teleport.transport.v1.TransportService/GetClusterDetails',
                request_serializer=teleport_dot_transport_dot_v1_dot_transport__service__pb2.GetClusterDetailsRequest.SerializeToString,
                response_deserializer=teleport_dot_transport_dot_v1_dot_transport__service__pb2.GetClusterDetailsResponse.FromString,
                )
        self.ProxySSH = channel.stream_stream(
                '/teleport.transport.v1.TransportService/ProxySSH',
                request_serializer=teleport_dot_transport_dot_v1_dot_transport__service__pb2.ProxySSHRequest.SerializeToString,
                response_deserializer=teleport_dot_transport_dot_v1_dot_transport__service__pb2.ProxySSHResponse.FromString,
                )
        self.ProxyCluster = channel.stream_stream(
                '/teleport.transport.v1.TransportService/ProxyCluster',
                request_serializer=teleport_dot_transport_dot_v1_dot_transport__service__pb2.ProxyClusterRequest.SerializeToString,
                response_deserializer=teleport_dot_transport_dot_v1_dot_transport__service__pb2.ProxyClusterResponse.FromString,
                )


class TransportServiceServicer(object):
    """TransportService provides methods to proxy connections to various Teleport instances.

    All connections are operate on top of a bidirectional stream which transports
    raw payloads from higher level protocols (i.e. SSH). Clients must send an initial
    message on the stream to set up the connections accordingly. After the initial
    request either side may freely send data in any order until the stream is terminated.
    """

    def GetClusterDetails(self, request, context):
        """GetClusterDetails provides cluster information that may affect how transport
        should occur.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProxySSH(self, request_iterator, context):
        """ProxySSH establishes an SSH connection to the target host over a bidirectional stream.

        The client must first send a DialTarget before the connection is established. Agent frames
        will be populated if SSH Agent forwarding is enabled for the connection. SSH frames contain
        raw SSH payload to be processed by an x/crypto/ssh.Client or x/crypto/ssh.Server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProxyCluster(self, request_iterator, context):
        """ProxyCluster establishes a connection to the target cluster.

        The client must first send a ProxyClusterRequest with the desired cluster name before the
        connection is established. After which the connection can be used to construct a new
        auth.Client to the tunneled cluster.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransportServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetClusterDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClusterDetails,
                    request_deserializer=teleport_dot_transport_dot_v1_dot_transport__service__pb2.GetClusterDetailsRequest.FromString,
                    response_serializer=teleport_dot_transport_dot_v1_dot_transport__service__pb2.GetClusterDetailsResponse.SerializeToString,
            ),
            'ProxySSH': grpc.stream_stream_rpc_method_handler(
                    servicer.ProxySSH,
                    request_deserializer=teleport_dot_transport_dot_v1_dot_transport__service__pb2.ProxySSHRequest.FromString,
                    response_serializer=teleport_dot_transport_dot_v1_dot_transport__service__pb2.ProxySSHResponse.SerializeToString,
            ),
            'ProxyCluster': grpc.stream_stream_rpc_method_handler(
                    servicer.ProxyCluster,
                    request_deserializer=teleport_dot_transport_dot_v1_dot_transport__service__pb2.ProxyClusterRequest.FromString,
                    response_serializer=teleport_dot_transport_dot_v1_dot_transport__service__pb2.ProxyClusterResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'teleport.transport.v1.TransportService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TransportService(object):
    """TransportService provides methods to proxy connections to various Teleport instances.

    All connections are operate on top of a bidirectional stream which transports
    raw payloads from higher level protocols (i.e. SSH). Clients must send an initial
    message on the stream to set up the connections accordingly. After the initial
    request either side may freely send data in any order until the stream is terminated.
    """

    @staticmethod
    def GetClusterDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/teleport.transport.v1.TransportService/GetClusterDetails',
            teleport_dot_transport_dot_v1_dot_transport__service__pb2.GetClusterDetailsRequest.SerializeToString,
            teleport_dot_transport_dot_v1_dot_transport__service__pb2.GetClusterDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProxySSH(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/teleport.transport.v1.TransportService/ProxySSH',
            teleport_dot_transport_dot_v1_dot_transport__service__pb2.ProxySSHRequest.SerializeToString,
            teleport_dot_transport_dot_v1_dot_transport__service__pb2.ProxySSHResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProxyCluster(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/teleport.transport.v1.TransportService/ProxyCluster',
            teleport_dot_transport_dot_v1_dot_transport__service__pb2.ProxyClusterRequest.SerializeToString,
            teleport_dot_transport_dot_v1_dot_transport__service__pb2.ProxyClusterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
