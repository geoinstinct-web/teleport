# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from teleport.resourceusage.v1 import resourceusage_service_pb2 as teleport_dot_resourceusage_dot_v1_dot_resourceusage__service__pb2


class ResourceUsageServiceStub(object):
    """ResourceUsageService is a service to fetch information about the usage of limited resources on usage-billed plans.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUsage = channel.unary_unary(
                '/teleport.resourceusage.v1.ResourceUsageService/GetUsage',
                request_serializer=teleport_dot_resourceusage_dot_v1_dot_resourceusage__service__pb2.GetUsageRequest.SerializeToString,
                response_deserializer=teleport_dot_resourceusage_dot_v1_dot_resourceusage__service__pb2.GetUsageResponse.FromString,
                )


class ResourceUsageServiceServicer(object):
    """ResourceUsageService is a service to fetch information about the usage of limited resources on usage-billed plans.
    """

    def GetUsage(self, request, context):
        """GetUsage returns usage information for all limited resources
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResourceUsageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUsage,
                    request_deserializer=teleport_dot_resourceusage_dot_v1_dot_resourceusage__service__pb2.GetUsageRequest.FromString,
                    response_serializer=teleport_dot_resourceusage_dot_v1_dot_resourceusage__service__pb2.GetUsageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'teleport.resourceusage.v1.ResourceUsageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ResourceUsageService(object):
    """ResourceUsageService is a service to fetch information about the usage of limited resources on usage-billed plans.
    """

    @staticmethod
    def GetUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/teleport.resourceusage.v1.ResourceUsageService/GetUsage',
            teleport_dot_resourceusage_dot_v1_dot_resourceusage__service__pb2.GetUsageRequest.SerializeToString,
            teleport_dot_resourceusage_dot_v1_dot_resourceusage__service__pb2.GetUsageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
