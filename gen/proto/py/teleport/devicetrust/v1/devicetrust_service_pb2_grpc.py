# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from teleport.devicetrust.v1 import device_enroll_token_pb2 as teleport_dot_devicetrust_dot_v1_dot_device__enroll__token__pb2
from teleport.devicetrust.v1 import device_pb2 as teleport_dot_devicetrust_dot_v1_dot_device__pb2
from teleport.devicetrust.v1 import devicetrust_service_pb2 as teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2
from teleport.devicetrust.v1 import usage_pb2 as teleport_dot_devicetrust_dot_v1_dot_usage__pb2


class DeviceTrustServiceStub(object):
    """DeviceTrustService provides methods to manage, enroll and authenticate
    trusted devices.

    A trusted device is a device that is registered and enrolled with Teleport,
    thus allowing the system to provide some guarantees about its provenance and
    state.

    Managing devices requires the corresponding CRUD "device" permission.
    Additionally, creating enrollment tokens requires the "create_enroll_token"
    permission and enrolling devices requires the "enroll" permission. See
    CreateDevice, CreateDeviceEnrollToken and EnrollDevice for reference.

    An authenticated, trusted device allows its user to perform device-aware
    actions. Such actions include accessing an SSH node, managing sensitive
    resources via `tctl`, etc. The enforcement mode is defined via cluster-wide
    and/or per-role toggles. Device authentication is automatic for enrolled
    devices communicating with Enterprise clusters. See AuthenticateDevice for
    reference.

    Device Trust is a Teleport Enterprise feature. Open Source Teleport clusters
    treat all Device RPCs as unimplemented (which, in fact, they are for OSS.)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateDevice = channel.unary_unary(
                '/teleport.devicetrust.v1.DeviceTrustService/CreateDevice',
                request_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.CreateDeviceRequest.SerializeToString,
                response_deserializer=teleport_dot_devicetrust_dot_v1_dot_device__pb2.Device.FromString,
                )
        self.UpdateDevice = channel.unary_unary(
                '/teleport.devicetrust.v1.DeviceTrustService/UpdateDevice',
                request_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.UpdateDeviceRequest.SerializeToString,
                response_deserializer=teleport_dot_devicetrust_dot_v1_dot_device__pb2.Device.FromString,
                )
        self.UpsertDevice = channel.unary_unary(
                '/teleport.devicetrust.v1.DeviceTrustService/UpsertDevice',
                request_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.UpsertDeviceRequest.SerializeToString,
                response_deserializer=teleport_dot_devicetrust_dot_v1_dot_device__pb2.Device.FromString,
                )
        self.DeleteDevice = channel.unary_unary(
                '/teleport.devicetrust.v1.DeviceTrustService/DeleteDevice',
                request_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.DeleteDeviceRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.FindDevices = channel.unary_unary(
                '/teleport.devicetrust.v1.DeviceTrustService/FindDevices',
                request_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.FindDevicesRequest.SerializeToString,
                response_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.FindDevicesResponse.FromString,
                )
        self.GetDevice = channel.unary_unary(
                '/teleport.devicetrust.v1.DeviceTrustService/GetDevice',
                request_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.GetDeviceRequest.SerializeToString,
                response_deserializer=teleport_dot_devicetrust_dot_v1_dot_device__pb2.Device.FromString,
                )
        self.ListDevices = channel.unary_unary(
                '/teleport.devicetrust.v1.DeviceTrustService/ListDevices',
                request_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.ListDevicesRequest.SerializeToString,
                response_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.ListDevicesResponse.FromString,
                )
        self.BulkCreateDevices = channel.unary_unary(
                '/teleport.devicetrust.v1.DeviceTrustService/BulkCreateDevices',
                request_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.BulkCreateDevicesRequest.SerializeToString,
                response_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.BulkCreateDevicesResponse.FromString,
                )
        self.CreateDeviceEnrollToken = channel.unary_unary(
                '/teleport.devicetrust.v1.DeviceTrustService/CreateDeviceEnrollToken',
                request_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.CreateDeviceEnrollTokenRequest.SerializeToString,
                response_deserializer=teleport_dot_devicetrust_dot_v1_dot_device__enroll__token__pb2.DeviceEnrollToken.FromString,
                )
        self.EnrollDevice = channel.stream_stream(
                '/teleport.devicetrust.v1.DeviceTrustService/EnrollDevice',
                request_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.EnrollDeviceRequest.SerializeToString,
                response_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.EnrollDeviceResponse.FromString,
                )
        self.AuthenticateDevice = channel.stream_stream(
                '/teleport.devicetrust.v1.DeviceTrustService/AuthenticateDevice',
                request_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.AuthenticateDeviceRequest.SerializeToString,
                response_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.AuthenticateDeviceResponse.FromString,
                )
        self.SyncInventory = channel.stream_stream(
                '/teleport.devicetrust.v1.DeviceTrustService/SyncInventory',
                request_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.SyncInventoryRequest.SerializeToString,
                response_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.SyncInventoryResponse.FromString,
                )
        self.GetDevicesUsage = channel.unary_unary(
                '/teleport.devicetrust.v1.DeviceTrustService/GetDevicesUsage',
                request_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.GetDevicesUsageRequest.SerializeToString,
                response_deserializer=teleport_dot_devicetrust_dot_v1_dot_usage__pb2.DevicesUsage.FromString,
                )


class DeviceTrustServiceServicer(object):
    """DeviceTrustService provides methods to manage, enroll and authenticate
    trusted devices.

    A trusted device is a device that is registered and enrolled with Teleport,
    thus allowing the system to provide some guarantees about its provenance and
    state.

    Managing devices requires the corresponding CRUD "device" permission.
    Additionally, creating enrollment tokens requires the "create_enroll_token"
    permission and enrolling devices requires the "enroll" permission. See
    CreateDevice, CreateDeviceEnrollToken and EnrollDevice for reference.

    An authenticated, trusted device allows its user to perform device-aware
    actions. Such actions include accessing an SSH node, managing sensitive
    resources via `tctl`, etc. The enforcement mode is defined via cluster-wide
    and/or per-role toggles. Device authentication is automatic for enrolled
    devices communicating with Enterprise clusters. See AuthenticateDevice for
    reference.

    Device Trust is a Teleport Enterprise feature. Open Source Teleport clusters
    treat all Device RPCs as unimplemented (which, in fact, they are for OSS.)
    """

    def CreateDevice(self, request, context):
        """CreateDevice creates a device, effectively registering it on Teleport.
        Devices need to be registered before they can be enrolled.

        It is possible to create both a Device and a DeviceEnrollToken in a
        single invocation, see CreateDeviceRequest.create_enroll_token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDevice(self, request, context):
        """UpdateDevice is a masked device update.

        Only certain fields may be updated, see Device for details.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertDevice(self, request, context):
        """UpsertDevice creates or updates a device.

        UpsertDevice attempts a write of all mutable fields on updates, therefore
        reading a fresh copy of the device is recommended. Update semantics still
        apply.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDevice(self, request, context):
        """DeleteDevice hard-deletes a device, removing it and all collected data
        history from the system.

        Prefer locking the device instead (see the `tctl lock` command). Deleting a
        device doesn't invalidate existing device certificates, but does prevent
        new device authentication ceremonies from occurring.

        Use with caution.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindDevices(self, request, context):
        """FindDevices retrieves devices by device ID and/or asset tag.

        It provides an in-between search between fetching a device by ID and
        listing all devices.

        ID matches are guaranteed to be present in the response.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDevice(self, request, context):
        """GetDevice retrieves a device by ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDevices(self, request, context):
        """ListDevices lists all registered devices.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BulkCreateDevices(self, request, context):
        """BulkCreateDevices is a bulk variant of CreateDevice.

        Unlike CreateDevice, it does not support creation of enrollment tokens, as
        it is meant for bulk inventory registration.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDeviceEnrollToken(self, request, context):
        """CreateDeviceEnrollToken creates a DeviceEnrollToken for a Device.
        An enrollment token is required for the enrollment ceremony. See
        EnrollDevice.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnrollDevice(self, request_iterator, context):
        """EnrollDevice performs the device enrollment ceremony.

        Enrollment requires a previously-registered Device and a DeviceEnrollToken,
        see CreateDevice and CreateDeviceEnrollToken.

        An enrolled device is allowed, via AuthenticateDevice, to acquire
        certificates containing device extensions, thus gaining access to
        device-aware actions.

        macOS enrollment flow:
        -> EnrollDeviceInit (client)
        <- MacOSEnrollChallenge (server)
        -> MacOSEnrollChallengeResponse
        <- EnrollDeviceSuccess

        TPM enrollment flow:
        -> EnrollDeviceInit (client)
        <- TPMEnrollChallenge (server)
        -> TPMEnrollChallengeResponse
        <- EnrollDeviceSuccess
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthenticateDevice(self, request_iterator, context):
        """AuthenticateDevice performs the device authentication ceremony.

        Device authentication exchanges existing user certificates without device
        extensions for certificates augmented with device extensions. The new
        certificates allow the user to perform device-aware actions.

        Only registered and enrolled devices may perform device authentication.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncInventory(self, request_iterator, context):
        """Syncs device inventory from a source exterior to Teleport, for example an
        MDM.
        Allows both partial and full syncs; for the latter, devices missing from
        the external inventory are handled as specified.
        Authorized either by a valid MDM service certificate or the appropriate
        "device" permissions (create/update/delete).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDevicesUsage(self, request, context):
        """GetDevicesUsage retrieves device limits and usage numbers for the
        underlying account/license.
        Requires an authenticated user with billing/read permissions.
        See [DevicesUsage] for details.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeviceTrustServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDevice,
                    request_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.CreateDeviceRequest.FromString,
                    response_serializer=teleport_dot_devicetrust_dot_v1_dot_device__pb2.Device.SerializeToString,
            ),
            'UpdateDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDevice,
                    request_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.UpdateDeviceRequest.FromString,
                    response_serializer=teleport_dot_devicetrust_dot_v1_dot_device__pb2.Device.SerializeToString,
            ),
            'UpsertDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertDevice,
                    request_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.UpsertDeviceRequest.FromString,
                    response_serializer=teleport_dot_devicetrust_dot_v1_dot_device__pb2.Device.SerializeToString,
            ),
            'DeleteDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDevice,
                    request_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.DeleteDeviceRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'FindDevices': grpc.unary_unary_rpc_method_handler(
                    servicer.FindDevices,
                    request_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.FindDevicesRequest.FromString,
                    response_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.FindDevicesResponse.SerializeToString,
            ),
            'GetDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDevice,
                    request_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.GetDeviceRequest.FromString,
                    response_serializer=teleport_dot_devicetrust_dot_v1_dot_device__pb2.Device.SerializeToString,
            ),
            'ListDevices': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDevices,
                    request_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.ListDevicesRequest.FromString,
                    response_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.ListDevicesResponse.SerializeToString,
            ),
            'BulkCreateDevices': grpc.unary_unary_rpc_method_handler(
                    servicer.BulkCreateDevices,
                    request_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.BulkCreateDevicesRequest.FromString,
                    response_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.BulkCreateDevicesResponse.SerializeToString,
            ),
            'CreateDeviceEnrollToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDeviceEnrollToken,
                    request_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.CreateDeviceEnrollTokenRequest.FromString,
                    response_serializer=teleport_dot_devicetrust_dot_v1_dot_device__enroll__token__pb2.DeviceEnrollToken.SerializeToString,
            ),
            'EnrollDevice': grpc.stream_stream_rpc_method_handler(
                    servicer.EnrollDevice,
                    request_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.EnrollDeviceRequest.FromString,
                    response_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.EnrollDeviceResponse.SerializeToString,
            ),
            'AuthenticateDevice': grpc.stream_stream_rpc_method_handler(
                    servicer.AuthenticateDevice,
                    request_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.AuthenticateDeviceRequest.FromString,
                    response_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.AuthenticateDeviceResponse.SerializeToString,
            ),
            'SyncInventory': grpc.stream_stream_rpc_method_handler(
                    servicer.SyncInventory,
                    request_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.SyncInventoryRequest.FromString,
                    response_serializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.SyncInventoryResponse.SerializeToString,
            ),
            'GetDevicesUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDevicesUsage,
                    request_deserializer=teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.GetDevicesUsageRequest.FromString,
                    response_serializer=teleport_dot_devicetrust_dot_v1_dot_usage__pb2.DevicesUsage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'teleport.devicetrust.v1.DeviceTrustService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DeviceTrustService(object):
    """DeviceTrustService provides methods to manage, enroll and authenticate
    trusted devices.

    A trusted device is a device that is registered and enrolled with Teleport,
    thus allowing the system to provide some guarantees about its provenance and
    state.

    Managing devices requires the corresponding CRUD "device" permission.
    Additionally, creating enrollment tokens requires the "create_enroll_token"
    permission and enrolling devices requires the "enroll" permission. See
    CreateDevice, CreateDeviceEnrollToken and EnrollDevice for reference.

    An authenticated, trusted device allows its user to perform device-aware
    actions. Such actions include accessing an SSH node, managing sensitive
    resources via `tctl`, etc. The enforcement mode is defined via cluster-wide
    and/or per-role toggles. Device authentication is automatic for enrolled
    devices communicating with Enterprise clusters. See AuthenticateDevice for
    reference.

    Device Trust is a Teleport Enterprise feature. Open Source Teleport clusters
    treat all Device RPCs as unimplemented (which, in fact, they are for OSS.)
    """

    @staticmethod
    def CreateDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/teleport.devicetrust.v1.DeviceTrustService/CreateDevice',
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.CreateDeviceRequest.SerializeToString,
            teleport_dot_devicetrust_dot_v1_dot_device__pb2.Device.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/teleport.devicetrust.v1.DeviceTrustService/UpdateDevice',
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.UpdateDeviceRequest.SerializeToString,
            teleport_dot_devicetrust_dot_v1_dot_device__pb2.Device.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpsertDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/teleport.devicetrust.v1.DeviceTrustService/UpsertDevice',
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.UpsertDeviceRequest.SerializeToString,
            teleport_dot_devicetrust_dot_v1_dot_device__pb2.Device.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/teleport.devicetrust.v1.DeviceTrustService/DeleteDevice',
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.DeleteDeviceRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindDevices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/teleport.devicetrust.v1.DeviceTrustService/FindDevices',
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.FindDevicesRequest.SerializeToString,
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.FindDevicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/teleport.devicetrust.v1.DeviceTrustService/GetDevice',
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.GetDeviceRequest.SerializeToString,
            teleport_dot_devicetrust_dot_v1_dot_device__pb2.Device.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDevices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/teleport.devicetrust.v1.DeviceTrustService/ListDevices',
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.ListDevicesRequest.SerializeToString,
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.ListDevicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BulkCreateDevices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/teleport.devicetrust.v1.DeviceTrustService/BulkCreateDevices',
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.BulkCreateDevicesRequest.SerializeToString,
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.BulkCreateDevicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDeviceEnrollToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/teleport.devicetrust.v1.DeviceTrustService/CreateDeviceEnrollToken',
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.CreateDeviceEnrollTokenRequest.SerializeToString,
            teleport_dot_devicetrust_dot_v1_dot_device__enroll__token__pb2.DeviceEnrollToken.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnrollDevice(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/teleport.devicetrust.v1.DeviceTrustService/EnrollDevice',
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.EnrollDeviceRequest.SerializeToString,
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.EnrollDeviceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthenticateDevice(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/teleport.devicetrust.v1.DeviceTrustService/AuthenticateDevice',
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.AuthenticateDeviceRequest.SerializeToString,
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.AuthenticateDeviceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SyncInventory(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/teleport.devicetrust.v1.DeviceTrustService/SyncInventory',
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.SyncInventoryRequest.SerializeToString,
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.SyncInventoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDevicesUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/teleport.devicetrust.v1.DeviceTrustService/GetDevicesUsage',
            teleport_dot_devicetrust_dot_v1_dot_devicetrust__service__pb2.GetDevicesUsageRequest.SerializeToString,
            teleport_dot_devicetrust_dot_v1_dot_usage__pb2.DevicesUsage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
