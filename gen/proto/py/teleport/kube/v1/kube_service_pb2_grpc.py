# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from teleport.kube.v1 import kube_service_pb2 as teleport_dot_kube_dot_v1_dot_kube__service__pb2


class KubeServiceStub(object):
    """KubeService provides methods to list Kubernetes resources when users are not allowed
    to access the underlying cluster or resources but their `search_as_roles` allow.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListKubernetesResources = channel.unary_unary(
                '/teleport.kube.v1.KubeService/ListKubernetesResources',
                request_serializer=teleport_dot_kube_dot_v1_dot_kube__service__pb2.ListKubernetesResourcesRequest.SerializeToString,
                response_deserializer=teleport_dot_kube_dot_v1_dot_kube__service__pb2.ListKubernetesResourcesResponse.FromString,
                )


class KubeServiceServicer(object):
    """KubeService provides methods to list Kubernetes resources when users are not allowed
    to access the underlying cluster or resources but their `search_as_roles` allow.

    """

    def ListKubernetesResources(self, request, context):
        """ListKubernetesResources lists the Kubernetes resources without leaking details.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KubeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListKubernetesResources': grpc.unary_unary_rpc_method_handler(
                    servicer.ListKubernetesResources,
                    request_deserializer=teleport_dot_kube_dot_v1_dot_kube__service__pb2.ListKubernetesResourcesRequest.FromString,
                    response_serializer=teleport_dot_kube_dot_v1_dot_kube__service__pb2.ListKubernetesResourcesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'teleport.kube.v1.KubeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KubeService(object):
    """KubeService provides methods to list Kubernetes resources when users are not allowed
    to access the underlying cluster or resources but their `search_as_roles` allow.

    """

    @staticmethod
    def ListKubernetesResources(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/teleport.kube.v1.KubeService/ListKubernetesResources',
            teleport_dot_kube_dot_v1_dot_kube__service__pb2.ListKubernetesResourcesRequest.SerializeToString,
            teleport_dot_kube_dot_v1_dot_kube__service__pb2.ListKubernetesResourcesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
