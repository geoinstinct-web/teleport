# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from teleport.legacy.client.proto import proxyservice_pb2 as teleport_dot_legacy_dot_client_dot_proto_dot_proxyservice__pb2


class ProxyServiceStub(object):
    """ProxyPeerService is a proxy to proxy api.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DialNode = channel.stream_stream(
                '/proto.ProxyService/DialNode',
                request_serializer=teleport_dot_legacy_dot_client_dot_proto_dot_proxyservice__pb2.Frame.SerializeToString,
                response_deserializer=teleport_dot_legacy_dot_client_dot_proto_dot_proxyservice__pb2.Frame.FromString,
                )


class ProxyServiceServicer(object):
    """ProxyPeerService is a proxy to proxy api.
    """

    def DialNode(self, request_iterator, context):
        """DialNode opens a bidrectional stream to the requested node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProxyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DialNode': grpc.stream_stream_rpc_method_handler(
                    servicer.DialNode,
                    request_deserializer=teleport_dot_legacy_dot_client_dot_proto_dot_proxyservice__pb2.Frame.FromString,
                    response_serializer=teleport_dot_legacy_dot_client_dot_proto_dot_proxyservice__pb2.Frame.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.ProxyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProxyService(object):
    """ProxyPeerService is a proxy to proxy api.
    """

    @staticmethod
    def DialNode(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/proto.ProxyService/DialNode',
            teleport_dot_legacy_dot_client_dot_proto_dot_proxyservice__pb2.Frame.SerializeToString,
            teleport_dot_legacy_dot_client_dot_proto_dot_proxyservice__pb2.Frame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
