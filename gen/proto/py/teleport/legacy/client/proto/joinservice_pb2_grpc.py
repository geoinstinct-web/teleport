# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from teleport.legacy.client.proto import joinservice_pb2 as teleport_dot_legacy_dot_client_dot_proto_dot_joinservice__pb2


class JoinServiceStub(object):
    """JoinService provides methods which allow Teleport nodes, proxies, and other
    services to join the Teleport cluster by fetching signed cluster
    certificates. It is implemented on both the Auth and Proxy servers to serve
    the needs of both nodes connecting directly to the Auth server and IoT mode
    nodes connecting only to the Proxy.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterUsingIAMMethod = channel.stream_stream(
                '/proto.JoinService/RegisterUsingIAMMethod',
                request_serializer=teleport_dot_legacy_dot_client_dot_proto_dot_joinservice__pb2.RegisterUsingIAMMethodRequest.SerializeToString,
                response_deserializer=teleport_dot_legacy_dot_client_dot_proto_dot_joinservice__pb2.RegisterUsingIAMMethodResponse.FromString,
                )
        self.RegisterUsingAzureMethod = channel.stream_stream(
                '/proto.JoinService/RegisterUsingAzureMethod',
                request_serializer=teleport_dot_legacy_dot_client_dot_proto_dot_joinservice__pb2.RegisterUsingAzureMethodRequest.SerializeToString,
                response_deserializer=teleport_dot_legacy_dot_client_dot_proto_dot_joinservice__pb2.RegisterUsingAzureMethodResponse.FromString,
                )


class JoinServiceServicer(object):
    """JoinService provides methods which allow Teleport nodes, proxies, and other
    services to join the Teleport cluster by fetching signed cluster
    certificates. It is implemented on both the Auth and Proxy servers to serve
    the needs of both nodes connecting directly to the Auth server and IoT mode
    nodes connecting only to the Proxy.
    """

    def RegisterUsingIAMMethod(self, request_iterator, context):
        """RegisterUsingIAMMethod is used to register a new node to the cluster using
        the IAM join method.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterUsingAzureMethod(self, request_iterator, context):
        """RegisterUsingAzureMethod is used to register a new node to the cluster
        using the Azure join method.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JoinServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterUsingIAMMethod': grpc.stream_stream_rpc_method_handler(
                    servicer.RegisterUsingIAMMethod,
                    request_deserializer=teleport_dot_legacy_dot_client_dot_proto_dot_joinservice__pb2.RegisterUsingIAMMethodRequest.FromString,
                    response_serializer=teleport_dot_legacy_dot_client_dot_proto_dot_joinservice__pb2.RegisterUsingIAMMethodResponse.SerializeToString,
            ),
            'RegisterUsingAzureMethod': grpc.stream_stream_rpc_method_handler(
                    servicer.RegisterUsingAzureMethod,
                    request_deserializer=teleport_dot_legacy_dot_client_dot_proto_dot_joinservice__pb2.RegisterUsingAzureMethodRequest.FromString,
                    response_serializer=teleport_dot_legacy_dot_client_dot_proto_dot_joinservice__pb2.RegisterUsingAzureMethodResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.JoinService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JoinService(object):
    """JoinService provides methods which allow Teleport nodes, proxies, and other
    services to join the Teleport cluster by fetching signed cluster
    certificates. It is implemented on both the Auth and Proxy servers to serve
    the needs of both nodes connecting directly to the Auth server and IoT mode
    nodes connecting only to the Proxy.
    """

    @staticmethod
    def RegisterUsingIAMMethod(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/proto.JoinService/RegisterUsingIAMMethod',
            teleport_dot_legacy_dot_client_dot_proto_dot_joinservice__pb2.RegisterUsingIAMMethodRequest.SerializeToString,
            teleport_dot_legacy_dot_client_dot_proto_dot_joinservice__pb2.RegisterUsingIAMMethodResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterUsingAzureMethod(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/proto.JoinService/RegisterUsingAzureMethod',
            teleport_dot_legacy_dot_client_dot_proto_dot_joinservice__pb2.RegisterUsingAzureMethodRequest.SerializeToString,
            teleport_dot_legacy_dot_client_dot_proto_dot_joinservice__pb2.RegisterUsingAzureMethodResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
