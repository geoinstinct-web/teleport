// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: teleport/legacy/client/proto/joinservice.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// TODO(nklaassen): Document me.
struct Proto_RegisterUsingIAMMethodRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// RegisterUsingTokenRequest holds registration parameters common to all
  /// join methods.
  var registerUsingTokenRequest: Types_RegisterUsingTokenRequest {
    get {return _registerUsingTokenRequest ?? Types_RegisterUsingTokenRequest()}
    set {_registerUsingTokenRequest = newValue}
  }
  /// Returns true if `registerUsingTokenRequest` has been explicitly set.
  var hasRegisterUsingTokenRequest: Bool {return self._registerUsingTokenRequest != nil}
  /// Clears the value of `registerUsingTokenRequest`. Subsequent reads from it will return its default value.
  mutating func clearRegisterUsingTokenRequest() {self._registerUsingTokenRequest = nil}

  /// StsIdentityRequest is a signed HTTP request to the AWS
  /// sts:GetCallerIdentity API endpoint used to prove the AWS identity of a
  /// joining node. It must include the challenge string as a signed header.
  var stsIdentityRequest: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _registerUsingTokenRequest: Types_RegisterUsingTokenRequest? = nil
}

/// RegisterUsingIAMMethodResponse is a stream response and will contain either a
/// Challenge or signed Certs to join the cluster.
struct Proto_RegisterUsingIAMMethodResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Challenge is a crypto-random string that should be included in the signed
  /// sts:GetCallerIdentity request.
  var challenge: String = String()

  /// Certs is the returned signed certs.
  var certs: Proto_Certs {
    get {return _certs ?? Proto_Certs()}
    set {_certs = newValue}
  }
  /// Returns true if `certs` has been explicitly set.
  var hasCerts: Bool {return self._certs != nil}
  /// Clears the value of `certs`. Subsequent reads from it will return its default value.
  mutating func clearCerts() {self._certs = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _certs: Proto_Certs? = nil
}

/// RegisterUsingAzureMethodRequest is the request for registration via the Azure
/// join method.
struct Proto_RegisterUsingAzureMethodRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// RegisterUsingTokenRequest holds registration parameters common to all
  /// join methods.
  var registerUsingTokenRequest: Types_RegisterUsingTokenRequest {
    get {return _registerUsingTokenRequest ?? Types_RegisterUsingTokenRequest()}
    set {_registerUsingTokenRequest = newValue}
  }
  /// Returns true if `registerUsingTokenRequest` has been explicitly set.
  var hasRegisterUsingTokenRequest: Bool {return self._registerUsingTokenRequest != nil}
  /// Clears the value of `registerUsingTokenRequest`. Subsequent reads from it will return its default value.
  mutating func clearRegisterUsingTokenRequest() {self._registerUsingTokenRequest = nil}

  /// AttestedData is a signed JSON document from an Azure VM's attested data
  /// metadata endpoint used to prove the identity of a joining node. It must
  /// include the challenge string as the nonce.
  var attestedData: Data = Data()

  /// AccessToken is a JWT signed by Azure, used to prove the identity of a
  /// joining node.
  var accessToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _registerUsingTokenRequest: Types_RegisterUsingTokenRequest? = nil
}

/// RegisterUsingAzureMethodResponse is a stream response and will contain either
/// a Challenge or signed Certs to join the cluster.
struct Proto_RegisterUsingAzureMethodResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Challenge is a crypto-random string that should be included in the signed
  /// attested data.
  var challenge: String = String()

  /// Certs is the returned signed certs.
  var certs: Proto_Certs {
    get {return _certs ?? Proto_Certs()}
    set {_certs = newValue}
  }
  /// Returns true if `certs` has been explicitly set.
  var hasCerts: Bool {return self._certs != nil}
  /// Clears the value of `certs`. Subsequent reads from it will return its default value.
  mutating func clearCerts() {self._certs = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _certs: Proto_Certs? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto_RegisterUsingIAMMethodRequest: @unchecked Sendable {}
extension Proto_RegisterUsingIAMMethodResponse: @unchecked Sendable {}
extension Proto_RegisterUsingAzureMethodRequest: @unchecked Sendable {}
extension Proto_RegisterUsingAzureMethodResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_RegisterUsingIAMMethodRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RegisterUsingIAMMethodRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "register_using_token_request"),
    2: .standard(proto: "sts_identity_request"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._registerUsingTokenRequest) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.stsIdentityRequest) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._registerUsingTokenRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.stsIdentityRequest.isEmpty {
      try visitor.visitSingularBytesField(value: self.stsIdentityRequest, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_RegisterUsingIAMMethodRequest, rhs: Proto_RegisterUsingIAMMethodRequest) -> Bool {
    if lhs._registerUsingTokenRequest != rhs._registerUsingTokenRequest {return false}
    if lhs.stsIdentityRequest != rhs.stsIdentityRequest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_RegisterUsingIAMMethodResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RegisterUsingIAMMethodResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "challenge"),
    2: .same(proto: "certs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.challenge) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._certs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.challenge.isEmpty {
      try visitor.visitSingularStringField(value: self.challenge, fieldNumber: 1)
    }
    try { if let v = self._certs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_RegisterUsingIAMMethodResponse, rhs: Proto_RegisterUsingIAMMethodResponse) -> Bool {
    if lhs.challenge != rhs.challenge {return false}
    if lhs._certs != rhs._certs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_RegisterUsingAzureMethodRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RegisterUsingAzureMethodRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "register_using_token_request"),
    2: .standard(proto: "attested_data"),
    3: .standard(proto: "access_token"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._registerUsingTokenRequest) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.attestedData) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.accessToken) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._registerUsingTokenRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.attestedData.isEmpty {
      try visitor.visitSingularBytesField(value: self.attestedData, fieldNumber: 2)
    }
    if !self.accessToken.isEmpty {
      try visitor.visitSingularStringField(value: self.accessToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_RegisterUsingAzureMethodRequest, rhs: Proto_RegisterUsingAzureMethodRequest) -> Bool {
    if lhs._registerUsingTokenRequest != rhs._registerUsingTokenRequest {return false}
    if lhs.attestedData != rhs.attestedData {return false}
    if lhs.accessToken != rhs.accessToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_RegisterUsingAzureMethodResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RegisterUsingAzureMethodResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "challenge"),
    2: .same(proto: "certs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.challenge) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._certs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.challenge.isEmpty {
      try visitor.visitSingularStringField(value: self.challenge, fieldNumber: 1)
    }
    try { if let v = self._certs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_RegisterUsingAzureMethodResponse, rhs: Proto_RegisterUsingAzureMethodResponse) -> Bool {
    if lhs.challenge != rhs.challenge {return false}
    if lhs._certs != rhs._certs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
