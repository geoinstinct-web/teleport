//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: teleport/legacy/client/proto/joinservice.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// JoinService provides methods which allow Teleport nodes, proxies, and other
/// services to join the Teleport cluster by fetching signed cluster
/// certificates. It is implemented on both the Auth and Proxy servers to serve
/// the needs of both nodes connecting directly to the Auth server and IoT mode
/// nodes connecting only to the Proxy.
///
/// Usage: instantiate `Proto_JoinServiceClient`, then call methods of this protocol to make API calls.
internal protocol Proto_JoinServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Proto_JoinServiceClientInterceptorFactoryProtocol? { get }

  func registerUsingIAMMethod(
    callOptions: CallOptions?,
    handler: @escaping (Proto_RegisterUsingIAMMethodResponse) -> Void
  ) -> BidirectionalStreamingCall<Proto_RegisterUsingIAMMethodRequest, Proto_RegisterUsingIAMMethodResponse>

  func registerUsingAzureMethod(
    callOptions: CallOptions?,
    handler: @escaping (Proto_RegisterUsingAzureMethodResponse) -> Void
  ) -> BidirectionalStreamingCall<Proto_RegisterUsingAzureMethodRequest, Proto_RegisterUsingAzureMethodResponse>
}

extension Proto_JoinServiceClientProtocol {
  internal var serviceName: String {
    return "proto.JoinService"
  }

  /// RegisterUsingIAMMethod is used to register a new node to the cluster using
  /// the IAM join method.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func registerUsingIAMMethod(
    callOptions: CallOptions? = nil,
    handler: @escaping (Proto_RegisterUsingIAMMethodResponse) -> Void
  ) -> BidirectionalStreamingCall<Proto_RegisterUsingIAMMethodRequest, Proto_RegisterUsingIAMMethodResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Proto_JoinServiceClientMetadata.Methods.registerUsingIAMMethod.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterUsingIAMMethodInterceptors() ?? [],
      handler: handler
    )
  }

  /// RegisterUsingAzureMethod is used to register a new node to the cluster
  /// using the Azure join method.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func registerUsingAzureMethod(
    callOptions: CallOptions? = nil,
    handler: @escaping (Proto_RegisterUsingAzureMethodResponse) -> Void
  ) -> BidirectionalStreamingCall<Proto_RegisterUsingAzureMethodRequest, Proto_RegisterUsingAzureMethodResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Proto_JoinServiceClientMetadata.Methods.registerUsingAzureMethod.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterUsingAzureMethodInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Proto_JoinServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Proto_JoinServiceNIOClient")
internal final class Proto_JoinServiceClient: Proto_JoinServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Proto_JoinServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Proto_JoinServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the proto.JoinService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_JoinServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Proto_JoinServiceNIOClient: Proto_JoinServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Proto_JoinServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the proto.JoinService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_JoinServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// JoinService provides methods which allow Teleport nodes, proxies, and other
/// services to join the Teleport cluster by fetching signed cluster
/// certificates. It is implemented on both the Auth and Proxy servers to serve
/// the needs of both nodes connecting directly to the Auth server and IoT mode
/// nodes connecting only to the Proxy.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Proto_JoinServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_JoinServiceClientInterceptorFactoryProtocol? { get }

  func makeRegisterUsingIammethodCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Proto_RegisterUsingIAMMethodRequest, Proto_RegisterUsingIAMMethodResponse>

  func makeRegisterUsingAzureMethodCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Proto_RegisterUsingAzureMethodRequest, Proto_RegisterUsingAzureMethodResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_JoinServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_JoinServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Proto_JoinServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRegisterUsingIammethodCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Proto_RegisterUsingIAMMethodRequest, Proto_RegisterUsingIAMMethodResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Proto_JoinServiceClientMetadata.Methods.registerUsingIAMMethod.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterUsingIAMMethodInterceptors() ?? []
    )
  }

  internal func makeRegisterUsingAzureMethodCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Proto_RegisterUsingAzureMethodRequest, Proto_RegisterUsingAzureMethodResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Proto_JoinServiceClientMetadata.Methods.registerUsingAzureMethod.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterUsingAzureMethodInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_JoinServiceAsyncClientProtocol {
  internal func registerUsingIAMMethod<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Proto_RegisterUsingIAMMethodResponse> where RequestStream: Sequence, RequestStream.Element == Proto_RegisterUsingIAMMethodRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Proto_JoinServiceClientMetadata.Methods.registerUsingIAMMethod.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterUsingIAMMethodInterceptors() ?? []
    )
  }

  internal func registerUsingIAMMethod<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Proto_RegisterUsingIAMMethodResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Proto_RegisterUsingIAMMethodRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Proto_JoinServiceClientMetadata.Methods.registerUsingIAMMethod.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterUsingIAMMethodInterceptors() ?? []
    )
  }

  internal func registerUsingAzureMethod<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Proto_RegisterUsingAzureMethodResponse> where RequestStream: Sequence, RequestStream.Element == Proto_RegisterUsingAzureMethodRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Proto_JoinServiceClientMetadata.Methods.registerUsingAzureMethod.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterUsingAzureMethodInterceptors() ?? []
    )
  }

  internal func registerUsingAzureMethod<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Proto_RegisterUsingAzureMethodResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Proto_RegisterUsingAzureMethodRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Proto_JoinServiceClientMetadata.Methods.registerUsingAzureMethod.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterUsingAzureMethodInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Proto_JoinServiceAsyncClient: Proto_JoinServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Proto_JoinServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_JoinServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Proto_JoinServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'registerUsingIAMMethod'.
  func makeRegisterUsingIAMMethodInterceptors() -> [ClientInterceptor<Proto_RegisterUsingIAMMethodRequest, Proto_RegisterUsingIAMMethodResponse>]

  /// - Returns: Interceptors to use when invoking 'registerUsingAzureMethod'.
  func makeRegisterUsingAzureMethodInterceptors() -> [ClientInterceptor<Proto_RegisterUsingAzureMethodRequest, Proto_RegisterUsingAzureMethodResponse>]
}

internal enum Proto_JoinServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "JoinService",
    fullName: "proto.JoinService",
    methods: [
      Proto_JoinServiceClientMetadata.Methods.registerUsingIAMMethod,
      Proto_JoinServiceClientMetadata.Methods.registerUsingAzureMethod,
    ]
  )

  internal enum Methods {
    internal static let registerUsingIAMMethod = GRPCMethodDescriptor(
      name: "RegisterUsingIAMMethod",
      path: "/proto.JoinService/RegisterUsingIAMMethod",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let registerUsingAzureMethod = GRPCMethodDescriptor(
      name: "RegisterUsingAzureMethod",
      path: "/proto.JoinService/RegisterUsingAzureMethod",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

/// JoinService provides methods which allow Teleport nodes, proxies, and other
/// services to join the Teleport cluster by fetching signed cluster
/// certificates. It is implemented on both the Auth and Proxy servers to serve
/// the needs of both nodes connecting directly to the Auth server and IoT mode
/// nodes connecting only to the Proxy.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Proto_JoinServiceProvider: CallHandlerProvider {
  var interceptors: Proto_JoinServiceServerInterceptorFactoryProtocol? { get }

  /// RegisterUsingIAMMethod is used to register a new node to the cluster using
  /// the IAM join method.
  func registerUsingIAMMethod(context: StreamingResponseCallContext<Proto_RegisterUsingIAMMethodResponse>) -> EventLoopFuture<(StreamEvent<Proto_RegisterUsingIAMMethodRequest>) -> Void>

  /// RegisterUsingAzureMethod is used to register a new node to the cluster
  /// using the Azure join method.
  func registerUsingAzureMethod(context: StreamingResponseCallContext<Proto_RegisterUsingAzureMethodResponse>) -> EventLoopFuture<(StreamEvent<Proto_RegisterUsingAzureMethodRequest>) -> Void>
}

extension Proto_JoinServiceProvider {
  internal var serviceName: Substring {
    return Proto_JoinServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterUsingIAMMethod":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_RegisterUsingIAMMethodRequest>(),
        responseSerializer: ProtobufSerializer<Proto_RegisterUsingIAMMethodResponse>(),
        interceptors: self.interceptors?.makeRegisterUsingIAMMethodInterceptors() ?? [],
        observerFactory: self.registerUsingIAMMethod(context:)
      )

    case "RegisterUsingAzureMethod":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_RegisterUsingAzureMethodRequest>(),
        responseSerializer: ProtobufSerializer<Proto_RegisterUsingAzureMethodResponse>(),
        interceptors: self.interceptors?.makeRegisterUsingAzureMethodInterceptors() ?? [],
        observerFactory: self.registerUsingAzureMethod(context:)
      )

    default:
      return nil
    }
  }
}

/// JoinService provides methods which allow Teleport nodes, proxies, and other
/// services to join the Teleport cluster by fetching signed cluster
/// certificates. It is implemented on both the Auth and Proxy servers to serve
/// the needs of both nodes connecting directly to the Auth server and IoT mode
/// nodes connecting only to the Proxy.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Proto_JoinServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_JoinServiceServerInterceptorFactoryProtocol? { get }

  /// RegisterUsingIAMMethod is used to register a new node to the cluster using
  /// the IAM join method.
  func registerUsingIAMMethod(
    requestStream: GRPCAsyncRequestStream<Proto_RegisterUsingIAMMethodRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Proto_RegisterUsingIAMMethodResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// RegisterUsingAzureMethod is used to register a new node to the cluster
  /// using the Azure join method.
  func registerUsingAzureMethod(
    requestStream: GRPCAsyncRequestStream<Proto_RegisterUsingAzureMethodRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Proto_RegisterUsingAzureMethodResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_JoinServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_JoinServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Proto_JoinServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Proto_JoinServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterUsingIAMMethod":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_RegisterUsingIAMMethodRequest>(),
        responseSerializer: ProtobufSerializer<Proto_RegisterUsingIAMMethodResponse>(),
        interceptors: self.interceptors?.makeRegisterUsingIAMMethodInterceptors() ?? [],
        wrapping: { try await self.registerUsingIAMMethod(requestStream: $0, responseStream: $1, context: $2) }
      )

    case "RegisterUsingAzureMethod":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_RegisterUsingAzureMethodRequest>(),
        responseSerializer: ProtobufSerializer<Proto_RegisterUsingAzureMethodResponse>(),
        interceptors: self.interceptors?.makeRegisterUsingAzureMethodInterceptors() ?? [],
        wrapping: { try await self.registerUsingAzureMethod(requestStream: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

internal protocol Proto_JoinServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'registerUsingIAMMethod'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterUsingIAMMethodInterceptors() -> [ServerInterceptor<Proto_RegisterUsingIAMMethodRequest, Proto_RegisterUsingIAMMethodResponse>]

  /// - Returns: Interceptors to use when handling 'registerUsingAzureMethod'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterUsingAzureMethodInterceptors() -> [ServerInterceptor<Proto_RegisterUsingAzureMethodRequest, Proto_RegisterUsingAzureMethodResponse>]
}

internal enum Proto_JoinServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "JoinService",
    fullName: "proto.JoinService",
    methods: [
      Proto_JoinServiceServerMetadata.Methods.registerUsingIAMMethod,
      Proto_JoinServiceServerMetadata.Methods.registerUsingAzureMethod,
    ]
  )

  internal enum Methods {
    internal static let registerUsingIAMMethod = GRPCMethodDescriptor(
      name: "RegisterUsingIAMMethod",
      path: "/proto.JoinService/RegisterUsingIAMMethod",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let registerUsingAzureMethod = GRPCMethodDescriptor(
      name: "RegisterUsingAzureMethod",
      path: "/proto.JoinService/RegisterUsingAzureMethod",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}
