//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: teleport/legacy/client/proto/proxyservice.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// ProxyPeerService is a proxy to proxy api.
///
/// Usage: instantiate `Proto_ProxyServiceClient`, then call methods of this protocol to make API calls.
internal protocol Proto_ProxyServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Proto_ProxyServiceClientInterceptorFactoryProtocol? { get }

  func dialNode(
    callOptions: CallOptions?,
    handler: @escaping (Proto_Frame) -> Void
  ) -> BidirectionalStreamingCall<Proto_Frame, Proto_Frame>
}

extension Proto_ProxyServiceClientProtocol {
  internal var serviceName: String {
    return "proto.ProxyService"
  }

  /// DialNode opens a bidrectional stream to the requested node.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func dialNode(
    callOptions: CallOptions? = nil,
    handler: @escaping (Proto_Frame) -> Void
  ) -> BidirectionalStreamingCall<Proto_Frame, Proto_Frame> {
    return self.makeBidirectionalStreamingCall(
      path: Proto_ProxyServiceClientMetadata.Methods.dialNode.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDialNodeInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Proto_ProxyServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Proto_ProxyServiceNIOClient")
internal final class Proto_ProxyServiceClient: Proto_ProxyServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Proto_ProxyServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Proto_ProxyServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the proto.ProxyService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_ProxyServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Proto_ProxyServiceNIOClient: Proto_ProxyServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Proto_ProxyServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the proto.ProxyService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_ProxyServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// ProxyPeerService is a proxy to proxy api.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Proto_ProxyServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_ProxyServiceClientInterceptorFactoryProtocol? { get }

  func makeDialNodeCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Proto_Frame, Proto_Frame>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_ProxyServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_ProxyServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Proto_ProxyServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeDialNodeCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Proto_Frame, Proto_Frame> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Proto_ProxyServiceClientMetadata.Methods.dialNode.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDialNodeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_ProxyServiceAsyncClientProtocol {
  internal func dialNode<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Proto_Frame> where RequestStream: Sequence, RequestStream.Element == Proto_Frame {
    return self.performAsyncBidirectionalStreamingCall(
      path: Proto_ProxyServiceClientMetadata.Methods.dialNode.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDialNodeInterceptors() ?? []
    )
  }

  internal func dialNode<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Proto_Frame> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Proto_Frame {
    return self.performAsyncBidirectionalStreamingCall(
      path: Proto_ProxyServiceClientMetadata.Methods.dialNode.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDialNodeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Proto_ProxyServiceAsyncClient: Proto_ProxyServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Proto_ProxyServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_ProxyServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Proto_ProxyServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'dialNode'.
  func makeDialNodeInterceptors() -> [ClientInterceptor<Proto_Frame, Proto_Frame>]
}

internal enum Proto_ProxyServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ProxyService",
    fullName: "proto.ProxyService",
    methods: [
      Proto_ProxyServiceClientMetadata.Methods.dialNode,
    ]
  )

  internal enum Methods {
    internal static let dialNode = GRPCMethodDescriptor(
      name: "DialNode",
      path: "/proto.ProxyService/DialNode",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

/// ProxyPeerService is a proxy to proxy api.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Proto_ProxyServiceProvider: CallHandlerProvider {
  var interceptors: Proto_ProxyServiceServerInterceptorFactoryProtocol? { get }

  /// DialNode opens a bidrectional stream to the requested node.
  func dialNode(context: StreamingResponseCallContext<Proto_Frame>) -> EventLoopFuture<(StreamEvent<Proto_Frame>) -> Void>
}

extension Proto_ProxyServiceProvider {
  internal var serviceName: Substring {
    return Proto_ProxyServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DialNode":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Frame>(),
        responseSerializer: ProtobufSerializer<Proto_Frame>(),
        interceptors: self.interceptors?.makeDialNodeInterceptors() ?? [],
        observerFactory: self.dialNode(context:)
      )

    default:
      return nil
    }
  }
}

/// ProxyPeerService is a proxy to proxy api.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Proto_ProxyServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_ProxyServiceServerInterceptorFactoryProtocol? { get }

  /// DialNode opens a bidrectional stream to the requested node.
  func dialNode(
    requestStream: GRPCAsyncRequestStream<Proto_Frame>,
    responseStream: GRPCAsyncResponseStreamWriter<Proto_Frame>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_ProxyServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_ProxyServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Proto_ProxyServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Proto_ProxyServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DialNode":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Frame>(),
        responseSerializer: ProtobufSerializer<Proto_Frame>(),
        interceptors: self.interceptors?.makeDialNodeInterceptors() ?? [],
        wrapping: { try await self.dialNode(requestStream: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

internal protocol Proto_ProxyServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'dialNode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDialNodeInterceptors() -> [ServerInterceptor<Proto_Frame, Proto_Frame>]
}

internal enum Proto_ProxyServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ProxyService",
    fullName: "proto.ProxyService",
    methods: [
      Proto_ProxyServiceServerMetadata.Methods.dialNode,
    ]
  )

  internal enum Methods {
    internal static let dialNode = GRPCMethodDescriptor(
      name: "DialNode",
      path: "/proto.ProxyService/DialNode",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}
