// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: teleport/legacy/types/device.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// DeviceV1 is the resource representation of teleport.devicetrust.v1.Device.
struct Types_DeviceV1 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Header is the common resource header.
  ///
  /// - Kind is always "device".
  /// - SubKind is unused.
  /// - Version is equivalent to teleport.devicetrust.v1.Device.api_version.
  /// - Metadata.Name is equivalent to teleport.devicetrust.v1.Device.Id.
  var header: Types_ResourceHeader {
    get {return _header ?? Types_ResourceHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {self._header = nil}

  /// Specification of the device.
  var spec: Types_DeviceSpec {
    get {return _spec ?? Types_DeviceSpec()}
    set {_spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  var hasSpec: Bool {return self._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  mutating func clearSpec() {self._spec = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _header: Types_ResourceHeader? = nil
  fileprivate var _spec: Types_DeviceSpec? = nil
}

/// DeviceSpec is a device specification.
/// Roughly matches teleport.devicetrust.v1.Device, with some fields changed for
/// better UX.
struct Types_DeviceSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var osType: String {
    get {return _storage._osType}
    set {_uniqueStorage()._osType = newValue}
  }

  var assetTag: String {
    get {return _storage._assetTag}
    set {_uniqueStorage()._assetTag = newValue}
  }

  var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}

  var enrollStatus: String {
    get {return _storage._enrollStatus}
    set {_uniqueStorage()._enrollStatus = newValue}
  }

  var credential: Types_DeviceCredential {
    get {return _storage._credential ?? Types_DeviceCredential()}
    set {_uniqueStorage()._credential = newValue}
  }
  /// Returns true if `credential` has been explicitly set.
  var hasCredential: Bool {return _storage._credential != nil}
  /// Clears the value of `credential`. Subsequent reads from it will return its default value.
  mutating func clearCredential() {_uniqueStorage()._credential = nil}

  var collectedData: [Types_DeviceCollectedData] {
    get {return _storage._collectedData}
    set {_uniqueStorage()._collectedData = newValue}
  }

  var source: Types_DeviceSource {
    get {return _storage._source ?? Types_DeviceSource()}
    set {_uniqueStorage()._source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  var hasSource: Bool {return _storage._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  mutating func clearSource() {_uniqueStorage()._source = nil}

  var profile: Types_DeviceProfile {
    get {return _storage._profile ?? Types_DeviceProfile()}
    set {_uniqueStorage()._profile = newValue}
  }
  /// Returns true if `profile` has been explicitly set.
  var hasProfile: Bool {return _storage._profile != nil}
  /// Clears the value of `profile`. Subsequent reads from it will return its default value.
  mutating func clearProfile() {_uniqueStorage()._profile = nil}

  var owner: String {
    get {return _storage._owner}
    set {_uniqueStorage()._owner = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// DeviceCredential is the resource representation of
/// teleport.devicetrust.v1.DeviceCredential.
struct Types_DeviceCredential {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var publicKeyDer: Data = Data()

  var deviceAttestationType: String = String()

  var tpmEkcertSerial: String = String()

  var tpmAkPublic: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DeviceCollectedData is the resource representation of
/// teleport.devicetrust.v1.DeviceCollectedData.
struct Types_DeviceCollectedData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var collectTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._collectTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._collectTime = newValue}
  }
  /// Returns true if `collectTime` has been explicitly set.
  var hasCollectTime: Bool {return _storage._collectTime != nil}
  /// Clears the value of `collectTime`. Subsequent reads from it will return its default value.
  mutating func clearCollectTime() {_uniqueStorage()._collectTime = nil}

  var recordTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._recordTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._recordTime = newValue}
  }
  /// Returns true if `recordTime` has been explicitly set.
  var hasRecordTime: Bool {return _storage._recordTime != nil}
  /// Clears the value of `recordTime`. Subsequent reads from it will return its default value.
  mutating func clearRecordTime() {_uniqueStorage()._recordTime = nil}

  var osType: String {
    get {return _storage._osType}
    set {_uniqueStorage()._osType = newValue}
  }

  var serialNumber: String {
    get {return _storage._serialNumber}
    set {_uniqueStorage()._serialNumber = newValue}
  }

  var modelIdentifier: String {
    get {return _storage._modelIdentifier}
    set {_uniqueStorage()._modelIdentifier = newValue}
  }

  var osVersion: String {
    get {return _storage._osVersion}
    set {_uniqueStorage()._osVersion = newValue}
  }

  var osBuild: String {
    get {return _storage._osBuild}
    set {_uniqueStorage()._osBuild = newValue}
  }

  var osUsername: String {
    get {return _storage._osUsername}
    set {_uniqueStorage()._osUsername = newValue}
  }

  var jamfBinaryVersion: String {
    get {return _storage._jamfBinaryVersion}
    set {_uniqueStorage()._jamfBinaryVersion = newValue}
  }

  var macosEnrollmentProfiles: String {
    get {return _storage._macosEnrollmentProfiles}
    set {_uniqueStorage()._macosEnrollmentProfiles = newValue}
  }

  var reportedAssetTag: String {
    get {return _storage._reportedAssetTag}
    set {_uniqueStorage()._reportedAssetTag = newValue}
  }

  var systemSerialNumber: String {
    get {return _storage._systemSerialNumber}
    set {_uniqueStorage()._systemSerialNumber = newValue}
  }

  var baseBoardSerialNumber: String {
    get {return _storage._baseBoardSerialNumber}
    set {_uniqueStorage()._baseBoardSerialNumber = newValue}
  }

  var tpmPlatformAttestation: Types_TPMPlatformAttestation {
    get {return _storage._tpmPlatformAttestation ?? Types_TPMPlatformAttestation()}
    set {_uniqueStorage()._tpmPlatformAttestation = newValue}
  }
  /// Returns true if `tpmPlatformAttestation` has been explicitly set.
  var hasTpmPlatformAttestation: Bool {return _storage._tpmPlatformAttestation != nil}
  /// Clears the value of `tpmPlatformAttestation`. Subsequent reads from it will return its default value.
  mutating func clearTpmPlatformAttestation() {_uniqueStorage()._tpmPlatformAttestation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// TPMPCR is the resource representation of teleport.devicetrust.v1.TPMPCR.
struct Types_TPMPCR {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var index: Int32 = 0

  var digest: Data = Data()

  var digestAlg: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TPMQuote is the resource representation of teleport.devicetrust.v1.TPMQuote.
struct Types_TPMQuote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var quote: Data = Data()

  var signature: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TPMPlatformParameters is the resource representation of
/// teleport.devicetrust.v1.TPMPlatformParameters.
struct Types_TPMPlatformParameters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var quotes: [Types_TPMQuote] = []

  var pcrs: [Types_TPMPCR] = []

  var eventLog: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TPMPlatformAttestation is the resource representation of
/// teleport.devicetrust.v1.TPMPlatformAttestation.
struct Types_TPMPlatformAttestation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var nonce: Data = Data()

  var platformParameters: Types_TPMPlatformParameters {
    get {return _platformParameters ?? Types_TPMPlatformParameters()}
    set {_platformParameters = newValue}
  }
  /// Returns true if `platformParameters` has been explicitly set.
  var hasPlatformParameters: Bool {return self._platformParameters != nil}
  /// Clears the value of `platformParameters`. Subsequent reads from it will return its default value.
  mutating func clearPlatformParameters() {self._platformParameters = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _platformParameters: Types_TPMPlatformParameters? = nil
}

/// DeviceSource is the resource representation of
/// teleport.devicetrust.v1.DeviceSource..
struct Types_DeviceSource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var origin: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DeviceProfile is the resource representation of
/// teleport.devicetrust.v1.DeviceProfile.
struct Types_DeviceProfile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  mutating func clearUpdateTime() {self._updateTime = nil}

  var modelIdentifier: String = String()

  var osVersion: String = String()

  var osBuild: String = String()

  var osUsernames: [String] = []

  var jamfBinaryVersion: String = String()

  var externalID: String = String()

  var osBuildSupplemental: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Types_DeviceV1: @unchecked Sendable {}
extension Types_DeviceSpec: @unchecked Sendable {}
extension Types_DeviceCredential: @unchecked Sendable {}
extension Types_DeviceCollectedData: @unchecked Sendable {}
extension Types_TPMPCR: @unchecked Sendable {}
extension Types_TPMQuote: @unchecked Sendable {}
extension Types_TPMPlatformParameters: @unchecked Sendable {}
extension Types_TPMPlatformAttestation: @unchecked Sendable {}
extension Types_DeviceSource: @unchecked Sendable {}
extension Types_DeviceProfile: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "types"

extension Types_DeviceV1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceV1"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Header"),
    5: .same(proto: "spec"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._spec) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._spec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_DeviceV1, rhs: Types_DeviceV1) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._spec != rhs._spec {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Types_DeviceSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "os_type"),
    2: .standard(proto: "asset_tag"),
    3: .standard(proto: "create_time"),
    4: .standard(proto: "update_time"),
    5: .standard(proto: "enroll_status"),
    6: .same(proto: "credential"),
    7: .standard(proto: "collected_data"),
    8: .same(proto: "source"),
    9: .same(proto: "profile"),
    10: .same(proto: "owner"),
  ]

  fileprivate class _StorageClass {
    var _osType: String = String()
    var _assetTag: String = String()
    var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _enrollStatus: String = String()
    var _credential: Types_DeviceCredential? = nil
    var _collectedData: [Types_DeviceCollectedData] = []
    var _source: Types_DeviceSource? = nil
    var _profile: Types_DeviceProfile? = nil
    var _owner: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _osType = source._osType
      _assetTag = source._assetTag
      _createTime = source._createTime
      _updateTime = source._updateTime
      _enrollStatus = source._enrollStatus
      _credential = source._credential
      _collectedData = source._collectedData
      _source = source._source
      _profile = source._profile
      _owner = source._owner
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._osType) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._assetTag) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._createTime) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._updateTime) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._enrollStatus) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._credential) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._collectedData) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._source) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._profile) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._owner) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._osType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._osType, fieldNumber: 1)
      }
      if !_storage._assetTag.isEmpty {
        try visitor.visitSingularStringField(value: _storage._assetTag, fieldNumber: 2)
      }
      try { if let v = _storage._createTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._updateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._enrollStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._enrollStatus, fieldNumber: 5)
      }
      try { if let v = _storage._credential {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if !_storage._collectedData.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._collectedData, fieldNumber: 7)
      }
      try { if let v = _storage._source {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._profile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if !_storage._owner.isEmpty {
        try visitor.visitSingularStringField(value: _storage._owner, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_DeviceSpec, rhs: Types_DeviceSpec) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._osType != rhs_storage._osType {return false}
        if _storage._assetTag != rhs_storage._assetTag {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        if _storage._enrollStatus != rhs_storage._enrollStatus {return false}
        if _storage._credential != rhs_storage._credential {return false}
        if _storage._collectedData != rhs_storage._collectedData {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._profile != rhs_storage._profile {return false}
        if _storage._owner != rhs_storage._owner {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Types_DeviceCredential: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceCredential"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "public_key_der"),
    3: .standard(proto: "device_attestation_type"),
    4: .standard(proto: "tpm_ekcert_serial"),
    5: .standard(proto: "tpm_ak_public"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.publicKeyDer) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.deviceAttestationType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.tpmEkcertSerial) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.tpmAkPublic) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.publicKeyDer.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKeyDer, fieldNumber: 2)
    }
    if !self.deviceAttestationType.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceAttestationType, fieldNumber: 3)
    }
    if !self.tpmEkcertSerial.isEmpty {
      try visitor.visitSingularStringField(value: self.tpmEkcertSerial, fieldNumber: 4)
    }
    if !self.tpmAkPublic.isEmpty {
      try visitor.visitSingularBytesField(value: self.tpmAkPublic, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_DeviceCredential, rhs: Types_DeviceCredential) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.publicKeyDer != rhs.publicKeyDer {return false}
    if lhs.deviceAttestationType != rhs.deviceAttestationType {return false}
    if lhs.tpmEkcertSerial != rhs.tpmEkcertSerial {return false}
    if lhs.tpmAkPublic != rhs.tpmAkPublic {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Types_DeviceCollectedData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceCollectedData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collect_time"),
    2: .standard(proto: "record_time"),
    3: .standard(proto: "os_type"),
    4: .standard(proto: "serial_number"),
    5: .standard(proto: "model_identifier"),
    6: .standard(proto: "os_version"),
    7: .standard(proto: "os_build"),
    8: .standard(proto: "os_username"),
    9: .standard(proto: "jamf_binary_version"),
    10: .standard(proto: "macos_enrollment_profiles"),
    11: .standard(proto: "reported_asset_tag"),
    12: .standard(proto: "system_serial_number"),
    13: .standard(proto: "base_board_serial_number"),
    14: .standard(proto: "tpm_platform_attestation"),
  ]

  fileprivate class _StorageClass {
    var _collectTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _recordTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _osType: String = String()
    var _serialNumber: String = String()
    var _modelIdentifier: String = String()
    var _osVersion: String = String()
    var _osBuild: String = String()
    var _osUsername: String = String()
    var _jamfBinaryVersion: String = String()
    var _macosEnrollmentProfiles: String = String()
    var _reportedAssetTag: String = String()
    var _systemSerialNumber: String = String()
    var _baseBoardSerialNumber: String = String()
    var _tpmPlatformAttestation: Types_TPMPlatformAttestation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _collectTime = source._collectTime
      _recordTime = source._recordTime
      _osType = source._osType
      _serialNumber = source._serialNumber
      _modelIdentifier = source._modelIdentifier
      _osVersion = source._osVersion
      _osBuild = source._osBuild
      _osUsername = source._osUsername
      _jamfBinaryVersion = source._jamfBinaryVersion
      _macosEnrollmentProfiles = source._macosEnrollmentProfiles
      _reportedAssetTag = source._reportedAssetTag
      _systemSerialNumber = source._systemSerialNumber
      _baseBoardSerialNumber = source._baseBoardSerialNumber
      _tpmPlatformAttestation = source._tpmPlatformAttestation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._collectTime) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._recordTime) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._osType) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._serialNumber) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._modelIdentifier) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._osVersion) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._osBuild) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._osUsername) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._jamfBinaryVersion) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._macosEnrollmentProfiles) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._reportedAssetTag) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._systemSerialNumber) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._baseBoardSerialNumber) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._tpmPlatformAttestation) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._collectTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._recordTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._osType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._osType, fieldNumber: 3)
      }
      if !_storage._serialNumber.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serialNumber, fieldNumber: 4)
      }
      if !_storage._modelIdentifier.isEmpty {
        try visitor.visitSingularStringField(value: _storage._modelIdentifier, fieldNumber: 5)
      }
      if !_storage._osVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._osVersion, fieldNumber: 6)
      }
      if !_storage._osBuild.isEmpty {
        try visitor.visitSingularStringField(value: _storage._osBuild, fieldNumber: 7)
      }
      if !_storage._osUsername.isEmpty {
        try visitor.visitSingularStringField(value: _storage._osUsername, fieldNumber: 8)
      }
      if !_storage._jamfBinaryVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jamfBinaryVersion, fieldNumber: 9)
      }
      if !_storage._macosEnrollmentProfiles.isEmpty {
        try visitor.visitSingularStringField(value: _storage._macosEnrollmentProfiles, fieldNumber: 10)
      }
      if !_storage._reportedAssetTag.isEmpty {
        try visitor.visitSingularStringField(value: _storage._reportedAssetTag, fieldNumber: 11)
      }
      if !_storage._systemSerialNumber.isEmpty {
        try visitor.visitSingularStringField(value: _storage._systemSerialNumber, fieldNumber: 12)
      }
      if !_storage._baseBoardSerialNumber.isEmpty {
        try visitor.visitSingularStringField(value: _storage._baseBoardSerialNumber, fieldNumber: 13)
      }
      try { if let v = _storage._tpmPlatformAttestation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_DeviceCollectedData, rhs: Types_DeviceCollectedData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._collectTime != rhs_storage._collectTime {return false}
        if _storage._recordTime != rhs_storage._recordTime {return false}
        if _storage._osType != rhs_storage._osType {return false}
        if _storage._serialNumber != rhs_storage._serialNumber {return false}
        if _storage._modelIdentifier != rhs_storage._modelIdentifier {return false}
        if _storage._osVersion != rhs_storage._osVersion {return false}
        if _storage._osBuild != rhs_storage._osBuild {return false}
        if _storage._osUsername != rhs_storage._osUsername {return false}
        if _storage._jamfBinaryVersion != rhs_storage._jamfBinaryVersion {return false}
        if _storage._macosEnrollmentProfiles != rhs_storage._macosEnrollmentProfiles {return false}
        if _storage._reportedAssetTag != rhs_storage._reportedAssetTag {return false}
        if _storage._systemSerialNumber != rhs_storage._systemSerialNumber {return false}
        if _storage._baseBoardSerialNumber != rhs_storage._baseBoardSerialNumber {return false}
        if _storage._tpmPlatformAttestation != rhs_storage._tpmPlatformAttestation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Types_TPMPCR: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TPMPCR"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "digest"),
    3: .standard(proto: "digest_alg"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.index) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.digest) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.digestAlg) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 1)
    }
    if !self.digest.isEmpty {
      try visitor.visitSingularBytesField(value: self.digest, fieldNumber: 2)
    }
    if self.digestAlg != 0 {
      try visitor.visitSingularUInt64Field(value: self.digestAlg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_TPMPCR, rhs: Types_TPMPCR) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.digest != rhs.digest {return false}
    if lhs.digestAlg != rhs.digestAlg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Types_TPMQuote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TPMQuote"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "quote"),
    2: .same(proto: "signature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.quote) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.quote.isEmpty {
      try visitor.visitSingularBytesField(value: self.quote, fieldNumber: 1)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_TPMQuote, rhs: Types_TPMQuote) -> Bool {
    if lhs.quote != rhs.quote {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Types_TPMPlatformParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TPMPlatformParameters"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "quotes"),
    2: .same(proto: "pcrs"),
    3: .standard(proto: "event_log"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.quotes) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.pcrs) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.eventLog) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.quotes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.quotes, fieldNumber: 1)
    }
    if !self.pcrs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pcrs, fieldNumber: 2)
    }
    if !self.eventLog.isEmpty {
      try visitor.visitSingularBytesField(value: self.eventLog, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_TPMPlatformParameters, rhs: Types_TPMPlatformParameters) -> Bool {
    if lhs.quotes != rhs.quotes {return false}
    if lhs.pcrs != rhs.pcrs {return false}
    if lhs.eventLog != rhs.eventLog {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Types_TPMPlatformAttestation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TPMPlatformAttestation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nonce"),
    2: .standard(proto: "platform_parameters"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.nonce) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._platformParameters) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.nonce.isEmpty {
      try visitor.visitSingularBytesField(value: self.nonce, fieldNumber: 1)
    }
    try { if let v = self._platformParameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_TPMPlatformAttestation, rhs: Types_TPMPlatformAttestation) -> Bool {
    if lhs.nonce != rhs.nonce {return false}
    if lhs._platformParameters != rhs._platformParameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Types_DeviceSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceSource"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "origin"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.origin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.origin.isEmpty {
      try visitor.visitSingularStringField(value: self.origin, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_DeviceSource, rhs: Types_DeviceSource) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.origin != rhs.origin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Types_DeviceProfile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceProfile"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "update_time"),
    2: .standard(proto: "model_identifier"),
    3: .standard(proto: "os_version"),
    4: .standard(proto: "os_build"),
    5: .standard(proto: "os_usernames"),
    6: .standard(proto: "jamf_binary_version"),
    7: .standard(proto: "external_id"),
    8: .standard(proto: "os_build_supplemental"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.modelIdentifier) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.osVersion) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.osBuild) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.osUsernames) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.jamfBinaryVersion) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.externalID) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.osBuildSupplemental) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.modelIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.modelIdentifier, fieldNumber: 2)
    }
    if !self.osVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.osVersion, fieldNumber: 3)
    }
    if !self.osBuild.isEmpty {
      try visitor.visitSingularStringField(value: self.osBuild, fieldNumber: 4)
    }
    if !self.osUsernames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.osUsernames, fieldNumber: 5)
    }
    if !self.jamfBinaryVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.jamfBinaryVersion, fieldNumber: 6)
    }
    if !self.externalID.isEmpty {
      try visitor.visitSingularStringField(value: self.externalID, fieldNumber: 7)
    }
    if !self.osBuildSupplemental.isEmpty {
      try visitor.visitSingularStringField(value: self.osBuildSupplemental, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_DeviceProfile, rhs: Types_DeviceProfile) -> Bool {
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.modelIdentifier != rhs.modelIdentifier {return false}
    if lhs.osVersion != rhs.osVersion {return false}
    if lhs.osBuild != rhs.osBuild {return false}
    if lhs.osUsernames != rhs.osUsernames {return false}
    if lhs.jamfBinaryVersion != rhs.jamfBinaryVersion {return false}
    if lhs.externalID != rhs.externalID {return false}
    if lhs.osBuildSupplemental != rhs.osBuildSupplemental {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
