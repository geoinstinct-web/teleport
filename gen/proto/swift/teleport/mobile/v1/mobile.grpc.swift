//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: teleport/mobile/v1/mobile.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// MobileService provides methods needed for mobile applications.
///
/// Usage: instantiate `Teleport_Mobile_V1_MobileServiceClient`, then call methods of this protocol to make API calls.
internal protocol Teleport_Mobile_V1_MobileServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Teleport_Mobile_V1_MobileServiceClientInterceptorFactoryProtocol? { get }

  func createAuthToken(
    _ request: Teleport_Mobile_V1_CreateAuthTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Mobile_V1_CreateAuthTokenRequest, Teleport_Mobile_V1_CreateAuthTokenResponse>

  func redeemAuthToken(
    _ request: Teleport_Mobile_V1_RedeemAuthTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Mobile_V1_RedeemAuthTokenRequest, Teleport_Mobile_V1_RedeemAuthTokenResponse>

  func registerDeviceNotifications(
    _ request: Teleport_Mobile_V1_RegisterDeviceNotificationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Mobile_V1_RegisterDeviceNotificationsRequest, Teleport_Mobile_V1_RegisterDeviceNotificationsResponse>
}

extension Teleport_Mobile_V1_MobileServiceClientProtocol {
  internal var serviceName: String {
    return "teleport.mobile.v1.MobileService"
  }

  /// CreateAuthToken
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAuthToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createAuthToken(
    _ request: Teleport_Mobile_V1_CreateAuthTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Mobile_V1_CreateAuthTokenRequest, Teleport_Mobile_V1_CreateAuthTokenResponse> {
    return self.makeUnaryCall(
      path: Teleport_Mobile_V1_MobileServiceClientMetadata.Methods.createAuthToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAuthTokenInterceptors() ?? []
    )
  }

  /// RedeemAuthToken
  ///
  /// - Parameters:
  ///   - request: Request to send to RedeemAuthToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func redeemAuthToken(
    _ request: Teleport_Mobile_V1_RedeemAuthTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Mobile_V1_RedeemAuthTokenRequest, Teleport_Mobile_V1_RedeemAuthTokenResponse> {
    return self.makeUnaryCall(
      path: Teleport_Mobile_V1_MobileServiceClientMetadata.Methods.redeemAuthToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedeemAuthTokenInterceptors() ?? []
    )
  }

  /// RegisterDeviceNotifications
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterDeviceNotifications.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerDeviceNotifications(
    _ request: Teleport_Mobile_V1_RegisterDeviceNotificationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Mobile_V1_RegisterDeviceNotificationsRequest, Teleport_Mobile_V1_RegisterDeviceNotificationsResponse> {
    return self.makeUnaryCall(
      path: Teleport_Mobile_V1_MobileServiceClientMetadata.Methods.registerDeviceNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterDeviceNotificationsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Teleport_Mobile_V1_MobileServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Teleport_Mobile_V1_MobileServiceNIOClient")
internal final class Teleport_Mobile_V1_MobileServiceClient: Teleport_Mobile_V1_MobileServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Teleport_Mobile_V1_MobileServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Teleport_Mobile_V1_MobileServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the teleport.mobile.v1.MobileService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Teleport_Mobile_V1_MobileServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Teleport_Mobile_V1_MobileServiceNIOClient: Teleport_Mobile_V1_MobileServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Teleport_Mobile_V1_MobileServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the teleport.mobile.v1.MobileService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Teleport_Mobile_V1_MobileServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// MobileService provides methods needed for mobile applications.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Teleport_Mobile_V1_MobileServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Teleport_Mobile_V1_MobileServiceClientInterceptorFactoryProtocol? { get }

  func makeCreateAuthTokenCall(
    _ request: Teleport_Mobile_V1_CreateAuthTokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Mobile_V1_CreateAuthTokenRequest, Teleport_Mobile_V1_CreateAuthTokenResponse>

  func makeRedeemAuthTokenCall(
    _ request: Teleport_Mobile_V1_RedeemAuthTokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Mobile_V1_RedeemAuthTokenRequest, Teleport_Mobile_V1_RedeemAuthTokenResponse>

  func makeRegisterDeviceNotificationsCall(
    _ request: Teleport_Mobile_V1_RegisterDeviceNotificationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Mobile_V1_RegisterDeviceNotificationsRequest, Teleport_Mobile_V1_RegisterDeviceNotificationsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Teleport_Mobile_V1_MobileServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Teleport_Mobile_V1_MobileServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Teleport_Mobile_V1_MobileServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateAuthTokenCall(
    _ request: Teleport_Mobile_V1_CreateAuthTokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Mobile_V1_CreateAuthTokenRequest, Teleport_Mobile_V1_CreateAuthTokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Mobile_V1_MobileServiceClientMetadata.Methods.createAuthToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAuthTokenInterceptors() ?? []
    )
  }

  internal func makeRedeemAuthTokenCall(
    _ request: Teleport_Mobile_V1_RedeemAuthTokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Mobile_V1_RedeemAuthTokenRequest, Teleport_Mobile_V1_RedeemAuthTokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Mobile_V1_MobileServiceClientMetadata.Methods.redeemAuthToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedeemAuthTokenInterceptors() ?? []
    )
  }

  internal func makeRegisterDeviceNotificationsCall(
    _ request: Teleport_Mobile_V1_RegisterDeviceNotificationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Mobile_V1_RegisterDeviceNotificationsRequest, Teleport_Mobile_V1_RegisterDeviceNotificationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Mobile_V1_MobileServiceClientMetadata.Methods.registerDeviceNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterDeviceNotificationsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Teleport_Mobile_V1_MobileServiceAsyncClientProtocol {
  internal func createAuthToken(
    _ request: Teleport_Mobile_V1_CreateAuthTokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Teleport_Mobile_V1_CreateAuthTokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Mobile_V1_MobileServiceClientMetadata.Methods.createAuthToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAuthTokenInterceptors() ?? []
    )
  }

  internal func redeemAuthToken(
    _ request: Teleport_Mobile_V1_RedeemAuthTokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Teleport_Mobile_V1_RedeemAuthTokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Mobile_V1_MobileServiceClientMetadata.Methods.redeemAuthToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedeemAuthTokenInterceptors() ?? []
    )
  }

  internal func registerDeviceNotifications(
    _ request: Teleport_Mobile_V1_RegisterDeviceNotificationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Teleport_Mobile_V1_RegisterDeviceNotificationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Mobile_V1_MobileServiceClientMetadata.Methods.registerDeviceNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterDeviceNotificationsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Teleport_Mobile_V1_MobileServiceAsyncClient: Teleport_Mobile_V1_MobileServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Teleport_Mobile_V1_MobileServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Teleport_Mobile_V1_MobileServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Teleport_Mobile_V1_MobileServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createAuthToken'.
  func makeCreateAuthTokenInterceptors() -> [ClientInterceptor<Teleport_Mobile_V1_CreateAuthTokenRequest, Teleport_Mobile_V1_CreateAuthTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'redeemAuthToken'.
  func makeRedeemAuthTokenInterceptors() -> [ClientInterceptor<Teleport_Mobile_V1_RedeemAuthTokenRequest, Teleport_Mobile_V1_RedeemAuthTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'registerDeviceNotifications'.
  func makeRegisterDeviceNotificationsInterceptors() -> [ClientInterceptor<Teleport_Mobile_V1_RegisterDeviceNotificationsRequest, Teleport_Mobile_V1_RegisterDeviceNotificationsResponse>]
}

internal enum Teleport_Mobile_V1_MobileServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MobileService",
    fullName: "teleport.mobile.v1.MobileService",
    methods: [
      Teleport_Mobile_V1_MobileServiceClientMetadata.Methods.createAuthToken,
      Teleport_Mobile_V1_MobileServiceClientMetadata.Methods.redeemAuthToken,
      Teleport_Mobile_V1_MobileServiceClientMetadata.Methods.registerDeviceNotifications,
    ]
  )

  internal enum Methods {
    internal static let createAuthToken = GRPCMethodDescriptor(
      name: "CreateAuthToken",
      path: "/teleport.mobile.v1.MobileService/CreateAuthToken",
      type: GRPCCallType.unary
    )

    internal static let redeemAuthToken = GRPCMethodDescriptor(
      name: "RedeemAuthToken",
      path: "/teleport.mobile.v1.MobileService/RedeemAuthToken",
      type: GRPCCallType.unary
    )

    internal static let registerDeviceNotifications = GRPCMethodDescriptor(
      name: "RegisterDeviceNotifications",
      path: "/teleport.mobile.v1.MobileService/RegisterDeviceNotifications",
      type: GRPCCallType.unary
    )
  }
}

/// MobileService provides methods needed for mobile applications.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Teleport_Mobile_V1_MobileServiceProvider: CallHandlerProvider {
  var interceptors: Teleport_Mobile_V1_MobileServiceServerInterceptorFactoryProtocol? { get }

  /// CreateAuthToken
  func createAuthToken(request: Teleport_Mobile_V1_CreateAuthTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Teleport_Mobile_V1_CreateAuthTokenResponse>

  /// RedeemAuthToken
  func redeemAuthToken(request: Teleport_Mobile_V1_RedeemAuthTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Teleport_Mobile_V1_RedeemAuthTokenResponse>

  /// RegisterDeviceNotifications
  func registerDeviceNotifications(request: Teleport_Mobile_V1_RegisterDeviceNotificationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Teleport_Mobile_V1_RegisterDeviceNotificationsResponse>
}

extension Teleport_Mobile_V1_MobileServiceProvider {
  internal var serviceName: Substring {
    return Teleport_Mobile_V1_MobileServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateAuthToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Mobile_V1_CreateAuthTokenRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Mobile_V1_CreateAuthTokenResponse>(),
        interceptors: self.interceptors?.makeCreateAuthTokenInterceptors() ?? [],
        userFunction: self.createAuthToken(request:context:)
      )

    case "RedeemAuthToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Mobile_V1_RedeemAuthTokenRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Mobile_V1_RedeemAuthTokenResponse>(),
        interceptors: self.interceptors?.makeRedeemAuthTokenInterceptors() ?? [],
        userFunction: self.redeemAuthToken(request:context:)
      )

    case "RegisterDeviceNotifications":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Mobile_V1_RegisterDeviceNotificationsRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Mobile_V1_RegisterDeviceNotificationsResponse>(),
        interceptors: self.interceptors?.makeRegisterDeviceNotificationsInterceptors() ?? [],
        userFunction: self.registerDeviceNotifications(request:context:)
      )

    default:
      return nil
    }
  }
}

/// MobileService provides methods needed for mobile applications.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Teleport_Mobile_V1_MobileServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Teleport_Mobile_V1_MobileServiceServerInterceptorFactoryProtocol? { get }

  /// CreateAuthToken
  func createAuthToken(
    request: Teleport_Mobile_V1_CreateAuthTokenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Teleport_Mobile_V1_CreateAuthTokenResponse

  /// RedeemAuthToken
  func redeemAuthToken(
    request: Teleport_Mobile_V1_RedeemAuthTokenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Teleport_Mobile_V1_RedeemAuthTokenResponse

  /// RegisterDeviceNotifications
  func registerDeviceNotifications(
    request: Teleport_Mobile_V1_RegisterDeviceNotificationsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Teleport_Mobile_V1_RegisterDeviceNotificationsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Teleport_Mobile_V1_MobileServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Teleport_Mobile_V1_MobileServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Teleport_Mobile_V1_MobileServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Teleport_Mobile_V1_MobileServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateAuthToken":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Mobile_V1_CreateAuthTokenRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Mobile_V1_CreateAuthTokenResponse>(),
        interceptors: self.interceptors?.makeCreateAuthTokenInterceptors() ?? [],
        wrapping: { try await self.createAuthToken(request: $0, context: $1) }
      )

    case "RedeemAuthToken":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Mobile_V1_RedeemAuthTokenRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Mobile_V1_RedeemAuthTokenResponse>(),
        interceptors: self.interceptors?.makeRedeemAuthTokenInterceptors() ?? [],
        wrapping: { try await self.redeemAuthToken(request: $0, context: $1) }
      )

    case "RegisterDeviceNotifications":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Mobile_V1_RegisterDeviceNotificationsRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Mobile_V1_RegisterDeviceNotificationsResponse>(),
        interceptors: self.interceptors?.makeRegisterDeviceNotificationsInterceptors() ?? [],
        wrapping: { try await self.registerDeviceNotifications(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Teleport_Mobile_V1_MobileServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'createAuthToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateAuthTokenInterceptors() -> [ServerInterceptor<Teleport_Mobile_V1_CreateAuthTokenRequest, Teleport_Mobile_V1_CreateAuthTokenResponse>]

  /// - Returns: Interceptors to use when handling 'redeemAuthToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRedeemAuthTokenInterceptors() -> [ServerInterceptor<Teleport_Mobile_V1_RedeemAuthTokenRequest, Teleport_Mobile_V1_RedeemAuthTokenResponse>]

  /// - Returns: Interceptors to use when handling 'registerDeviceNotifications'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterDeviceNotificationsInterceptors() -> [ServerInterceptor<Teleport_Mobile_V1_RegisterDeviceNotificationsRequest, Teleport_Mobile_V1_RegisterDeviceNotificationsResponse>]
}

internal enum Teleport_Mobile_V1_MobileServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MobileService",
    fullName: "teleport.mobile.v1.MobileService",
    methods: [
      Teleport_Mobile_V1_MobileServiceServerMetadata.Methods.createAuthToken,
      Teleport_Mobile_V1_MobileServiceServerMetadata.Methods.redeemAuthToken,
      Teleport_Mobile_V1_MobileServiceServerMetadata.Methods.registerDeviceNotifications,
    ]
  )

  internal enum Methods {
    internal static let createAuthToken = GRPCMethodDescriptor(
      name: "CreateAuthToken",
      path: "/teleport.mobile.v1.MobileService/CreateAuthToken",
      type: GRPCCallType.unary
    )

    internal static let redeemAuthToken = GRPCMethodDescriptor(
      name: "RedeemAuthToken",
      path: "/teleport.mobile.v1.MobileService/RedeemAuthToken",
      type: GRPCCallType.unary
    )

    internal static let registerDeviceNotifications = GRPCMethodDescriptor(
      name: "RegisterDeviceNotifications",
      path: "/teleport.mobile.v1.MobileService/RegisterDeviceNotifications",
      type: GRPCCallType.unary
    )
  }
}
