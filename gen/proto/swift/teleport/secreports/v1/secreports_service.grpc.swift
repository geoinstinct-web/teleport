//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: teleport/secreports/v1/secreports_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// SecReportsService is a service that manages security reports.
///
/// Usage: instantiate `Teleport_Secreports_V1_SecReportsServiceClient`, then call methods of this protocol to make API calls.
internal protocol Teleport_Secreports_V1_SecReportsServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Teleport_Secreports_V1_SecReportsServiceClientInterceptorFactoryProtocol? { get }

  func upsertAuditQuery(
    _ request: Teleport_Secreports_V1_UpsertAuditQueryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Secreports_V1_UpsertAuditQueryRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getAuditQuery(
    _ request: Teleport_Secreports_V1_GetAuditQueryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Secreports_V1_GetAuditQueryRequest, Teleport_Secreports_V1_AuditQuery>

  func listAuditQueries(
    _ request: Teleport_Secreports_V1_ListAuditQueriesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Secreports_V1_ListAuditQueriesRequest, Teleport_Secreports_V1_ListAuditQueriesResponse>

  func deleteAuditQuery(
    _ request: Teleport_Secreports_V1_DeleteAuditQueryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Secreports_V1_DeleteAuditQueryRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func upsertReport(
    _ request: Teleport_Secreports_V1_UpsertReportRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Secreports_V1_UpsertReportRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getReport(
    _ request: Teleport_Secreports_V1_GetReportRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Secreports_V1_GetReportRequest, Teleport_Secreports_V1_Report>

  func listReports(
    _ request: Teleport_Secreports_V1_ListReportsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Secreports_V1_ListReportsRequest, Teleport_Secreports_V1_ListReportsResponse>

  func deleteReport(
    _ request: Teleport_Secreports_V1_DeleteReportRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Secreports_V1_DeleteReportRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func runAuditQuery(
    _ request: Teleport_Secreports_V1_RunAuditQueryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Secreports_V1_RunAuditQueryRequest, Teleport_Secreports_V1_RunAuditQueryResponse>

  func getAuditQueryResult(
    _ request: Teleport_Secreports_V1_GetAuditQueryResultRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Secreports_V1_GetAuditQueryResultRequest, Teleport_Secreports_V1_GetAuditQueryResultResponse>

  func runReport(
    _ request: Teleport_Secreports_V1_RunReportRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Secreports_V1_RunReportRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getReportResult(
    _ request: Teleport_Secreports_V1_GetReportResultRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Secreports_V1_GetReportResultRequest, Teleport_Secreports_V1_GetReportResultResponse>

  func getReportState(
    _ request: Teleport_Secreports_V1_GetReportStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Secreports_V1_GetReportStateRequest, Teleport_Secreports_V1_ReportState>

  func getSchema(
    _ request: Teleport_Secreports_V1_GetSchemaRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Secreports_V1_GetSchemaRequest, Teleport_Secreports_V1_GetSchemaResponse>
}

extension Teleport_Secreports_V1_SecReportsServiceClientProtocol {
  internal var serviceName: String {
    return "teleport.secreports.v1.SecReportsService"
  }

  /// UpsertAuditQuery upsets an audit query.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpsertAuditQuery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func upsertAuditQuery(
    _ request: Teleport_Secreports_V1_UpsertAuditQueryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Secreports_V1_UpsertAuditQueryRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.upsertAuditQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertAuditQueryInterceptors() ?? []
    )
  }

  /// GetAuditQuery returns an audit query.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAuditQuery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAuditQuery(
    _ request: Teleport_Secreports_V1_GetAuditQueryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Secreports_V1_GetAuditQueryRequest, Teleport_Secreports_V1_AuditQuery> {
    return self.makeUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getAuditQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAuditQueryInterceptors() ?? []
    )
  }

  /// ListAuditQueries returns a paginated list of all Okta import rule resources.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListAuditQueries.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listAuditQueries(
    _ request: Teleport_Secreports_V1_ListAuditQueriesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Secreports_V1_ListAuditQueriesRequest, Teleport_Secreports_V1_ListAuditQueriesResponse> {
    return self.makeUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.listAuditQueries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListAuditQueriesInterceptors() ?? []
    )
  }

  /// DeleteAuditQuery deletes an audit query.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAuditQuery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteAuditQuery(
    _ request: Teleport_Secreports_V1_DeleteAuditQueryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Secreports_V1_DeleteAuditQueryRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.deleteAuditQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAuditQueryInterceptors() ?? []
    )
  }

  /// UpsertReport upsets a report.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpsertReport.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func upsertReport(
    _ request: Teleport_Secreports_V1_UpsertReportRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Secreports_V1_UpsertReportRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.upsertReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertReportInterceptors() ?? []
    )
  }

  /// GetReport returns a report.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetReport.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getReport(
    _ request: Teleport_Secreports_V1_GetReportRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Secreports_V1_GetReportRequest, Teleport_Secreports_V1_Report> {
    return self.makeUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReportInterceptors() ?? []
    )
  }

  /// ListReports returns a paginated list of all Okta import rule resources.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListReports.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listReports(
    _ request: Teleport_Secreports_V1_ListReportsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Secreports_V1_ListReportsRequest, Teleport_Secreports_V1_ListReportsResponse> {
    return self.makeUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.listReports.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListReportsInterceptors() ?? []
    )
  }

  /// DeleteReport deletes a security report.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteReport.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteReport(
    _ request: Teleport_Secreports_V1_DeleteReportRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Secreports_V1_DeleteReportRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.deleteReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteReportInterceptors() ?? []
    )
  }

  /// RunAuditQuery runs an audit query.
  ///
  /// - Parameters:
  ///   - request: Request to send to RunAuditQuery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func runAuditQuery(
    _ request: Teleport_Secreports_V1_RunAuditQueryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Secreports_V1_RunAuditQueryRequest, Teleport_Secreports_V1_RunAuditQueryResponse> {
    return self.makeUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.runAuditQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunAuditQueryInterceptors() ?? []
    )
  }

  /// GetAuditQueryResult returns an audit query result.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAuditQueryResult.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAuditQueryResult(
    _ request: Teleport_Secreports_V1_GetAuditQueryResultRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Secreports_V1_GetAuditQueryResultRequest, Teleport_Secreports_V1_GetAuditQueryResultResponse> {
    return self.makeUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getAuditQueryResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAuditQueryResultInterceptors() ?? []
    )
  }

  /// RunReport runs a security report.
  ///
  /// - Parameters:
  ///   - request: Request to send to RunReport.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func runReport(
    _ request: Teleport_Secreports_V1_RunReportRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Secreports_V1_RunReportRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.runReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunReportInterceptors() ?? []
    )
  }

  /// GetReportResult returns a security report result.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetReportResult.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getReportResult(
    _ request: Teleport_Secreports_V1_GetReportResultRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Secreports_V1_GetReportResultRequest, Teleport_Secreports_V1_GetReportResultResponse> {
    return self.makeUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getReportResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReportResultInterceptors() ?? []
    )
  }

  /// GetReportState returns a security report state.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetReportState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getReportState(
    _ request: Teleport_Secreports_V1_GetReportStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Secreports_V1_GetReportStateRequest, Teleport_Secreports_V1_ReportState> {
    return self.makeUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getReportState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReportStateInterceptors() ?? []
    )
  }

  /// GetSchema returns a schema of audit query.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSchema.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSchema(
    _ request: Teleport_Secreports_V1_GetSchemaRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Secreports_V1_GetSchemaRequest, Teleport_Secreports_V1_GetSchemaResponse> {
    return self.makeUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getSchema.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSchemaInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Teleport_Secreports_V1_SecReportsServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Teleport_Secreports_V1_SecReportsServiceNIOClient")
internal final class Teleport_Secreports_V1_SecReportsServiceClient: Teleport_Secreports_V1_SecReportsServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Teleport_Secreports_V1_SecReportsServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Teleport_Secreports_V1_SecReportsServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the teleport.secreports.v1.SecReportsService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Teleport_Secreports_V1_SecReportsServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Teleport_Secreports_V1_SecReportsServiceNIOClient: Teleport_Secreports_V1_SecReportsServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Teleport_Secreports_V1_SecReportsServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the teleport.secreports.v1.SecReportsService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Teleport_Secreports_V1_SecReportsServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// SecReportsService is a service that manages security reports.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Teleport_Secreports_V1_SecReportsServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Teleport_Secreports_V1_SecReportsServiceClientInterceptorFactoryProtocol? { get }

  func makeUpsertAuditQueryCall(
    _ request: Teleport_Secreports_V1_UpsertAuditQueryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_UpsertAuditQueryRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetAuditQueryCall(
    _ request: Teleport_Secreports_V1_GetAuditQueryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_GetAuditQueryRequest, Teleport_Secreports_V1_AuditQuery>

  func makeListAuditQueriesCall(
    _ request: Teleport_Secreports_V1_ListAuditQueriesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_ListAuditQueriesRequest, Teleport_Secreports_V1_ListAuditQueriesResponse>

  func makeDeleteAuditQueryCall(
    _ request: Teleport_Secreports_V1_DeleteAuditQueryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_DeleteAuditQueryRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeUpsertReportCall(
    _ request: Teleport_Secreports_V1_UpsertReportRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_UpsertReportRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetReportCall(
    _ request: Teleport_Secreports_V1_GetReportRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_GetReportRequest, Teleport_Secreports_V1_Report>

  func makeListReportsCall(
    _ request: Teleport_Secreports_V1_ListReportsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_ListReportsRequest, Teleport_Secreports_V1_ListReportsResponse>

  func makeDeleteReportCall(
    _ request: Teleport_Secreports_V1_DeleteReportRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_DeleteReportRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeRunAuditQueryCall(
    _ request: Teleport_Secreports_V1_RunAuditQueryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_RunAuditQueryRequest, Teleport_Secreports_V1_RunAuditQueryResponse>

  func makeGetAuditQueryResultCall(
    _ request: Teleport_Secreports_V1_GetAuditQueryResultRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_GetAuditQueryResultRequest, Teleport_Secreports_V1_GetAuditQueryResultResponse>

  func makeRunReportCall(
    _ request: Teleport_Secreports_V1_RunReportRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_RunReportRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetReportResultCall(
    _ request: Teleport_Secreports_V1_GetReportResultRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_GetReportResultRequest, Teleport_Secreports_V1_GetReportResultResponse>

  func makeGetReportStateCall(
    _ request: Teleport_Secreports_V1_GetReportStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_GetReportStateRequest, Teleport_Secreports_V1_ReportState>

  func makeGetSchemaCall(
    _ request: Teleport_Secreports_V1_GetSchemaRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_GetSchemaRequest, Teleport_Secreports_V1_GetSchemaResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Teleport_Secreports_V1_SecReportsServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Teleport_Secreports_V1_SecReportsServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Teleport_Secreports_V1_SecReportsServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeUpsertAuditQueryCall(
    _ request: Teleport_Secreports_V1_UpsertAuditQueryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_UpsertAuditQueryRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.upsertAuditQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertAuditQueryInterceptors() ?? []
    )
  }

  internal func makeGetAuditQueryCall(
    _ request: Teleport_Secreports_V1_GetAuditQueryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_GetAuditQueryRequest, Teleport_Secreports_V1_AuditQuery> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getAuditQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAuditQueryInterceptors() ?? []
    )
  }

  internal func makeListAuditQueriesCall(
    _ request: Teleport_Secreports_V1_ListAuditQueriesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_ListAuditQueriesRequest, Teleport_Secreports_V1_ListAuditQueriesResponse> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.listAuditQueries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListAuditQueriesInterceptors() ?? []
    )
  }

  internal func makeDeleteAuditQueryCall(
    _ request: Teleport_Secreports_V1_DeleteAuditQueryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_DeleteAuditQueryRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.deleteAuditQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAuditQueryInterceptors() ?? []
    )
  }

  internal func makeUpsertReportCall(
    _ request: Teleport_Secreports_V1_UpsertReportRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_UpsertReportRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.upsertReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertReportInterceptors() ?? []
    )
  }

  internal func makeGetReportCall(
    _ request: Teleport_Secreports_V1_GetReportRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_GetReportRequest, Teleport_Secreports_V1_Report> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReportInterceptors() ?? []
    )
  }

  internal func makeListReportsCall(
    _ request: Teleport_Secreports_V1_ListReportsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_ListReportsRequest, Teleport_Secreports_V1_ListReportsResponse> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.listReports.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListReportsInterceptors() ?? []
    )
  }

  internal func makeDeleteReportCall(
    _ request: Teleport_Secreports_V1_DeleteReportRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_DeleteReportRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.deleteReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteReportInterceptors() ?? []
    )
  }

  internal func makeRunAuditQueryCall(
    _ request: Teleport_Secreports_V1_RunAuditQueryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_RunAuditQueryRequest, Teleport_Secreports_V1_RunAuditQueryResponse> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.runAuditQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunAuditQueryInterceptors() ?? []
    )
  }

  internal func makeGetAuditQueryResultCall(
    _ request: Teleport_Secreports_V1_GetAuditQueryResultRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_GetAuditQueryResultRequest, Teleport_Secreports_V1_GetAuditQueryResultResponse> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getAuditQueryResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAuditQueryResultInterceptors() ?? []
    )
  }

  internal func makeRunReportCall(
    _ request: Teleport_Secreports_V1_RunReportRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_RunReportRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.runReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunReportInterceptors() ?? []
    )
  }

  internal func makeGetReportResultCall(
    _ request: Teleport_Secreports_V1_GetReportResultRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_GetReportResultRequest, Teleport_Secreports_V1_GetReportResultResponse> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getReportResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReportResultInterceptors() ?? []
    )
  }

  internal func makeGetReportStateCall(
    _ request: Teleport_Secreports_V1_GetReportStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_GetReportStateRequest, Teleport_Secreports_V1_ReportState> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getReportState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReportStateInterceptors() ?? []
    )
  }

  internal func makeGetSchemaCall(
    _ request: Teleport_Secreports_V1_GetSchemaRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Secreports_V1_GetSchemaRequest, Teleport_Secreports_V1_GetSchemaResponse> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getSchema.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSchemaInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Teleport_Secreports_V1_SecReportsServiceAsyncClientProtocol {
  internal func upsertAuditQuery(
    _ request: Teleport_Secreports_V1_UpsertAuditQueryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.upsertAuditQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertAuditQueryInterceptors() ?? []
    )
  }

  internal func getAuditQuery(
    _ request: Teleport_Secreports_V1_GetAuditQueryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Teleport_Secreports_V1_AuditQuery {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getAuditQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAuditQueryInterceptors() ?? []
    )
  }

  internal func listAuditQueries(
    _ request: Teleport_Secreports_V1_ListAuditQueriesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Teleport_Secreports_V1_ListAuditQueriesResponse {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.listAuditQueries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListAuditQueriesInterceptors() ?? []
    )
  }

  internal func deleteAuditQuery(
    _ request: Teleport_Secreports_V1_DeleteAuditQueryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.deleteAuditQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAuditQueryInterceptors() ?? []
    )
  }

  internal func upsertReport(
    _ request: Teleport_Secreports_V1_UpsertReportRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.upsertReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertReportInterceptors() ?? []
    )
  }

  internal func getReport(
    _ request: Teleport_Secreports_V1_GetReportRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Teleport_Secreports_V1_Report {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReportInterceptors() ?? []
    )
  }

  internal func listReports(
    _ request: Teleport_Secreports_V1_ListReportsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Teleport_Secreports_V1_ListReportsResponse {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.listReports.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListReportsInterceptors() ?? []
    )
  }

  internal func deleteReport(
    _ request: Teleport_Secreports_V1_DeleteReportRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.deleteReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteReportInterceptors() ?? []
    )
  }

  internal func runAuditQuery(
    _ request: Teleport_Secreports_V1_RunAuditQueryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Teleport_Secreports_V1_RunAuditQueryResponse {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.runAuditQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunAuditQueryInterceptors() ?? []
    )
  }

  internal func getAuditQueryResult(
    _ request: Teleport_Secreports_V1_GetAuditQueryResultRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Teleport_Secreports_V1_GetAuditQueryResultResponse {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getAuditQueryResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAuditQueryResultInterceptors() ?? []
    )
  }

  internal func runReport(
    _ request: Teleport_Secreports_V1_RunReportRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.runReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunReportInterceptors() ?? []
    )
  }

  internal func getReportResult(
    _ request: Teleport_Secreports_V1_GetReportResultRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Teleport_Secreports_V1_GetReportResultResponse {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getReportResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReportResultInterceptors() ?? []
    )
  }

  internal func getReportState(
    _ request: Teleport_Secreports_V1_GetReportStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Teleport_Secreports_V1_ReportState {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getReportState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReportStateInterceptors() ?? []
    )
  }

  internal func getSchema(
    _ request: Teleport_Secreports_V1_GetSchemaRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Teleport_Secreports_V1_GetSchemaResponse {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getSchema.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSchemaInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Teleport_Secreports_V1_SecReportsServiceAsyncClient: Teleport_Secreports_V1_SecReportsServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Teleport_Secreports_V1_SecReportsServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Teleport_Secreports_V1_SecReportsServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Teleport_Secreports_V1_SecReportsServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'upsertAuditQuery'.
  func makeUpsertAuditQueryInterceptors() -> [ClientInterceptor<Teleport_Secreports_V1_UpsertAuditQueryRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getAuditQuery'.
  func makeGetAuditQueryInterceptors() -> [ClientInterceptor<Teleport_Secreports_V1_GetAuditQueryRequest, Teleport_Secreports_V1_AuditQuery>]

  /// - Returns: Interceptors to use when invoking 'listAuditQueries'.
  func makeListAuditQueriesInterceptors() -> [ClientInterceptor<Teleport_Secreports_V1_ListAuditQueriesRequest, Teleport_Secreports_V1_ListAuditQueriesResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteAuditQuery'.
  func makeDeleteAuditQueryInterceptors() -> [ClientInterceptor<Teleport_Secreports_V1_DeleteAuditQueryRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'upsertReport'.
  func makeUpsertReportInterceptors() -> [ClientInterceptor<Teleport_Secreports_V1_UpsertReportRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getReport'.
  func makeGetReportInterceptors() -> [ClientInterceptor<Teleport_Secreports_V1_GetReportRequest, Teleport_Secreports_V1_Report>]

  /// - Returns: Interceptors to use when invoking 'listReports'.
  func makeListReportsInterceptors() -> [ClientInterceptor<Teleport_Secreports_V1_ListReportsRequest, Teleport_Secreports_V1_ListReportsResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteReport'.
  func makeDeleteReportInterceptors() -> [ClientInterceptor<Teleport_Secreports_V1_DeleteReportRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'runAuditQuery'.
  func makeRunAuditQueryInterceptors() -> [ClientInterceptor<Teleport_Secreports_V1_RunAuditQueryRequest, Teleport_Secreports_V1_RunAuditQueryResponse>]

  /// - Returns: Interceptors to use when invoking 'getAuditQueryResult'.
  func makeGetAuditQueryResultInterceptors() -> [ClientInterceptor<Teleport_Secreports_V1_GetAuditQueryResultRequest, Teleport_Secreports_V1_GetAuditQueryResultResponse>]

  /// - Returns: Interceptors to use when invoking 'runReport'.
  func makeRunReportInterceptors() -> [ClientInterceptor<Teleport_Secreports_V1_RunReportRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getReportResult'.
  func makeGetReportResultInterceptors() -> [ClientInterceptor<Teleport_Secreports_V1_GetReportResultRequest, Teleport_Secreports_V1_GetReportResultResponse>]

  /// - Returns: Interceptors to use when invoking 'getReportState'.
  func makeGetReportStateInterceptors() -> [ClientInterceptor<Teleport_Secreports_V1_GetReportStateRequest, Teleport_Secreports_V1_ReportState>]

  /// - Returns: Interceptors to use when invoking 'getSchema'.
  func makeGetSchemaInterceptors() -> [ClientInterceptor<Teleport_Secreports_V1_GetSchemaRequest, Teleport_Secreports_V1_GetSchemaResponse>]
}

internal enum Teleport_Secreports_V1_SecReportsServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "SecReportsService",
    fullName: "teleport.secreports.v1.SecReportsService",
    methods: [
      Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.upsertAuditQuery,
      Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getAuditQuery,
      Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.listAuditQueries,
      Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.deleteAuditQuery,
      Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.upsertReport,
      Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getReport,
      Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.listReports,
      Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.deleteReport,
      Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.runAuditQuery,
      Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getAuditQueryResult,
      Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.runReport,
      Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getReportResult,
      Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getReportState,
      Teleport_Secreports_V1_SecReportsServiceClientMetadata.Methods.getSchema,
    ]
  )

  internal enum Methods {
    internal static let upsertAuditQuery = GRPCMethodDescriptor(
      name: "UpsertAuditQuery",
      path: "/teleport.secreports.v1.SecReportsService/UpsertAuditQuery",
      type: GRPCCallType.unary
    )

    internal static let getAuditQuery = GRPCMethodDescriptor(
      name: "GetAuditQuery",
      path: "/teleport.secreports.v1.SecReportsService/GetAuditQuery",
      type: GRPCCallType.unary
    )

    internal static let listAuditQueries = GRPCMethodDescriptor(
      name: "ListAuditQueries",
      path: "/teleport.secreports.v1.SecReportsService/ListAuditQueries",
      type: GRPCCallType.unary
    )

    internal static let deleteAuditQuery = GRPCMethodDescriptor(
      name: "DeleteAuditQuery",
      path: "/teleport.secreports.v1.SecReportsService/DeleteAuditQuery",
      type: GRPCCallType.unary
    )

    internal static let upsertReport = GRPCMethodDescriptor(
      name: "UpsertReport",
      path: "/teleport.secreports.v1.SecReportsService/UpsertReport",
      type: GRPCCallType.unary
    )

    internal static let getReport = GRPCMethodDescriptor(
      name: "GetReport",
      path: "/teleport.secreports.v1.SecReportsService/GetReport",
      type: GRPCCallType.unary
    )

    internal static let listReports = GRPCMethodDescriptor(
      name: "ListReports",
      path: "/teleport.secreports.v1.SecReportsService/ListReports",
      type: GRPCCallType.unary
    )

    internal static let deleteReport = GRPCMethodDescriptor(
      name: "DeleteReport",
      path: "/teleport.secreports.v1.SecReportsService/DeleteReport",
      type: GRPCCallType.unary
    )

    internal static let runAuditQuery = GRPCMethodDescriptor(
      name: "RunAuditQuery",
      path: "/teleport.secreports.v1.SecReportsService/RunAuditQuery",
      type: GRPCCallType.unary
    )

    internal static let getAuditQueryResult = GRPCMethodDescriptor(
      name: "GetAuditQueryResult",
      path: "/teleport.secreports.v1.SecReportsService/GetAuditQueryResult",
      type: GRPCCallType.unary
    )

    internal static let runReport = GRPCMethodDescriptor(
      name: "RunReport",
      path: "/teleport.secreports.v1.SecReportsService/RunReport",
      type: GRPCCallType.unary
    )

    internal static let getReportResult = GRPCMethodDescriptor(
      name: "GetReportResult",
      path: "/teleport.secreports.v1.SecReportsService/GetReportResult",
      type: GRPCCallType.unary
    )

    internal static let getReportState = GRPCMethodDescriptor(
      name: "GetReportState",
      path: "/teleport.secreports.v1.SecReportsService/GetReportState",
      type: GRPCCallType.unary
    )

    internal static let getSchema = GRPCMethodDescriptor(
      name: "GetSchema",
      path: "/teleport.secreports.v1.SecReportsService/GetSchema",
      type: GRPCCallType.unary
    )
  }
}

/// SecReportsService is a service that manages security reports.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Teleport_Secreports_V1_SecReportsServiceProvider: CallHandlerProvider {
  var interceptors: Teleport_Secreports_V1_SecReportsServiceServerInterceptorFactoryProtocol? { get }

  /// UpsertAuditQuery upsets an audit query.
  func upsertAuditQuery(request: Teleport_Secreports_V1_UpsertAuditQueryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// GetAuditQuery returns an audit query.
  func getAuditQuery(request: Teleport_Secreports_V1_GetAuditQueryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Teleport_Secreports_V1_AuditQuery>

  /// ListAuditQueries returns a paginated list of all Okta import rule resources.
  func listAuditQueries(request: Teleport_Secreports_V1_ListAuditQueriesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Teleport_Secreports_V1_ListAuditQueriesResponse>

  /// DeleteAuditQuery deletes an audit query.
  func deleteAuditQuery(request: Teleport_Secreports_V1_DeleteAuditQueryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// UpsertReport upsets a report.
  func upsertReport(request: Teleport_Secreports_V1_UpsertReportRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// GetReport returns a report.
  func getReport(request: Teleport_Secreports_V1_GetReportRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Teleport_Secreports_V1_Report>

  /// ListReports returns a paginated list of all Okta import rule resources.
  func listReports(request: Teleport_Secreports_V1_ListReportsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Teleport_Secreports_V1_ListReportsResponse>

  /// DeleteReport deletes a security report.
  func deleteReport(request: Teleport_Secreports_V1_DeleteReportRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// RunAuditQuery runs an audit query.
  func runAuditQuery(request: Teleport_Secreports_V1_RunAuditQueryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Teleport_Secreports_V1_RunAuditQueryResponse>

  /// GetAuditQueryResult returns an audit query result.
  func getAuditQueryResult(request: Teleport_Secreports_V1_GetAuditQueryResultRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Teleport_Secreports_V1_GetAuditQueryResultResponse>

  /// RunReport runs a security report.
  func runReport(request: Teleport_Secreports_V1_RunReportRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// GetReportResult returns a security report result.
  func getReportResult(request: Teleport_Secreports_V1_GetReportResultRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Teleport_Secreports_V1_GetReportResultResponse>

  /// GetReportState returns a security report state.
  func getReportState(request: Teleport_Secreports_V1_GetReportStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Teleport_Secreports_V1_ReportState>

  /// GetSchema returns a schema of audit query.
  func getSchema(request: Teleport_Secreports_V1_GetSchemaRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Teleport_Secreports_V1_GetSchemaResponse>
}

extension Teleport_Secreports_V1_SecReportsServiceProvider {
  internal var serviceName: Substring {
    return Teleport_Secreports_V1_SecReportsServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpsertAuditQuery":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_UpsertAuditQueryRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUpsertAuditQueryInterceptors() ?? [],
        userFunction: self.upsertAuditQuery(request:context:)
      )

    case "GetAuditQuery":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_GetAuditQueryRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_AuditQuery>(),
        interceptors: self.interceptors?.makeGetAuditQueryInterceptors() ?? [],
        userFunction: self.getAuditQuery(request:context:)
      )

    case "ListAuditQueries":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_ListAuditQueriesRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_ListAuditQueriesResponse>(),
        interceptors: self.interceptors?.makeListAuditQueriesInterceptors() ?? [],
        userFunction: self.listAuditQueries(request:context:)
      )

    case "DeleteAuditQuery":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_DeleteAuditQueryRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteAuditQueryInterceptors() ?? [],
        userFunction: self.deleteAuditQuery(request:context:)
      )

    case "UpsertReport":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_UpsertReportRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUpsertReportInterceptors() ?? [],
        userFunction: self.upsertReport(request:context:)
      )

    case "GetReport":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_GetReportRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_Report>(),
        interceptors: self.interceptors?.makeGetReportInterceptors() ?? [],
        userFunction: self.getReport(request:context:)
      )

    case "ListReports":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_ListReportsRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_ListReportsResponse>(),
        interceptors: self.interceptors?.makeListReportsInterceptors() ?? [],
        userFunction: self.listReports(request:context:)
      )

    case "DeleteReport":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_DeleteReportRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteReportInterceptors() ?? [],
        userFunction: self.deleteReport(request:context:)
      )

    case "RunAuditQuery":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_RunAuditQueryRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_RunAuditQueryResponse>(),
        interceptors: self.interceptors?.makeRunAuditQueryInterceptors() ?? [],
        userFunction: self.runAuditQuery(request:context:)
      )

    case "GetAuditQueryResult":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_GetAuditQueryResultRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_GetAuditQueryResultResponse>(),
        interceptors: self.interceptors?.makeGetAuditQueryResultInterceptors() ?? [],
        userFunction: self.getAuditQueryResult(request:context:)
      )

    case "RunReport":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_RunReportRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeRunReportInterceptors() ?? [],
        userFunction: self.runReport(request:context:)
      )

    case "GetReportResult":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_GetReportResultRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_GetReportResultResponse>(),
        interceptors: self.interceptors?.makeGetReportResultInterceptors() ?? [],
        userFunction: self.getReportResult(request:context:)
      )

    case "GetReportState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_GetReportStateRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_ReportState>(),
        interceptors: self.interceptors?.makeGetReportStateInterceptors() ?? [],
        userFunction: self.getReportState(request:context:)
      )

    case "GetSchema":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_GetSchemaRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_GetSchemaResponse>(),
        interceptors: self.interceptors?.makeGetSchemaInterceptors() ?? [],
        userFunction: self.getSchema(request:context:)
      )

    default:
      return nil
    }
  }
}

/// SecReportsService is a service that manages security reports.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Teleport_Secreports_V1_SecReportsServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Teleport_Secreports_V1_SecReportsServiceServerInterceptorFactoryProtocol? { get }

  /// UpsertAuditQuery upsets an audit query.
  func upsertAuditQuery(
    request: Teleport_Secreports_V1_UpsertAuditQueryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// GetAuditQuery returns an audit query.
  func getAuditQuery(
    request: Teleport_Secreports_V1_GetAuditQueryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Teleport_Secreports_V1_AuditQuery

  /// ListAuditQueries returns a paginated list of all Okta import rule resources.
  func listAuditQueries(
    request: Teleport_Secreports_V1_ListAuditQueriesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Teleport_Secreports_V1_ListAuditQueriesResponse

  /// DeleteAuditQuery deletes an audit query.
  func deleteAuditQuery(
    request: Teleport_Secreports_V1_DeleteAuditQueryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// UpsertReport upsets a report.
  func upsertReport(
    request: Teleport_Secreports_V1_UpsertReportRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// GetReport returns a report.
  func getReport(
    request: Teleport_Secreports_V1_GetReportRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Teleport_Secreports_V1_Report

  /// ListReports returns a paginated list of all Okta import rule resources.
  func listReports(
    request: Teleport_Secreports_V1_ListReportsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Teleport_Secreports_V1_ListReportsResponse

  /// DeleteReport deletes a security report.
  func deleteReport(
    request: Teleport_Secreports_V1_DeleteReportRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// RunAuditQuery runs an audit query.
  func runAuditQuery(
    request: Teleport_Secreports_V1_RunAuditQueryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Teleport_Secreports_V1_RunAuditQueryResponse

  /// GetAuditQueryResult returns an audit query result.
  func getAuditQueryResult(
    request: Teleport_Secreports_V1_GetAuditQueryResultRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Teleport_Secreports_V1_GetAuditQueryResultResponse

  /// RunReport runs a security report.
  func runReport(
    request: Teleport_Secreports_V1_RunReportRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// GetReportResult returns a security report result.
  func getReportResult(
    request: Teleport_Secreports_V1_GetReportResultRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Teleport_Secreports_V1_GetReportResultResponse

  /// GetReportState returns a security report state.
  func getReportState(
    request: Teleport_Secreports_V1_GetReportStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Teleport_Secreports_V1_ReportState

  /// GetSchema returns a schema of audit query.
  func getSchema(
    request: Teleport_Secreports_V1_GetSchemaRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Teleport_Secreports_V1_GetSchemaResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Teleport_Secreports_V1_SecReportsServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Teleport_Secreports_V1_SecReportsServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Teleport_Secreports_V1_SecReportsServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Teleport_Secreports_V1_SecReportsServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpsertAuditQuery":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_UpsertAuditQueryRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUpsertAuditQueryInterceptors() ?? [],
        wrapping: { try await self.upsertAuditQuery(request: $0, context: $1) }
      )

    case "GetAuditQuery":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_GetAuditQueryRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_AuditQuery>(),
        interceptors: self.interceptors?.makeGetAuditQueryInterceptors() ?? [],
        wrapping: { try await self.getAuditQuery(request: $0, context: $1) }
      )

    case "ListAuditQueries":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_ListAuditQueriesRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_ListAuditQueriesResponse>(),
        interceptors: self.interceptors?.makeListAuditQueriesInterceptors() ?? [],
        wrapping: { try await self.listAuditQueries(request: $0, context: $1) }
      )

    case "DeleteAuditQuery":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_DeleteAuditQueryRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteAuditQueryInterceptors() ?? [],
        wrapping: { try await self.deleteAuditQuery(request: $0, context: $1) }
      )

    case "UpsertReport":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_UpsertReportRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUpsertReportInterceptors() ?? [],
        wrapping: { try await self.upsertReport(request: $0, context: $1) }
      )

    case "GetReport":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_GetReportRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_Report>(),
        interceptors: self.interceptors?.makeGetReportInterceptors() ?? [],
        wrapping: { try await self.getReport(request: $0, context: $1) }
      )

    case "ListReports":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_ListReportsRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_ListReportsResponse>(),
        interceptors: self.interceptors?.makeListReportsInterceptors() ?? [],
        wrapping: { try await self.listReports(request: $0, context: $1) }
      )

    case "DeleteReport":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_DeleteReportRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteReportInterceptors() ?? [],
        wrapping: { try await self.deleteReport(request: $0, context: $1) }
      )

    case "RunAuditQuery":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_RunAuditQueryRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_RunAuditQueryResponse>(),
        interceptors: self.interceptors?.makeRunAuditQueryInterceptors() ?? [],
        wrapping: { try await self.runAuditQuery(request: $0, context: $1) }
      )

    case "GetAuditQueryResult":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_GetAuditQueryResultRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_GetAuditQueryResultResponse>(),
        interceptors: self.interceptors?.makeGetAuditQueryResultInterceptors() ?? [],
        wrapping: { try await self.getAuditQueryResult(request: $0, context: $1) }
      )

    case "RunReport":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_RunReportRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeRunReportInterceptors() ?? [],
        wrapping: { try await self.runReport(request: $0, context: $1) }
      )

    case "GetReportResult":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_GetReportResultRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_GetReportResultResponse>(),
        interceptors: self.interceptors?.makeGetReportResultInterceptors() ?? [],
        wrapping: { try await self.getReportResult(request: $0, context: $1) }
      )

    case "GetReportState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_GetReportStateRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_ReportState>(),
        interceptors: self.interceptors?.makeGetReportStateInterceptors() ?? [],
        wrapping: { try await self.getReportState(request: $0, context: $1) }
      )

    case "GetSchema":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Secreports_V1_GetSchemaRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Secreports_V1_GetSchemaResponse>(),
        interceptors: self.interceptors?.makeGetSchemaInterceptors() ?? [],
        wrapping: { try await self.getSchema(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Teleport_Secreports_V1_SecReportsServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'upsertAuditQuery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpsertAuditQueryInterceptors() -> [ServerInterceptor<Teleport_Secreports_V1_UpsertAuditQueryRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'getAuditQuery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAuditQueryInterceptors() -> [ServerInterceptor<Teleport_Secreports_V1_GetAuditQueryRequest, Teleport_Secreports_V1_AuditQuery>]

  /// - Returns: Interceptors to use when handling 'listAuditQueries'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListAuditQueriesInterceptors() -> [ServerInterceptor<Teleport_Secreports_V1_ListAuditQueriesRequest, Teleport_Secreports_V1_ListAuditQueriesResponse>]

  /// - Returns: Interceptors to use when handling 'deleteAuditQuery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteAuditQueryInterceptors() -> [ServerInterceptor<Teleport_Secreports_V1_DeleteAuditQueryRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'upsertReport'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpsertReportInterceptors() -> [ServerInterceptor<Teleport_Secreports_V1_UpsertReportRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'getReport'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetReportInterceptors() -> [ServerInterceptor<Teleport_Secreports_V1_GetReportRequest, Teleport_Secreports_V1_Report>]

  /// - Returns: Interceptors to use when handling 'listReports'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListReportsInterceptors() -> [ServerInterceptor<Teleport_Secreports_V1_ListReportsRequest, Teleport_Secreports_V1_ListReportsResponse>]

  /// - Returns: Interceptors to use when handling 'deleteReport'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteReportInterceptors() -> [ServerInterceptor<Teleport_Secreports_V1_DeleteReportRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'runAuditQuery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRunAuditQueryInterceptors() -> [ServerInterceptor<Teleport_Secreports_V1_RunAuditQueryRequest, Teleport_Secreports_V1_RunAuditQueryResponse>]

  /// - Returns: Interceptors to use when handling 'getAuditQueryResult'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAuditQueryResultInterceptors() -> [ServerInterceptor<Teleport_Secreports_V1_GetAuditQueryResultRequest, Teleport_Secreports_V1_GetAuditQueryResultResponse>]

  /// - Returns: Interceptors to use when handling 'runReport'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRunReportInterceptors() -> [ServerInterceptor<Teleport_Secreports_V1_RunReportRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'getReportResult'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetReportResultInterceptors() -> [ServerInterceptor<Teleport_Secreports_V1_GetReportResultRequest, Teleport_Secreports_V1_GetReportResultResponse>]

  /// - Returns: Interceptors to use when handling 'getReportState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetReportStateInterceptors() -> [ServerInterceptor<Teleport_Secreports_V1_GetReportStateRequest, Teleport_Secreports_V1_ReportState>]

  /// - Returns: Interceptors to use when handling 'getSchema'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSchemaInterceptors() -> [ServerInterceptor<Teleport_Secreports_V1_GetSchemaRequest, Teleport_Secreports_V1_GetSchemaResponse>]
}

internal enum Teleport_Secreports_V1_SecReportsServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "SecReportsService",
    fullName: "teleport.secreports.v1.SecReportsService",
    methods: [
      Teleport_Secreports_V1_SecReportsServiceServerMetadata.Methods.upsertAuditQuery,
      Teleport_Secreports_V1_SecReportsServiceServerMetadata.Methods.getAuditQuery,
      Teleport_Secreports_V1_SecReportsServiceServerMetadata.Methods.listAuditQueries,
      Teleport_Secreports_V1_SecReportsServiceServerMetadata.Methods.deleteAuditQuery,
      Teleport_Secreports_V1_SecReportsServiceServerMetadata.Methods.upsertReport,
      Teleport_Secreports_V1_SecReportsServiceServerMetadata.Methods.getReport,
      Teleport_Secreports_V1_SecReportsServiceServerMetadata.Methods.listReports,
      Teleport_Secreports_V1_SecReportsServiceServerMetadata.Methods.deleteReport,
      Teleport_Secreports_V1_SecReportsServiceServerMetadata.Methods.runAuditQuery,
      Teleport_Secreports_V1_SecReportsServiceServerMetadata.Methods.getAuditQueryResult,
      Teleport_Secreports_V1_SecReportsServiceServerMetadata.Methods.runReport,
      Teleport_Secreports_V1_SecReportsServiceServerMetadata.Methods.getReportResult,
      Teleport_Secreports_V1_SecReportsServiceServerMetadata.Methods.getReportState,
      Teleport_Secreports_V1_SecReportsServiceServerMetadata.Methods.getSchema,
    ]
  )

  internal enum Methods {
    internal static let upsertAuditQuery = GRPCMethodDescriptor(
      name: "UpsertAuditQuery",
      path: "/teleport.secreports.v1.SecReportsService/UpsertAuditQuery",
      type: GRPCCallType.unary
    )

    internal static let getAuditQuery = GRPCMethodDescriptor(
      name: "GetAuditQuery",
      path: "/teleport.secreports.v1.SecReportsService/GetAuditQuery",
      type: GRPCCallType.unary
    )

    internal static let listAuditQueries = GRPCMethodDescriptor(
      name: "ListAuditQueries",
      path: "/teleport.secreports.v1.SecReportsService/ListAuditQueries",
      type: GRPCCallType.unary
    )

    internal static let deleteAuditQuery = GRPCMethodDescriptor(
      name: "DeleteAuditQuery",
      path: "/teleport.secreports.v1.SecReportsService/DeleteAuditQuery",
      type: GRPCCallType.unary
    )

    internal static let upsertReport = GRPCMethodDescriptor(
      name: "UpsertReport",
      path: "/teleport.secreports.v1.SecReportsService/UpsertReport",
      type: GRPCCallType.unary
    )

    internal static let getReport = GRPCMethodDescriptor(
      name: "GetReport",
      path: "/teleport.secreports.v1.SecReportsService/GetReport",
      type: GRPCCallType.unary
    )

    internal static let listReports = GRPCMethodDescriptor(
      name: "ListReports",
      path: "/teleport.secreports.v1.SecReportsService/ListReports",
      type: GRPCCallType.unary
    )

    internal static let deleteReport = GRPCMethodDescriptor(
      name: "DeleteReport",
      path: "/teleport.secreports.v1.SecReportsService/DeleteReport",
      type: GRPCCallType.unary
    )

    internal static let runAuditQuery = GRPCMethodDescriptor(
      name: "RunAuditQuery",
      path: "/teleport.secreports.v1.SecReportsService/RunAuditQuery",
      type: GRPCCallType.unary
    )

    internal static let getAuditQueryResult = GRPCMethodDescriptor(
      name: "GetAuditQueryResult",
      path: "/teleport.secreports.v1.SecReportsService/GetAuditQueryResult",
      type: GRPCCallType.unary
    )

    internal static let runReport = GRPCMethodDescriptor(
      name: "RunReport",
      path: "/teleport.secreports.v1.SecReportsService/RunReport",
      type: GRPCCallType.unary
    )

    internal static let getReportResult = GRPCMethodDescriptor(
      name: "GetReportResult",
      path: "/teleport.secreports.v1.SecReportsService/GetReportResult",
      type: GRPCCallType.unary
    )

    internal static let getReportState = GRPCMethodDescriptor(
      name: "GetReportState",
      path: "/teleport.secreports.v1.SecReportsService/GetReportState",
      type: GRPCCallType.unary
    )

    internal static let getSchema = GRPCMethodDescriptor(
      name: "GetSchema",
      path: "/teleport.secreports.v1.SecReportsService/GetSchema",
      type: GRPCCallType.unary
    )
  }
}
