// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: teleport/discoveryconfig/v1/discoveryconfig_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ListDiscoveryConfigsRequest is a request for a paginated list of DiscoveryConfigs.
struct Teleport_Discoveryconfig_V1_ListDiscoveryConfigsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// page_size is the size of the page to request.
  var pageSize: Int32 = 0

  /// next_token is the page token.
  var nextToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ListDiscoveryConfigsResponse is the response for ListDiscoveryConfigsRequest.
struct Teleport_Discoveryconfig_V1_ListDiscoveryConfigsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// DiscoveryConfigs is a list of DiscoveryConfigs.
  var discoveryConfigs: [Teleport_Discoveryconfig_V1_DiscoveryConfig] = []

  /// NextKey is the key for the next page of DiscoveryConfigs.
  var nextKey: String = String()

  /// TotalCount is the total number of discovery_config in all pages.
  var totalCount: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// GetDiscoveryConfigRequest is a request for a specific DiscoveryConfig resource.
struct Teleport_Discoveryconfig_V1_GetDiscoveryConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name is the name of the DiscoveryConfig to be requested.
  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// CreateDiscoveryConfigRequest is the request to create the provided DiscoveryConfig.
struct Teleport_Discoveryconfig_V1_CreateDiscoveryConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// DiscoveryConfig is the DiscoveryConfig to be created.
  var discoveryConfig: Teleport_Discoveryconfig_V1_DiscoveryConfig {
    get {return _discoveryConfig ?? Teleport_Discoveryconfig_V1_DiscoveryConfig()}
    set {_discoveryConfig = newValue}
  }
  /// Returns true if `discoveryConfig` has been explicitly set.
  var hasDiscoveryConfig: Bool {return self._discoveryConfig != nil}
  /// Clears the value of `discoveryConfig`. Subsequent reads from it will return its default value.
  mutating func clearDiscoveryConfig() {self._discoveryConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _discoveryConfig: Teleport_Discoveryconfig_V1_DiscoveryConfig? = nil
}

/// UpdateDiscoveryConfigRequest is the request to update the provided DiscoveryConfig.
struct Teleport_Discoveryconfig_V1_UpdateDiscoveryConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// DiscoveryConfig is the DiscoveryConfig to be updated.
  var discoveryConfig: Teleport_Discoveryconfig_V1_DiscoveryConfig {
    get {return _discoveryConfig ?? Teleport_Discoveryconfig_V1_DiscoveryConfig()}
    set {_discoveryConfig = newValue}
  }
  /// Returns true if `discoveryConfig` has been explicitly set.
  var hasDiscoveryConfig: Bool {return self._discoveryConfig != nil}
  /// Clears the value of `discoveryConfig`. Subsequent reads from it will return its default value.
  mutating func clearDiscoveryConfig() {self._discoveryConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _discoveryConfig: Teleport_Discoveryconfig_V1_DiscoveryConfig? = nil
}

/// UpsertDiscoveryConfigRequest is the request to upsert the provided DiscoveryConfig.
struct Teleport_Discoveryconfig_V1_UpsertDiscoveryConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// DiscoveryConfig is the DiscoveryConfig to be upserted.
  var discoveryConfig: Teleport_Discoveryconfig_V1_DiscoveryConfig {
    get {return _discoveryConfig ?? Teleport_Discoveryconfig_V1_DiscoveryConfig()}
    set {_discoveryConfig = newValue}
  }
  /// Returns true if `discoveryConfig` has been explicitly set.
  var hasDiscoveryConfig: Bool {return self._discoveryConfig != nil}
  /// Clears the value of `discoveryConfig`. Subsequent reads from it will return its default value.
  mutating func clearDiscoveryConfig() {self._discoveryConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _discoveryConfig: Teleport_Discoveryconfig_V1_DiscoveryConfig? = nil
}

/// DeleteDiscoveryConfigRequest is a request for deleting a specific DiscoveryConfig resource.
struct Teleport_Discoveryconfig_V1_DeleteDiscoveryConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name is the name of the DiscoveryConfig to be deleted.
  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DeleteAllDiscoveryConfigsRequest is the request for deleting all DiscoveryConfigs.
struct Teleport_Discoveryconfig_V1_DeleteAllDiscoveryConfigsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Teleport_Discoveryconfig_V1_ListDiscoveryConfigsRequest: @unchecked Sendable {}
extension Teleport_Discoveryconfig_V1_ListDiscoveryConfigsResponse: @unchecked Sendable {}
extension Teleport_Discoveryconfig_V1_GetDiscoveryConfigRequest: @unchecked Sendable {}
extension Teleport_Discoveryconfig_V1_CreateDiscoveryConfigRequest: @unchecked Sendable {}
extension Teleport_Discoveryconfig_V1_UpdateDiscoveryConfigRequest: @unchecked Sendable {}
extension Teleport_Discoveryconfig_V1_UpsertDiscoveryConfigRequest: @unchecked Sendable {}
extension Teleport_Discoveryconfig_V1_DeleteDiscoveryConfigRequest: @unchecked Sendable {}
extension Teleport_Discoveryconfig_V1_DeleteAllDiscoveryConfigsRequest: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "teleport.discoveryconfig.v1"

extension Teleport_Discoveryconfig_V1_ListDiscoveryConfigsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListDiscoveryConfigsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "page_size"),
    2: .standard(proto: "next_token"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextToken) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 1)
    }
    if !self.nextToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Discoveryconfig_V1_ListDiscoveryConfigsRequest, rhs: Teleport_Discoveryconfig_V1_ListDiscoveryConfigsRequest) -> Bool {
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.nextToken != rhs.nextToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Discoveryconfig_V1_ListDiscoveryConfigsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListDiscoveryConfigsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "discovery_configs"),
    2: .standard(proto: "next_key"),
    3: .standard(proto: "total_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.discoveryConfigs) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextKey) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.totalCount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.discoveryConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.discoveryConfigs, fieldNumber: 1)
    }
    if !self.nextKey.isEmpty {
      try visitor.visitSingularStringField(value: self.nextKey, fieldNumber: 2)
    }
    if self.totalCount != 0 {
      try visitor.visitSingularInt32Field(value: self.totalCount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Discoveryconfig_V1_ListDiscoveryConfigsResponse, rhs: Teleport_Discoveryconfig_V1_ListDiscoveryConfigsResponse) -> Bool {
    if lhs.discoveryConfigs != rhs.discoveryConfigs {return false}
    if lhs.nextKey != rhs.nextKey {return false}
    if lhs.totalCount != rhs.totalCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Discoveryconfig_V1_GetDiscoveryConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetDiscoveryConfigRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Discoveryconfig_V1_GetDiscoveryConfigRequest, rhs: Teleport_Discoveryconfig_V1_GetDiscoveryConfigRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Discoveryconfig_V1_CreateDiscoveryConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateDiscoveryConfigRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "discovery_config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._discoveryConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._discoveryConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Discoveryconfig_V1_CreateDiscoveryConfigRequest, rhs: Teleport_Discoveryconfig_V1_CreateDiscoveryConfigRequest) -> Bool {
    if lhs._discoveryConfig != rhs._discoveryConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Discoveryconfig_V1_UpdateDiscoveryConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateDiscoveryConfigRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "discovery_config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._discoveryConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._discoveryConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Discoveryconfig_V1_UpdateDiscoveryConfigRequest, rhs: Teleport_Discoveryconfig_V1_UpdateDiscoveryConfigRequest) -> Bool {
    if lhs._discoveryConfig != rhs._discoveryConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Discoveryconfig_V1_UpsertDiscoveryConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpsertDiscoveryConfigRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "discovery_config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._discoveryConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._discoveryConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Discoveryconfig_V1_UpsertDiscoveryConfigRequest, rhs: Teleport_Discoveryconfig_V1_UpsertDiscoveryConfigRequest) -> Bool {
    if lhs._discoveryConfig != rhs._discoveryConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Discoveryconfig_V1_DeleteDiscoveryConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteDiscoveryConfigRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Discoveryconfig_V1_DeleteDiscoveryConfigRequest, rhs: Teleport_Discoveryconfig_V1_DeleteDiscoveryConfigRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Discoveryconfig_V1_DeleteAllDiscoveryConfigsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteAllDiscoveryConfigsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Discoveryconfig_V1_DeleteAllDiscoveryConfigsRequest, rhs: Teleport_Discoveryconfig_V1_DeleteAllDiscoveryConfigsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
