// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: teleport/attestation/v1/attestation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// AttestationStatement is an attestation statement for a hardware private key.
struct Teleport_Attestation_V1_AttestationStatement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var attestationStatement: Teleport_Attestation_V1_AttestationStatement.OneOf_AttestationStatement? = nil

  /// yubikey_attestation_statement is an attestation statement for a specific YubiKey PIV slot.
  var yubikeyAttestationStatement: Teleport_Attestation_V1_YubiKeyAttestationStatement {
    get {
      if case .yubikeyAttestationStatement(let v)? = attestationStatement {return v}
      return Teleport_Attestation_V1_YubiKeyAttestationStatement()
    }
    set {attestationStatement = .yubikeyAttestationStatement(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_AttestationStatement: Equatable {
    /// yubikey_attestation_statement is an attestation statement for a specific YubiKey PIV slot.
    case yubikeyAttestationStatement(Teleport_Attestation_V1_YubiKeyAttestationStatement)

  #if !swift(>=4.1)
    static func ==(lhs: Teleport_Attestation_V1_AttestationStatement.OneOf_AttestationStatement, rhs: Teleport_Attestation_V1_AttestationStatement.OneOf_AttestationStatement) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.yubikeyAttestationStatement, .yubikeyAttestationStatement): return {
        guard case .yubikeyAttestationStatement(let l) = lhs, case .yubikeyAttestationStatement(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  init() {}
}

/// YubiKeyAttestationStatement is an attestation statement for a specific YubiKey PIV slot.
struct Teleport_Attestation_V1_YubiKeyAttestationStatement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// slot_cert is an attestation certificate generated from a YubiKey PIV
  /// slot's public key and signed by the YubiKey's attestation certificate.
  var slotCert: Data = Data()

  /// attestation_cert is the YubiKey's unique attestation certificate, signed by a Yubico CA.
  var attestationCert: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Teleport_Attestation_V1_AttestationStatement: @unchecked Sendable {}
extension Teleport_Attestation_V1_AttestationStatement.OneOf_AttestationStatement: @unchecked Sendable {}
extension Teleport_Attestation_V1_YubiKeyAttestationStatement: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "teleport.attestation.v1"

extension Teleport_Attestation_V1_AttestationStatement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AttestationStatement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "yubikey_attestation_statement"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Teleport_Attestation_V1_YubiKeyAttestationStatement?
        var hadOneofValue = false
        if let current = self.attestationStatement {
          hadOneofValue = true
          if case .yubikeyAttestationStatement(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.attestationStatement = .yubikeyAttestationStatement(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .yubikeyAttestationStatement(let v)? = self.attestationStatement {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Attestation_V1_AttestationStatement, rhs: Teleport_Attestation_V1_AttestationStatement) -> Bool {
    if lhs.attestationStatement != rhs.attestationStatement {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Attestation_V1_YubiKeyAttestationStatement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".YubiKeyAttestationStatement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "slot_cert"),
    2: .standard(proto: "attestation_cert"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.slotCert) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.attestationCert) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.slotCert.isEmpty {
      try visitor.visitSingularBytesField(value: self.slotCert, fieldNumber: 1)
    }
    if !self.attestationCert.isEmpty {
      try visitor.visitSingularBytesField(value: self.attestationCert, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Attestation_V1_YubiKeyAttestationStatement, rhs: Teleport_Attestation_V1_YubiKeyAttestationStatement) -> Bool {
    if lhs.slotCert != rhs.slotCert {return false}
    if lhs.attestationCert != rhs.attestationCert {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
