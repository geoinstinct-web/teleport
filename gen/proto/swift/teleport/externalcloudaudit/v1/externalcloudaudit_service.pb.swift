// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: teleport/externalcloudaudit/v1/externalcloudaudit_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GetDraftExternalCloudAuditRequest is a request to get the draft external
/// cloud audit configuration.
struct Teleport_Externalcloudaudit_V1_GetDraftExternalCloudAuditRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// GetDraftExternalCloudAuditResponse is a response to getting the draft
/// external cloud audit configuration.
struct Teleport_Externalcloudaudit_V1_GetDraftExternalCloudAuditResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ExternalCloudAudit is the current draft ExternalCloudAudit.
  var externalCloudAudit: Teleport_Externalcloudaudit_V1_ExternalCloudAudit {
    get {return _externalCloudAudit ?? Teleport_Externalcloudaudit_V1_ExternalCloudAudit()}
    set {_externalCloudAudit = newValue}
  }
  /// Returns true if `externalCloudAudit` has been explicitly set.
  var hasExternalCloudAudit: Bool {return self._externalCloudAudit != nil}
  /// Clears the value of `externalCloudAudit`. Subsequent reads from it will return its default value.
  mutating func clearExternalCloudAudit() {self._externalCloudAudit = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _externalCloudAudit: Teleport_Externalcloudaudit_V1_ExternalCloudAudit? = nil
}

/// UpsertDraftExternalCloudAuditRequest is a request to upsert the provided
/// draft external cloud audit configuration.
struct Teleport_Externalcloudaudit_V1_UpsertDraftExternalCloudAuditRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ExternalCloudAudit is the ExternalCloudAudit to be upserted.
  var externalCloudAudit: Teleport_Externalcloudaudit_V1_ExternalCloudAudit {
    get {return _externalCloudAudit ?? Teleport_Externalcloudaudit_V1_ExternalCloudAudit()}
    set {_externalCloudAudit = newValue}
  }
  /// Returns true if `externalCloudAudit` has been explicitly set.
  var hasExternalCloudAudit: Bool {return self._externalCloudAudit != nil}
  /// Clears the value of `externalCloudAudit`. Subsequent reads from it will return its default value.
  mutating func clearExternalCloudAudit() {self._externalCloudAudit = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _externalCloudAudit: Teleport_Externalcloudaudit_V1_ExternalCloudAudit? = nil
}

/// UpsertDraftExternalCloudAuditResponse is a response to upserting the draft
/// external cloud audit configuration.
struct Teleport_Externalcloudaudit_V1_UpsertDraftExternalCloudAuditResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ExternalCloudAudit is the ExternalCloudAudit that was upserted.
  var externalCloudAudit: Teleport_Externalcloudaudit_V1_ExternalCloudAudit {
    get {return _externalCloudAudit ?? Teleport_Externalcloudaudit_V1_ExternalCloudAudit()}
    set {_externalCloudAudit = newValue}
  }
  /// Returns true if `externalCloudAudit` has been explicitly set.
  var hasExternalCloudAudit: Bool {return self._externalCloudAudit != nil}
  /// Clears the value of `externalCloudAudit`. Subsequent reads from it will return its default value.
  mutating func clearExternalCloudAudit() {self._externalCloudAudit = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _externalCloudAudit: Teleport_Externalcloudaudit_V1_ExternalCloudAudit? = nil
}

/// DeleteDraftExternalCloudAuditRequest is a request to delete a draft external
/// cloud audit configuration.
struct Teleport_Externalcloudaudit_V1_DeleteDraftExternalCloudAuditRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PromoteToClusterExternalCloudAuditRequest is a request to promote the current
/// draft to cluster external cloud audit.
struct Teleport_Externalcloudaudit_V1_PromoteToClusterExternalCloudAuditRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PromoteToClusterExternalCloudAuditResponse is a response of promote the
/// current draft to cluster external cloud audit.
struct Teleport_Externalcloudaudit_V1_PromoteToClusterExternalCloudAuditResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ClusterExternalCloudAudit is the ExternalCloudAudit will be used in cluster.
  var clusterExternalCloudAudit: Teleport_Externalcloudaudit_V1_ExternalCloudAudit {
    get {return _clusterExternalCloudAudit ?? Teleport_Externalcloudaudit_V1_ExternalCloudAudit()}
    set {_clusterExternalCloudAudit = newValue}
  }
  /// Returns true if `clusterExternalCloudAudit` has been explicitly set.
  var hasClusterExternalCloudAudit: Bool {return self._clusterExternalCloudAudit != nil}
  /// Clears the value of `clusterExternalCloudAudit`. Subsequent reads from it will return its default value.
  mutating func clearClusterExternalCloudAudit() {self._clusterExternalCloudAudit = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _clusterExternalCloudAudit: Teleport_Externalcloudaudit_V1_ExternalCloudAudit? = nil
}

/// GetClusterExternalCloudAuditRequest is a request to get an cluster external
/// cloud audit configuration.
struct Teleport_Externalcloudaudit_V1_GetClusterExternalCloudAuditRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// GetClusterExternalCloudAuditResponse is a response of getting an cluster
/// external cloud audit configuration.
struct Teleport_Externalcloudaudit_V1_GetClusterExternalCloudAuditResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ClusterExternalCloudAudit contains name of external cloud audit.
  var clusterExternalCloudAudit: Teleport_Externalcloudaudit_V1_ExternalCloudAudit {
    get {return _clusterExternalCloudAudit ?? Teleport_Externalcloudaudit_V1_ExternalCloudAudit()}
    set {_clusterExternalCloudAudit = newValue}
  }
  /// Returns true if `clusterExternalCloudAudit` has been explicitly set.
  var hasClusterExternalCloudAudit: Bool {return self._clusterExternalCloudAudit != nil}
  /// Clears the value of `clusterExternalCloudAudit`. Subsequent reads from it will return its default value.
  mutating func clearClusterExternalCloudAudit() {self._clusterExternalCloudAudit = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _clusterExternalCloudAudit: Teleport_Externalcloudaudit_V1_ExternalCloudAudit? = nil
}

/// DisableClusterExternalCloudAuditRequest is a request for disabling cluster
/// external cloud audit.
struct Teleport_Externalcloudaudit_V1_DisableClusterExternalCloudAuditRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// GenerateDraftExternalCloudAuditRequest is a request for
/// GenerateDraftExternalCloudAudit.
struct Teleport_Externalcloudaudit_V1_GenerateDraftExternalCloudAuditRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// IntegrationName is name of existing AWS OIDC integration used to get AWS
  /// credentials.
  var integrationName: String = String()

  /// Region is the AWS region where infrastructure is hosted.
  var region: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// GenerateDraftExternalCloudAuditResponse is a response for
/// GenerateDraftExternalCloudAudit.
struct Teleport_Externalcloudaudit_V1_GenerateDraftExternalCloudAuditResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ExternalCloudAudit is the generated ExternalCloudAudit that has been set as
  /// the current draft.
  var externalCloudAudit: Teleport_Externalcloudaudit_V1_ExternalCloudAudit {
    get {return _externalCloudAudit ?? Teleport_Externalcloudaudit_V1_ExternalCloudAudit()}
    set {_externalCloudAudit = newValue}
  }
  /// Returns true if `externalCloudAudit` has been explicitly set.
  var hasExternalCloudAudit: Bool {return self._externalCloudAudit != nil}
  /// Clears the value of `externalCloudAudit`. Subsequent reads from it will return its default value.
  mutating func clearExternalCloudAudit() {self._externalCloudAudit = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _externalCloudAudit: Teleport_Externalcloudaudit_V1_ExternalCloudAudit? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Teleport_Externalcloudaudit_V1_GetDraftExternalCloudAuditRequest: @unchecked Sendable {}
extension Teleport_Externalcloudaudit_V1_GetDraftExternalCloudAuditResponse: @unchecked Sendable {}
extension Teleport_Externalcloudaudit_V1_UpsertDraftExternalCloudAuditRequest: @unchecked Sendable {}
extension Teleport_Externalcloudaudit_V1_UpsertDraftExternalCloudAuditResponse: @unchecked Sendable {}
extension Teleport_Externalcloudaudit_V1_DeleteDraftExternalCloudAuditRequest: @unchecked Sendable {}
extension Teleport_Externalcloudaudit_V1_PromoteToClusterExternalCloudAuditRequest: @unchecked Sendable {}
extension Teleport_Externalcloudaudit_V1_PromoteToClusterExternalCloudAuditResponse: @unchecked Sendable {}
extension Teleport_Externalcloudaudit_V1_GetClusterExternalCloudAuditRequest: @unchecked Sendable {}
extension Teleport_Externalcloudaudit_V1_GetClusterExternalCloudAuditResponse: @unchecked Sendable {}
extension Teleport_Externalcloudaudit_V1_DisableClusterExternalCloudAuditRequest: @unchecked Sendable {}
extension Teleport_Externalcloudaudit_V1_GenerateDraftExternalCloudAuditRequest: @unchecked Sendable {}
extension Teleport_Externalcloudaudit_V1_GenerateDraftExternalCloudAuditResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "teleport.externalcloudaudit.v1"

extension Teleport_Externalcloudaudit_V1_GetDraftExternalCloudAuditRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetDraftExternalCloudAuditRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Externalcloudaudit_V1_GetDraftExternalCloudAuditRequest, rhs: Teleport_Externalcloudaudit_V1_GetDraftExternalCloudAuditRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Externalcloudaudit_V1_GetDraftExternalCloudAuditResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetDraftExternalCloudAuditResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "external_cloud_audit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._externalCloudAudit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._externalCloudAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Externalcloudaudit_V1_GetDraftExternalCloudAuditResponse, rhs: Teleport_Externalcloudaudit_V1_GetDraftExternalCloudAuditResponse) -> Bool {
    if lhs._externalCloudAudit != rhs._externalCloudAudit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Externalcloudaudit_V1_UpsertDraftExternalCloudAuditRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpsertDraftExternalCloudAuditRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "external_cloud_audit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._externalCloudAudit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._externalCloudAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Externalcloudaudit_V1_UpsertDraftExternalCloudAuditRequest, rhs: Teleport_Externalcloudaudit_V1_UpsertDraftExternalCloudAuditRequest) -> Bool {
    if lhs._externalCloudAudit != rhs._externalCloudAudit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Externalcloudaudit_V1_UpsertDraftExternalCloudAuditResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpsertDraftExternalCloudAuditResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "external_cloud_audit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._externalCloudAudit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._externalCloudAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Externalcloudaudit_V1_UpsertDraftExternalCloudAuditResponse, rhs: Teleport_Externalcloudaudit_V1_UpsertDraftExternalCloudAuditResponse) -> Bool {
    if lhs._externalCloudAudit != rhs._externalCloudAudit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Externalcloudaudit_V1_DeleteDraftExternalCloudAuditRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteDraftExternalCloudAuditRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Externalcloudaudit_V1_DeleteDraftExternalCloudAuditRequest, rhs: Teleport_Externalcloudaudit_V1_DeleteDraftExternalCloudAuditRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Externalcloudaudit_V1_PromoteToClusterExternalCloudAuditRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PromoteToClusterExternalCloudAuditRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Externalcloudaudit_V1_PromoteToClusterExternalCloudAuditRequest, rhs: Teleport_Externalcloudaudit_V1_PromoteToClusterExternalCloudAuditRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Externalcloudaudit_V1_PromoteToClusterExternalCloudAuditResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PromoteToClusterExternalCloudAuditResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cluster_external_cloud_audit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._clusterExternalCloudAudit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._clusterExternalCloudAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Externalcloudaudit_V1_PromoteToClusterExternalCloudAuditResponse, rhs: Teleport_Externalcloudaudit_V1_PromoteToClusterExternalCloudAuditResponse) -> Bool {
    if lhs._clusterExternalCloudAudit != rhs._clusterExternalCloudAudit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Externalcloudaudit_V1_GetClusterExternalCloudAuditRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetClusterExternalCloudAuditRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Externalcloudaudit_V1_GetClusterExternalCloudAuditRequest, rhs: Teleport_Externalcloudaudit_V1_GetClusterExternalCloudAuditRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Externalcloudaudit_V1_GetClusterExternalCloudAuditResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetClusterExternalCloudAuditResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cluster_external_cloud_audit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._clusterExternalCloudAudit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._clusterExternalCloudAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Externalcloudaudit_V1_GetClusterExternalCloudAuditResponse, rhs: Teleport_Externalcloudaudit_V1_GetClusterExternalCloudAuditResponse) -> Bool {
    if lhs._clusterExternalCloudAudit != rhs._clusterExternalCloudAudit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Externalcloudaudit_V1_DisableClusterExternalCloudAuditRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DisableClusterExternalCloudAuditRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Externalcloudaudit_V1_DisableClusterExternalCloudAuditRequest, rhs: Teleport_Externalcloudaudit_V1_DisableClusterExternalCloudAuditRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Externalcloudaudit_V1_GenerateDraftExternalCloudAuditRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenerateDraftExternalCloudAuditRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "integration_name"),
    2: .same(proto: "region"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.integrationName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.region) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.integrationName.isEmpty {
      try visitor.visitSingularStringField(value: self.integrationName, fieldNumber: 1)
    }
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Externalcloudaudit_V1_GenerateDraftExternalCloudAuditRequest, rhs: Teleport_Externalcloudaudit_V1_GenerateDraftExternalCloudAuditRequest) -> Bool {
    if lhs.integrationName != rhs.integrationName {return false}
    if lhs.region != rhs.region {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Externalcloudaudit_V1_GenerateDraftExternalCloudAuditResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenerateDraftExternalCloudAuditResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "external_cloud_audit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._externalCloudAudit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._externalCloudAudit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Externalcloudaudit_V1_GenerateDraftExternalCloudAuditResponse, rhs: Teleport_Externalcloudaudit_V1_GenerateDraftExternalCloudAuditResponse) -> Bool {
    if lhs._externalCloudAudit != rhs._externalCloudAudit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
