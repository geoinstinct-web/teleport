// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: teleport/externalcloudaudit/v1/externalcloudaudit.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ExternalCloudAudit contains external cloud audit configuration.
/// It's used only in Teleport Cloud with feature called "bring your own bucket".
/// It contains configuration that allows store audit events and session
/// recordings on customer infra instead of Teleport Cloud.
struct Teleport_Externalcloudaudit_V1_ExternalCloudAudit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Header is the header for the resource.
  var header: Teleport_Header_V1_ResourceHeader {
    get {return _storage._header ?? Teleport_Header_V1_ResourceHeader()}
    set {_uniqueStorage()._header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return _storage._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {_uniqueStorage()._header = nil}

  /// Spec is the specification for the external cloud audit.
  var spec: Teleport_Externalcloudaudit_V1_ExternalCloudAuditSpec {
    get {return _storage._spec ?? Teleport_Externalcloudaudit_V1_ExternalCloudAuditSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  mutating func clearSpec() {_uniqueStorage()._spec = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// ExternalCloudAuditConfigSpec is the specification of external cloud audit.
struct Teleport_Externalcloudaudit_V1_ExternalCloudAuditSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// IntegrationName is name of existing AWS OIDC intagration used to
  /// generate AWS credentials.
  var integrationName: String = String()

  /// SessionsRecordingsURI is s3 path used to store sessions recordings.
  var sessionsRecordingsUri: String = String()

  /// AthenaWorkgroup is workgroup used by Athena audit logs during queries.
  var athenaWorkgroup: String = String()

  /// GlueDatabase is database used by Athena audit logs during queries.
  var glueDatabase: String = String()

  /// GlueTable is table used by Athena audit logs during queries.
  var glueTable: String = String()

  /// AuditEventsLongTermURI is s3 path used to store batched parquet files with
  /// audit events, partitioned by event date.
  var auditEventsLongTermUri: String = String()

  /// AthenaResultsURI is s3 path used to store temporary results generated by
  /// Athena engine.
  var athenaResultsUri: String = String()

  /// PolicyName is the name of the IAM policy attached to the OIDC integration
  /// role.
  var policyName: String = String()

  /// Region is the AWS region where the infrastructure is hosted.
  var region: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Teleport_Externalcloudaudit_V1_ExternalCloudAudit: @unchecked Sendable {}
extension Teleport_Externalcloudaudit_V1_ExternalCloudAuditSpec: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "teleport.externalcloudaudit.v1"

extension Teleport_Externalcloudaudit_V1_ExternalCloudAudit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExternalCloudAudit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "spec"),
  ]

  fileprivate class _StorageClass {
    var _header: Teleport_Header_V1_ResourceHeader? = nil
    var _spec: Teleport_Externalcloudaudit_V1_ExternalCloudAuditSpec? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _header = source._header
      _spec = source._spec
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._header) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._spec) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._header {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Externalcloudaudit_V1_ExternalCloudAudit, rhs: Teleport_Externalcloudaudit_V1_ExternalCloudAudit) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._header != rhs_storage._header {return false}
        if _storage._spec != rhs_storage._spec {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Externalcloudaudit_V1_ExternalCloudAuditSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExternalCloudAuditSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "integration_name"),
    2: .standard(proto: "sessions_recordings_uri"),
    3: .standard(proto: "athena_workgroup"),
    4: .standard(proto: "glue_database"),
    5: .standard(proto: "glue_table"),
    6: .standard(proto: "audit_events_long_term_uri"),
    7: .standard(proto: "athena_results_uri"),
    8: .standard(proto: "policy_name"),
    9: .same(proto: "region"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.integrationName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sessionsRecordingsUri) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.athenaWorkgroup) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.glueDatabase) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.glueTable) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.auditEventsLongTermUri) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.athenaResultsUri) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.policyName) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.region) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.integrationName.isEmpty {
      try visitor.visitSingularStringField(value: self.integrationName, fieldNumber: 1)
    }
    if !self.sessionsRecordingsUri.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionsRecordingsUri, fieldNumber: 2)
    }
    if !self.athenaWorkgroup.isEmpty {
      try visitor.visitSingularStringField(value: self.athenaWorkgroup, fieldNumber: 3)
    }
    if !self.glueDatabase.isEmpty {
      try visitor.visitSingularStringField(value: self.glueDatabase, fieldNumber: 4)
    }
    if !self.glueTable.isEmpty {
      try visitor.visitSingularStringField(value: self.glueTable, fieldNumber: 5)
    }
    if !self.auditEventsLongTermUri.isEmpty {
      try visitor.visitSingularStringField(value: self.auditEventsLongTermUri, fieldNumber: 6)
    }
    if !self.athenaResultsUri.isEmpty {
      try visitor.visitSingularStringField(value: self.athenaResultsUri, fieldNumber: 7)
    }
    if !self.policyName.isEmpty {
      try visitor.visitSingularStringField(value: self.policyName, fieldNumber: 8)
    }
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Externalcloudaudit_V1_ExternalCloudAuditSpec, rhs: Teleport_Externalcloudaudit_V1_ExternalCloudAuditSpec) -> Bool {
    if lhs.integrationName != rhs.integrationName {return false}
    if lhs.sessionsRecordingsUri != rhs.sessionsRecordingsUri {return false}
    if lhs.athenaWorkgroup != rhs.athenaWorkgroup {return false}
    if lhs.glueDatabase != rhs.glueDatabase {return false}
    if lhs.glueTable != rhs.glueTable {return false}
    if lhs.auditEventsLongTermUri != rhs.auditEventsLongTermUri {return false}
    if lhs.athenaResultsUri != rhs.athenaResultsUri {return false}
    if lhs.policyName != rhs.policyName {return false}
    if lhs.region != rhs.region {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
