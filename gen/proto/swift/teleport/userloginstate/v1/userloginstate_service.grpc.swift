//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: teleport/userloginstate/v1/userloginstate_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// UserLoginStateService provides CRUD methods for user login state resources.
///
/// Usage: instantiate `Teleport_Userloginstate_V1_UserLoginStateServiceClient`, then call methods of this protocol to make API calls.
internal protocol Teleport_Userloginstate_V1_UserLoginStateServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Teleport_Userloginstate_V1_UserLoginStateServiceClientInterceptorFactoryProtocol? { get }

  func getUserLoginStates(
    _ request: Teleport_Userloginstate_V1_GetUserLoginStatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Userloginstate_V1_GetUserLoginStatesRequest, Teleport_Userloginstate_V1_GetUserLoginStatesResponse>

  func getUserLoginState(
    _ request: Teleport_Userloginstate_V1_GetUserLoginStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Userloginstate_V1_GetUserLoginStateRequest, Teleport_Userloginstate_V1_UserLoginState>

  func upsertUserLoginState(
    _ request: Teleport_Userloginstate_V1_UpsertUserLoginStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Userloginstate_V1_UpsertUserLoginStateRequest, Teleport_Userloginstate_V1_UserLoginState>

  func deleteUserLoginState(
    _ request: Teleport_Userloginstate_V1_DeleteUserLoginStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Userloginstate_V1_DeleteUserLoginStateRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteAllUserLoginStates(
    _ request: Teleport_Userloginstate_V1_DeleteAllUserLoginStatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Teleport_Userloginstate_V1_DeleteAllUserLoginStatesRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

extension Teleport_Userloginstate_V1_UserLoginStateServiceClientProtocol {
  internal var serviceName: String {
    return "teleport.userloginstate.v1.UserLoginStateService"
  }

  /// GetUserLoginStates returns a list of all user login states.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserLoginStates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUserLoginStates(
    _ request: Teleport_Userloginstate_V1_GetUserLoginStatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Userloginstate_V1_GetUserLoginStatesRequest, Teleport_Userloginstate_V1_GetUserLoginStatesResponse> {
    return self.makeUnaryCall(
      path: Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.getUserLoginStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserLoginStatesInterceptors() ?? []
    )
  }

  /// GetUserLoginState returns the specified user login state resource.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserLoginState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUserLoginState(
    _ request: Teleport_Userloginstate_V1_GetUserLoginStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Userloginstate_V1_GetUserLoginStateRequest, Teleport_Userloginstate_V1_UserLoginState> {
    return self.makeUnaryCall(
      path: Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.getUserLoginState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserLoginStateInterceptors() ?? []
    )
  }

  /// UpsertUserLoginState creates or updates a user login state resource.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpsertUserLoginState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func upsertUserLoginState(
    _ request: Teleport_Userloginstate_V1_UpsertUserLoginStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Userloginstate_V1_UpsertUserLoginStateRequest, Teleport_Userloginstate_V1_UserLoginState> {
    return self.makeUnaryCall(
      path: Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.upsertUserLoginState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertUserLoginStateInterceptors() ?? []
    )
  }

  /// DeleteUserLoginState hard deletes the specified user login state resource.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteUserLoginState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteUserLoginState(
    _ request: Teleport_Userloginstate_V1_DeleteUserLoginStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Userloginstate_V1_DeleteUserLoginStateRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.deleteUserLoginState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUserLoginStateInterceptors() ?? []
    )
  }

  /// DeleteAllUserLoginStates hard deletes all user login states.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAllUserLoginStates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteAllUserLoginStates(
    _ request: Teleport_Userloginstate_V1_DeleteAllUserLoginStatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Teleport_Userloginstate_V1_DeleteAllUserLoginStatesRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.deleteAllUserLoginStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAllUserLoginStatesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Teleport_Userloginstate_V1_UserLoginStateServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Teleport_Userloginstate_V1_UserLoginStateServiceNIOClient")
internal final class Teleport_Userloginstate_V1_UserLoginStateServiceClient: Teleport_Userloginstate_V1_UserLoginStateServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Teleport_Userloginstate_V1_UserLoginStateServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Teleport_Userloginstate_V1_UserLoginStateServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the teleport.userloginstate.v1.UserLoginStateService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Teleport_Userloginstate_V1_UserLoginStateServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Teleport_Userloginstate_V1_UserLoginStateServiceNIOClient: Teleport_Userloginstate_V1_UserLoginStateServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Teleport_Userloginstate_V1_UserLoginStateServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the teleport.userloginstate.v1.UserLoginStateService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Teleport_Userloginstate_V1_UserLoginStateServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// UserLoginStateService provides CRUD methods for user login state resources.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Teleport_Userloginstate_V1_UserLoginStateServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Teleport_Userloginstate_V1_UserLoginStateServiceClientInterceptorFactoryProtocol? { get }

  func makeGetUserLoginStatesCall(
    _ request: Teleport_Userloginstate_V1_GetUserLoginStatesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Userloginstate_V1_GetUserLoginStatesRequest, Teleport_Userloginstate_V1_GetUserLoginStatesResponse>

  func makeGetUserLoginStateCall(
    _ request: Teleport_Userloginstate_V1_GetUserLoginStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Userloginstate_V1_GetUserLoginStateRequest, Teleport_Userloginstate_V1_UserLoginState>

  func makeUpsertUserLoginStateCall(
    _ request: Teleport_Userloginstate_V1_UpsertUserLoginStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Userloginstate_V1_UpsertUserLoginStateRequest, Teleport_Userloginstate_V1_UserLoginState>

  func makeDeleteUserLoginStateCall(
    _ request: Teleport_Userloginstate_V1_DeleteUserLoginStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Userloginstate_V1_DeleteUserLoginStateRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeDeleteAllUserLoginStatesCall(
    _ request: Teleport_Userloginstate_V1_DeleteAllUserLoginStatesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Teleport_Userloginstate_V1_DeleteAllUserLoginStatesRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Teleport_Userloginstate_V1_UserLoginStateServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Teleport_Userloginstate_V1_UserLoginStateServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetUserLoginStatesCall(
    _ request: Teleport_Userloginstate_V1_GetUserLoginStatesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Userloginstate_V1_GetUserLoginStatesRequest, Teleport_Userloginstate_V1_GetUserLoginStatesResponse> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.getUserLoginStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserLoginStatesInterceptors() ?? []
    )
  }

  internal func makeGetUserLoginStateCall(
    _ request: Teleport_Userloginstate_V1_GetUserLoginStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Userloginstate_V1_GetUserLoginStateRequest, Teleport_Userloginstate_V1_UserLoginState> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.getUserLoginState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserLoginStateInterceptors() ?? []
    )
  }

  internal func makeUpsertUserLoginStateCall(
    _ request: Teleport_Userloginstate_V1_UpsertUserLoginStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Userloginstate_V1_UpsertUserLoginStateRequest, Teleport_Userloginstate_V1_UserLoginState> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.upsertUserLoginState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertUserLoginStateInterceptors() ?? []
    )
  }

  internal func makeDeleteUserLoginStateCall(
    _ request: Teleport_Userloginstate_V1_DeleteUserLoginStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Userloginstate_V1_DeleteUserLoginStateRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.deleteUserLoginState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUserLoginStateInterceptors() ?? []
    )
  }

  internal func makeDeleteAllUserLoginStatesCall(
    _ request: Teleport_Userloginstate_V1_DeleteAllUserLoginStatesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Teleport_Userloginstate_V1_DeleteAllUserLoginStatesRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.deleteAllUserLoginStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAllUserLoginStatesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Teleport_Userloginstate_V1_UserLoginStateServiceAsyncClientProtocol {
  internal func getUserLoginStates(
    _ request: Teleport_Userloginstate_V1_GetUserLoginStatesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Teleport_Userloginstate_V1_GetUserLoginStatesResponse {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.getUserLoginStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserLoginStatesInterceptors() ?? []
    )
  }

  internal func getUserLoginState(
    _ request: Teleport_Userloginstate_V1_GetUserLoginStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Teleport_Userloginstate_V1_UserLoginState {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.getUserLoginState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserLoginStateInterceptors() ?? []
    )
  }

  internal func upsertUserLoginState(
    _ request: Teleport_Userloginstate_V1_UpsertUserLoginStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Teleport_Userloginstate_V1_UserLoginState {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.upsertUserLoginState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertUserLoginStateInterceptors() ?? []
    )
  }

  internal func deleteUserLoginState(
    _ request: Teleport_Userloginstate_V1_DeleteUserLoginStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.deleteUserLoginState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUserLoginStateInterceptors() ?? []
    )
  }

  internal func deleteAllUserLoginStates(
    _ request: Teleport_Userloginstate_V1_DeleteAllUserLoginStatesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.deleteAllUserLoginStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAllUserLoginStatesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Teleport_Userloginstate_V1_UserLoginStateServiceAsyncClient: Teleport_Userloginstate_V1_UserLoginStateServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Teleport_Userloginstate_V1_UserLoginStateServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Teleport_Userloginstate_V1_UserLoginStateServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Teleport_Userloginstate_V1_UserLoginStateServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getUserLoginStates'.
  func makeGetUserLoginStatesInterceptors() -> [ClientInterceptor<Teleport_Userloginstate_V1_GetUserLoginStatesRequest, Teleport_Userloginstate_V1_GetUserLoginStatesResponse>]

  /// - Returns: Interceptors to use when invoking 'getUserLoginState'.
  func makeGetUserLoginStateInterceptors() -> [ClientInterceptor<Teleport_Userloginstate_V1_GetUserLoginStateRequest, Teleport_Userloginstate_V1_UserLoginState>]

  /// - Returns: Interceptors to use when invoking 'upsertUserLoginState'.
  func makeUpsertUserLoginStateInterceptors() -> [ClientInterceptor<Teleport_Userloginstate_V1_UpsertUserLoginStateRequest, Teleport_Userloginstate_V1_UserLoginState>]

  /// - Returns: Interceptors to use when invoking 'deleteUserLoginState'.
  func makeDeleteUserLoginStateInterceptors() -> [ClientInterceptor<Teleport_Userloginstate_V1_DeleteUserLoginStateRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteAllUserLoginStates'.
  func makeDeleteAllUserLoginStatesInterceptors() -> [ClientInterceptor<Teleport_Userloginstate_V1_DeleteAllUserLoginStatesRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

internal enum Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "UserLoginStateService",
    fullName: "teleport.userloginstate.v1.UserLoginStateService",
    methods: [
      Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.getUserLoginStates,
      Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.getUserLoginState,
      Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.upsertUserLoginState,
      Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.deleteUserLoginState,
      Teleport_Userloginstate_V1_UserLoginStateServiceClientMetadata.Methods.deleteAllUserLoginStates,
    ]
  )

  internal enum Methods {
    internal static let getUserLoginStates = GRPCMethodDescriptor(
      name: "GetUserLoginStates",
      path: "/teleport.userloginstate.v1.UserLoginStateService/GetUserLoginStates",
      type: GRPCCallType.unary
    )

    internal static let getUserLoginState = GRPCMethodDescriptor(
      name: "GetUserLoginState",
      path: "/teleport.userloginstate.v1.UserLoginStateService/GetUserLoginState",
      type: GRPCCallType.unary
    )

    internal static let upsertUserLoginState = GRPCMethodDescriptor(
      name: "UpsertUserLoginState",
      path: "/teleport.userloginstate.v1.UserLoginStateService/UpsertUserLoginState",
      type: GRPCCallType.unary
    )

    internal static let deleteUserLoginState = GRPCMethodDescriptor(
      name: "DeleteUserLoginState",
      path: "/teleport.userloginstate.v1.UserLoginStateService/DeleteUserLoginState",
      type: GRPCCallType.unary
    )

    internal static let deleteAllUserLoginStates = GRPCMethodDescriptor(
      name: "DeleteAllUserLoginStates",
      path: "/teleport.userloginstate.v1.UserLoginStateService/DeleteAllUserLoginStates",
      type: GRPCCallType.unary
    )
  }
}

/// UserLoginStateService provides CRUD methods for user login state resources.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Teleport_Userloginstate_V1_UserLoginStateServiceProvider: CallHandlerProvider {
  var interceptors: Teleport_Userloginstate_V1_UserLoginStateServiceServerInterceptorFactoryProtocol? { get }

  /// GetUserLoginStates returns a list of all user login states.
  func getUserLoginStates(request: Teleport_Userloginstate_V1_GetUserLoginStatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Teleport_Userloginstate_V1_GetUserLoginStatesResponse>

  /// GetUserLoginState returns the specified user login state resource.
  func getUserLoginState(request: Teleport_Userloginstate_V1_GetUserLoginStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Teleport_Userloginstate_V1_UserLoginState>

  /// UpsertUserLoginState creates or updates a user login state resource.
  func upsertUserLoginState(request: Teleport_Userloginstate_V1_UpsertUserLoginStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Teleport_Userloginstate_V1_UserLoginState>

  /// DeleteUserLoginState hard deletes the specified user login state resource.
  func deleteUserLoginState(request: Teleport_Userloginstate_V1_DeleteUserLoginStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// DeleteAllUserLoginStates hard deletes all user login states.
  func deleteAllUserLoginStates(request: Teleport_Userloginstate_V1_DeleteAllUserLoginStatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension Teleport_Userloginstate_V1_UserLoginStateServiceProvider {
  internal var serviceName: Substring {
    return Teleport_Userloginstate_V1_UserLoginStateServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetUserLoginStates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Userloginstate_V1_GetUserLoginStatesRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Userloginstate_V1_GetUserLoginStatesResponse>(),
        interceptors: self.interceptors?.makeGetUserLoginStatesInterceptors() ?? [],
        userFunction: self.getUserLoginStates(request:context:)
      )

    case "GetUserLoginState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Userloginstate_V1_GetUserLoginStateRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Userloginstate_V1_UserLoginState>(),
        interceptors: self.interceptors?.makeGetUserLoginStateInterceptors() ?? [],
        userFunction: self.getUserLoginState(request:context:)
      )

    case "UpsertUserLoginState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Userloginstate_V1_UpsertUserLoginStateRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Userloginstate_V1_UserLoginState>(),
        interceptors: self.interceptors?.makeUpsertUserLoginStateInterceptors() ?? [],
        userFunction: self.upsertUserLoginState(request:context:)
      )

    case "DeleteUserLoginState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Userloginstate_V1_DeleteUserLoginStateRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteUserLoginStateInterceptors() ?? [],
        userFunction: self.deleteUserLoginState(request:context:)
      )

    case "DeleteAllUserLoginStates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Userloginstate_V1_DeleteAllUserLoginStatesRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteAllUserLoginStatesInterceptors() ?? [],
        userFunction: self.deleteAllUserLoginStates(request:context:)
      )

    default:
      return nil
    }
  }
}

/// UserLoginStateService provides CRUD methods for user login state resources.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Teleport_Userloginstate_V1_UserLoginStateServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Teleport_Userloginstate_V1_UserLoginStateServiceServerInterceptorFactoryProtocol? { get }

  /// GetUserLoginStates returns a list of all user login states.
  func getUserLoginStates(
    request: Teleport_Userloginstate_V1_GetUserLoginStatesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Teleport_Userloginstate_V1_GetUserLoginStatesResponse

  /// GetUserLoginState returns the specified user login state resource.
  func getUserLoginState(
    request: Teleport_Userloginstate_V1_GetUserLoginStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Teleport_Userloginstate_V1_UserLoginState

  /// UpsertUserLoginState creates or updates a user login state resource.
  func upsertUserLoginState(
    request: Teleport_Userloginstate_V1_UpsertUserLoginStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Teleport_Userloginstate_V1_UserLoginState

  /// DeleteUserLoginState hard deletes the specified user login state resource.
  func deleteUserLoginState(
    request: Teleport_Userloginstate_V1_DeleteUserLoginStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// DeleteAllUserLoginStates hard deletes all user login states.
  func deleteAllUserLoginStates(
    request: Teleport_Userloginstate_V1_DeleteAllUserLoginStatesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Teleport_Userloginstate_V1_UserLoginStateServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Teleport_Userloginstate_V1_UserLoginStateServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Teleport_Userloginstate_V1_UserLoginStateServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Teleport_Userloginstate_V1_UserLoginStateServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetUserLoginStates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Userloginstate_V1_GetUserLoginStatesRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Userloginstate_V1_GetUserLoginStatesResponse>(),
        interceptors: self.interceptors?.makeGetUserLoginStatesInterceptors() ?? [],
        wrapping: { try await self.getUserLoginStates(request: $0, context: $1) }
      )

    case "GetUserLoginState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Userloginstate_V1_GetUserLoginStateRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Userloginstate_V1_UserLoginState>(),
        interceptors: self.interceptors?.makeGetUserLoginStateInterceptors() ?? [],
        wrapping: { try await self.getUserLoginState(request: $0, context: $1) }
      )

    case "UpsertUserLoginState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Userloginstate_V1_UpsertUserLoginStateRequest>(),
        responseSerializer: ProtobufSerializer<Teleport_Userloginstate_V1_UserLoginState>(),
        interceptors: self.interceptors?.makeUpsertUserLoginStateInterceptors() ?? [],
        wrapping: { try await self.upsertUserLoginState(request: $0, context: $1) }
      )

    case "DeleteUserLoginState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Userloginstate_V1_DeleteUserLoginStateRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteUserLoginStateInterceptors() ?? [],
        wrapping: { try await self.deleteUserLoginState(request: $0, context: $1) }
      )

    case "DeleteAllUserLoginStates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Teleport_Userloginstate_V1_DeleteAllUserLoginStatesRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteAllUserLoginStatesInterceptors() ?? [],
        wrapping: { try await self.deleteAllUserLoginStates(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Teleport_Userloginstate_V1_UserLoginStateServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getUserLoginStates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetUserLoginStatesInterceptors() -> [ServerInterceptor<Teleport_Userloginstate_V1_GetUserLoginStatesRequest, Teleport_Userloginstate_V1_GetUserLoginStatesResponse>]

  /// - Returns: Interceptors to use when handling 'getUserLoginState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetUserLoginStateInterceptors() -> [ServerInterceptor<Teleport_Userloginstate_V1_GetUserLoginStateRequest, Teleport_Userloginstate_V1_UserLoginState>]

  /// - Returns: Interceptors to use when handling 'upsertUserLoginState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpsertUserLoginStateInterceptors() -> [ServerInterceptor<Teleport_Userloginstate_V1_UpsertUserLoginStateRequest, Teleport_Userloginstate_V1_UserLoginState>]

  /// - Returns: Interceptors to use when handling 'deleteUserLoginState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteUserLoginStateInterceptors() -> [ServerInterceptor<Teleport_Userloginstate_V1_DeleteUserLoginStateRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'deleteAllUserLoginStates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteAllUserLoginStatesInterceptors() -> [ServerInterceptor<Teleport_Userloginstate_V1_DeleteAllUserLoginStatesRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

internal enum Teleport_Userloginstate_V1_UserLoginStateServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "UserLoginStateService",
    fullName: "teleport.userloginstate.v1.UserLoginStateService",
    methods: [
      Teleport_Userloginstate_V1_UserLoginStateServiceServerMetadata.Methods.getUserLoginStates,
      Teleport_Userloginstate_V1_UserLoginStateServiceServerMetadata.Methods.getUserLoginState,
      Teleport_Userloginstate_V1_UserLoginStateServiceServerMetadata.Methods.upsertUserLoginState,
      Teleport_Userloginstate_V1_UserLoginStateServiceServerMetadata.Methods.deleteUserLoginState,
      Teleport_Userloginstate_V1_UserLoginStateServiceServerMetadata.Methods.deleteAllUserLoginStates,
    ]
  )

  internal enum Methods {
    internal static let getUserLoginStates = GRPCMethodDescriptor(
      name: "GetUserLoginStates",
      path: "/teleport.userloginstate.v1.UserLoginStateService/GetUserLoginStates",
      type: GRPCCallType.unary
    )

    internal static let getUserLoginState = GRPCMethodDescriptor(
      name: "GetUserLoginState",
      path: "/teleport.userloginstate.v1.UserLoginStateService/GetUserLoginState",
      type: GRPCCallType.unary
    )

    internal static let upsertUserLoginState = GRPCMethodDescriptor(
      name: "UpsertUserLoginState",
      path: "/teleport.userloginstate.v1.UserLoginStateService/UpsertUserLoginState",
      type: GRPCCallType.unary
    )

    internal static let deleteUserLoginState = GRPCMethodDescriptor(
      name: "DeleteUserLoginState",
      path: "/teleport.userloginstate.v1.UserLoginStateService/DeleteUserLoginState",
      type: GRPCCallType.unary
    )

    internal static let deleteAllUserLoginStates = GRPCMethodDescriptor(
      name: "DeleteAllUserLoginStates",
      path: "/teleport.userloginstate.v1.UserLoginStateService/DeleteAllUserLoginStates",
      type: GRPCCallType.unary
    )
  }
}
