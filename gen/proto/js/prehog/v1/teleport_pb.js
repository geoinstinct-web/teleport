// source: prehog/v1/teleport.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.prehog.v1.SubmitUsageReportsRequest', null, global);
goog.exportSymbol('proto.prehog.v1.SubmitUsageReportsResponse', null, global);
goog.exportSymbol('proto.prehog.v1.UserActivityRecord', null, global);
goog.exportSymbol('proto.prehog.v1.UserActivityReport', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prehog.v1.UserActivityReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prehog.v1.UserActivityReport.repeatedFields_, null);
};
goog.inherits(proto.prehog.v1.UserActivityReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prehog.v1.UserActivityReport.displayName = 'proto.prehog.v1.UserActivityReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prehog.v1.UserActivityRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prehog.v1.UserActivityRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prehog.v1.UserActivityRecord.displayName = 'proto.prehog.v1.UserActivityRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prehog.v1.SubmitUsageReportsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prehog.v1.SubmitUsageReportsRequest.repeatedFields_, null);
};
goog.inherits(proto.prehog.v1.SubmitUsageReportsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prehog.v1.SubmitUsageReportsRequest.displayName = 'proto.prehog.v1.SubmitUsageReportsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prehog.v1.SubmitUsageReportsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prehog.v1.SubmitUsageReportsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prehog.v1.SubmitUsageReportsResponse.displayName = 'proto.prehog.v1.SubmitUsageReportsResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prehog.v1.UserActivityReport.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prehog.v1.UserActivityReport.prototype.toObject = function(opt_includeInstance) {
  return proto.prehog.v1.UserActivityReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prehog.v1.UserActivityReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prehog.v1.UserActivityReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportUuid: msg.getReportUuid_asB64(),
    clusterName: msg.getClusterName_asB64(),
    reporterHostid: msg.getReporterHostid_asB64(),
    startTime: (f = msg.getStartTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.prehog.v1.UserActivityRecord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prehog.v1.UserActivityReport}
 */
proto.prehog.v1.UserActivityReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prehog.v1.UserActivityReport;
  return proto.prehog.v1.UserActivityReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prehog.v1.UserActivityReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prehog.v1.UserActivityReport}
 */
proto.prehog.v1.UserActivityReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReportUuid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClusterName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReporterHostid(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStartTime(value);
      break;
    case 5:
      var value = new proto.prehog.v1.UserActivityRecord;
      reader.readMessage(value,proto.prehog.v1.UserActivityRecord.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prehog.v1.UserActivityReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prehog.v1.UserActivityReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prehog.v1.UserActivityReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prehog.v1.UserActivityReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportUuid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getClusterName_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getReporterHostid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getStartTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.prehog.v1.UserActivityRecord.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes report_uuid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.prehog.v1.UserActivityReport.prototype.getReportUuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes report_uuid = 1;
 * This is a type-conversion wrapper around `getReportUuid()`
 * @return {string}
 */
proto.prehog.v1.UserActivityReport.prototype.getReportUuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReportUuid()));
};


/**
 * optional bytes report_uuid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReportUuid()`
 * @return {!Uint8Array}
 */
proto.prehog.v1.UserActivityReport.prototype.getReportUuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReportUuid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.prehog.v1.UserActivityReport} returns this
 */
proto.prehog.v1.UserActivityReport.prototype.setReportUuid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes cluster_name = 2;
 * @return {!(string|Uint8Array)}
 */
proto.prehog.v1.UserActivityReport.prototype.getClusterName = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes cluster_name = 2;
 * This is a type-conversion wrapper around `getClusterName()`
 * @return {string}
 */
proto.prehog.v1.UserActivityReport.prototype.getClusterName_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClusterName()));
};


/**
 * optional bytes cluster_name = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClusterName()`
 * @return {!Uint8Array}
 */
proto.prehog.v1.UserActivityReport.prototype.getClusterName_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClusterName()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.prehog.v1.UserActivityReport} returns this
 */
proto.prehog.v1.UserActivityReport.prototype.setClusterName = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes reporter_hostid = 3;
 * @return {!(string|Uint8Array)}
 */
proto.prehog.v1.UserActivityReport.prototype.getReporterHostid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes reporter_hostid = 3;
 * This is a type-conversion wrapper around `getReporterHostid()`
 * @return {string}
 */
proto.prehog.v1.UserActivityReport.prototype.getReporterHostid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReporterHostid()));
};


/**
 * optional bytes reporter_hostid = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReporterHostid()`
 * @return {!Uint8Array}
 */
proto.prehog.v1.UserActivityReport.prototype.getReporterHostid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReporterHostid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.prehog.v1.UserActivityReport} returns this
 */
proto.prehog.v1.UserActivityReport.prototype.setReporterHostid = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp start_time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.prehog.v1.UserActivityReport.prototype.getStartTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.prehog.v1.UserActivityReport} returns this
*/
proto.prehog.v1.UserActivityReport.prototype.setStartTime = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prehog.v1.UserActivityReport} returns this
 */
proto.prehog.v1.UserActivityReport.prototype.clearStartTime = function() {
  return this.setStartTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prehog.v1.UserActivityReport.prototype.hasStartTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated UserActivityRecord records = 5;
 * @return {!Array<!proto.prehog.v1.UserActivityRecord>}
 */
proto.prehog.v1.UserActivityReport.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.prehog.v1.UserActivityRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prehog.v1.UserActivityRecord, 5));
};


/**
 * @param {!Array<!proto.prehog.v1.UserActivityRecord>} value
 * @return {!proto.prehog.v1.UserActivityReport} returns this
*/
proto.prehog.v1.UserActivityReport.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.prehog.v1.UserActivityRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prehog.v1.UserActivityRecord}
 */
proto.prehog.v1.UserActivityReport.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.prehog.v1.UserActivityRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prehog.v1.UserActivityReport} returns this
 */
proto.prehog.v1.UserActivityReport.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prehog.v1.UserActivityRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.prehog.v1.UserActivityRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prehog.v1.UserActivityRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prehog.v1.UserActivityRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    userName: msg.getUserName_asB64(),
    logins: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sshSessions: jspb.Message.getFieldWithDefault(msg, 3, 0),
    appSessions: jspb.Message.getFieldWithDefault(msg, 4, 0),
    kubeSessions: jspb.Message.getFieldWithDefault(msg, 5, 0),
    dbSessions: jspb.Message.getFieldWithDefault(msg, 6, 0),
    desktopSessions: jspb.Message.getFieldWithDefault(msg, 7, 0),
    appTcpSessions: jspb.Message.getFieldWithDefault(msg, 8, 0),
    sshPortSessions: jspb.Message.getFieldWithDefault(msg, 9, 0),
    kubeRequests: jspb.Message.getFieldWithDefault(msg, 10, 0),
    sftpEvents: jspb.Message.getFieldWithDefault(msg, 11, 0),
    sshPortV2Sessions: jspb.Message.getFieldWithDefault(msg, 12, 0),
    kubePortSessions: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prehog.v1.UserActivityRecord}
 */
proto.prehog.v1.UserActivityRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prehog.v1.UserActivityRecord;
  return proto.prehog.v1.UserActivityRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prehog.v1.UserActivityRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prehog.v1.UserActivityRecord}
 */
proto.prehog.v1.UserActivityRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUserName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLogins(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSshSessions(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAppSessions(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setKubeSessions(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDbSessions(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDesktopSessions(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAppTcpSessions(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSshPortSessions(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setKubeRequests(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSftpEvents(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSshPortV2Sessions(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setKubePortSessions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prehog.v1.UserActivityRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prehog.v1.UserActivityRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prehog.v1.UserActivityRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prehog.v1.UserActivityRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserName_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLogins();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSshSessions();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getAppSessions();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getKubeSessions();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getDbSessions();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getDesktopSessions();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getAppTcpSessions();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getSshPortSessions();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getKubeRequests();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getSftpEvents();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getSshPortV2Sessions();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getKubePortSessions();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
};


/**
 * optional bytes user_name = 1;
 * @return {!(string|Uint8Array)}
 */
proto.prehog.v1.UserActivityRecord.prototype.getUserName = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes user_name = 1;
 * This is a type-conversion wrapper around `getUserName()`
 * @return {string}
 */
proto.prehog.v1.UserActivityRecord.prototype.getUserName_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUserName()));
};


/**
 * optional bytes user_name = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUserName()`
 * @return {!Uint8Array}
 */
proto.prehog.v1.UserActivityRecord.prototype.getUserName_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUserName()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.prehog.v1.UserActivityRecord} returns this
 */
proto.prehog.v1.UserActivityRecord.prototype.setUserName = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 logins = 2;
 * @return {number}
 */
proto.prehog.v1.UserActivityRecord.prototype.getLogins = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.prehog.v1.UserActivityRecord} returns this
 */
proto.prehog.v1.UserActivityRecord.prototype.setLogins = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 ssh_sessions = 3;
 * @return {number}
 */
proto.prehog.v1.UserActivityRecord.prototype.getSshSessions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.prehog.v1.UserActivityRecord} returns this
 */
proto.prehog.v1.UserActivityRecord.prototype.setSshSessions = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 app_sessions = 4;
 * @return {number}
 */
proto.prehog.v1.UserActivityRecord.prototype.getAppSessions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.prehog.v1.UserActivityRecord} returns this
 */
proto.prehog.v1.UserActivityRecord.prototype.setAppSessions = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 kube_sessions = 5;
 * @return {number}
 */
proto.prehog.v1.UserActivityRecord.prototype.getKubeSessions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.prehog.v1.UserActivityRecord} returns this
 */
proto.prehog.v1.UserActivityRecord.prototype.setKubeSessions = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 db_sessions = 6;
 * @return {number}
 */
proto.prehog.v1.UserActivityRecord.prototype.getDbSessions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.prehog.v1.UserActivityRecord} returns this
 */
proto.prehog.v1.UserActivityRecord.prototype.setDbSessions = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 desktop_sessions = 7;
 * @return {number}
 */
proto.prehog.v1.UserActivityRecord.prototype.getDesktopSessions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.prehog.v1.UserActivityRecord} returns this
 */
proto.prehog.v1.UserActivityRecord.prototype.setDesktopSessions = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 app_tcp_sessions = 8;
 * @return {number}
 */
proto.prehog.v1.UserActivityRecord.prototype.getAppTcpSessions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.prehog.v1.UserActivityRecord} returns this
 */
proto.prehog.v1.UserActivityRecord.prototype.setAppTcpSessions = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 ssh_port_sessions = 9;
 * @return {number}
 */
proto.prehog.v1.UserActivityRecord.prototype.getSshPortSessions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.prehog.v1.UserActivityRecord} returns this
 */
proto.prehog.v1.UserActivityRecord.prototype.setSshPortSessions = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 kube_requests = 10;
 * @return {number}
 */
proto.prehog.v1.UserActivityRecord.prototype.getKubeRequests = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.prehog.v1.UserActivityRecord} returns this
 */
proto.prehog.v1.UserActivityRecord.prototype.setKubeRequests = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 sftp_events = 11;
 * @return {number}
 */
proto.prehog.v1.UserActivityRecord.prototype.getSftpEvents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.prehog.v1.UserActivityRecord} returns this
 */
proto.prehog.v1.UserActivityRecord.prototype.setSftpEvents = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 ssh_port_v2_sessions = 12;
 * @return {number}
 */
proto.prehog.v1.UserActivityRecord.prototype.getSshPortV2Sessions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.prehog.v1.UserActivityRecord} returns this
 */
proto.prehog.v1.UserActivityRecord.prototype.setSshPortV2Sessions = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint64 kube_port_sessions = 13;
 * @return {number}
 */
proto.prehog.v1.UserActivityRecord.prototype.getKubePortSessions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.prehog.v1.UserActivityRecord} returns this
 */
proto.prehog.v1.UserActivityRecord.prototype.setKubePortSessions = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prehog.v1.SubmitUsageReportsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prehog.v1.SubmitUsageReportsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.prehog.v1.SubmitUsageReportsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prehog.v1.SubmitUsageReportsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prehog.v1.SubmitUsageReportsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userActivityList: jspb.Message.toObjectList(msg.getUserActivityList(),
    proto.prehog.v1.UserActivityReport.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prehog.v1.SubmitUsageReportsRequest}
 */
proto.prehog.v1.SubmitUsageReportsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prehog.v1.SubmitUsageReportsRequest;
  return proto.prehog.v1.SubmitUsageReportsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prehog.v1.SubmitUsageReportsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prehog.v1.SubmitUsageReportsRequest}
 */
proto.prehog.v1.SubmitUsageReportsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prehog.v1.UserActivityReport;
      reader.readMessage(value,proto.prehog.v1.UserActivityReport.deserializeBinaryFromReader);
      msg.addUserActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prehog.v1.SubmitUsageReportsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prehog.v1.SubmitUsageReportsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prehog.v1.SubmitUsageReportsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prehog.v1.SubmitUsageReportsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserActivityList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.prehog.v1.UserActivityReport.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UserActivityReport user_activity = 1;
 * @return {!Array<!proto.prehog.v1.UserActivityReport>}
 */
proto.prehog.v1.SubmitUsageReportsRequest.prototype.getUserActivityList = function() {
  return /** @type{!Array<!proto.prehog.v1.UserActivityReport>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prehog.v1.UserActivityReport, 1));
};


/**
 * @param {!Array<!proto.prehog.v1.UserActivityReport>} value
 * @return {!proto.prehog.v1.SubmitUsageReportsRequest} returns this
*/
proto.prehog.v1.SubmitUsageReportsRequest.prototype.setUserActivityList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.prehog.v1.UserActivityReport=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prehog.v1.UserActivityReport}
 */
proto.prehog.v1.SubmitUsageReportsRequest.prototype.addUserActivity = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.prehog.v1.UserActivityReport, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prehog.v1.SubmitUsageReportsRequest} returns this
 */
proto.prehog.v1.SubmitUsageReportsRequest.prototype.clearUserActivityList = function() {
  return this.setUserActivityList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prehog.v1.SubmitUsageReportsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.prehog.v1.SubmitUsageReportsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prehog.v1.SubmitUsageReportsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prehog.v1.SubmitUsageReportsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchUuid: msg.getBatchUuid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prehog.v1.SubmitUsageReportsResponse}
 */
proto.prehog.v1.SubmitUsageReportsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prehog.v1.SubmitUsageReportsResponse;
  return proto.prehog.v1.SubmitUsageReportsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prehog.v1.SubmitUsageReportsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prehog.v1.SubmitUsageReportsResponse}
 */
proto.prehog.v1.SubmitUsageReportsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBatchUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prehog.v1.SubmitUsageReportsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prehog.v1.SubmitUsageReportsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prehog.v1.SubmitUsageReportsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prehog.v1.SubmitUsageReportsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchUuid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes batch_uuid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.prehog.v1.SubmitUsageReportsResponse.prototype.getBatchUuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes batch_uuid = 1;
 * This is a type-conversion wrapper around `getBatchUuid()`
 * @return {string}
 */
proto.prehog.v1.SubmitUsageReportsResponse.prototype.getBatchUuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBatchUuid()));
};


/**
 * optional bytes batch_uuid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBatchUuid()`
 * @return {!Uint8Array}
 */
proto.prehog.v1.SubmitUsageReportsResponse.prototype.getBatchUuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBatchUuid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.prehog.v1.SubmitUsageReportsResponse} returns this
 */
proto.prehog.v1.SubmitUsageReportsResponse.prototype.setBatchUuid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


goog.object.extend(exports, proto.prehog.v1);
