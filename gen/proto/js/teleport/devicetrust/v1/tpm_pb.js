// source: teleport/devicetrust/v1/tpm.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.teleport.devicetrust.v1.TPMPCR', null, global);
goog.exportSymbol('proto.teleport.devicetrust.v1.TPMPlatformAttestation', null, global);
goog.exportSymbol('proto.teleport.devicetrust.v1.TPMPlatformParameters', null, global);
goog.exportSymbol('proto.teleport.devicetrust.v1.TPMQuote', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teleport.devicetrust.v1.TPMPCR = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teleport.devicetrust.v1.TPMPCR, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teleport.devicetrust.v1.TPMPCR.displayName = 'proto.teleport.devicetrust.v1.TPMPCR';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teleport.devicetrust.v1.TPMQuote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teleport.devicetrust.v1.TPMQuote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teleport.devicetrust.v1.TPMQuote.displayName = 'proto.teleport.devicetrust.v1.TPMQuote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.teleport.devicetrust.v1.TPMPlatformParameters.repeatedFields_, null);
};
goog.inherits(proto.teleport.devicetrust.v1.TPMPlatformParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teleport.devicetrust.v1.TPMPlatformParameters.displayName = 'proto.teleport.devicetrust.v1.TPMPlatformParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teleport.devicetrust.v1.TPMPlatformAttestation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teleport.devicetrust.v1.TPMPlatformAttestation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teleport.devicetrust.v1.TPMPlatformAttestation.displayName = 'proto.teleport.devicetrust.v1.TPMPlatformAttestation';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teleport.devicetrust.v1.TPMPCR.prototype.toObject = function(opt_includeInstance) {
  return proto.teleport.devicetrust.v1.TPMPCR.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teleport.devicetrust.v1.TPMPCR} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.devicetrust.v1.TPMPCR.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    digest: msg.getDigest_asB64(),
    digestAlg: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teleport.devicetrust.v1.TPMPCR}
 */
proto.teleport.devicetrust.v1.TPMPCR.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teleport.devicetrust.v1.TPMPCR;
  return proto.teleport.devicetrust.v1.TPMPCR.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teleport.devicetrust.v1.TPMPCR} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teleport.devicetrust.v1.TPMPCR}
 */
proto.teleport.devicetrust.v1.TPMPCR.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDigest(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDigestAlg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teleport.devicetrust.v1.TPMPCR.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teleport.devicetrust.v1.TPMPCR.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teleport.devicetrust.v1.TPMPCR} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.devicetrust.v1.TPMPCR.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDigestAlg();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional int32 index = 1;
 * @return {number}
 */
proto.teleport.devicetrust.v1.TPMPCR.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.teleport.devicetrust.v1.TPMPCR} returns this
 */
proto.teleport.devicetrust.v1.TPMPCR.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes digest = 2;
 * @return {!(string|Uint8Array)}
 */
proto.teleport.devicetrust.v1.TPMPCR.prototype.getDigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes digest = 2;
 * This is a type-conversion wrapper around `getDigest()`
 * @return {string}
 */
proto.teleport.devicetrust.v1.TPMPCR.prototype.getDigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDigest()));
};


/**
 * optional bytes digest = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDigest()`
 * @return {!Uint8Array}
 */
proto.teleport.devicetrust.v1.TPMPCR.prototype.getDigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.teleport.devicetrust.v1.TPMPCR} returns this
 */
proto.teleport.devicetrust.v1.TPMPCR.prototype.setDigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 digest_alg = 3;
 * @return {number}
 */
proto.teleport.devicetrust.v1.TPMPCR.prototype.getDigestAlg = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.teleport.devicetrust.v1.TPMPCR} returns this
 */
proto.teleport.devicetrust.v1.TPMPCR.prototype.setDigestAlg = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teleport.devicetrust.v1.TPMQuote.prototype.toObject = function(opt_includeInstance) {
  return proto.teleport.devicetrust.v1.TPMQuote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teleport.devicetrust.v1.TPMQuote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.devicetrust.v1.TPMQuote.toObject = function(includeInstance, msg) {
  var f, obj = {
    quote: msg.getQuote_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teleport.devicetrust.v1.TPMQuote}
 */
proto.teleport.devicetrust.v1.TPMQuote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teleport.devicetrust.v1.TPMQuote;
  return proto.teleport.devicetrust.v1.TPMQuote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teleport.devicetrust.v1.TPMQuote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teleport.devicetrust.v1.TPMQuote}
 */
proto.teleport.devicetrust.v1.TPMQuote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setQuote(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teleport.devicetrust.v1.TPMQuote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teleport.devicetrust.v1.TPMQuote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teleport.devicetrust.v1.TPMQuote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.devicetrust.v1.TPMQuote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuote_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes quote = 1;
 * @return {!(string|Uint8Array)}
 */
proto.teleport.devicetrust.v1.TPMQuote.prototype.getQuote = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes quote = 1;
 * This is a type-conversion wrapper around `getQuote()`
 * @return {string}
 */
proto.teleport.devicetrust.v1.TPMQuote.prototype.getQuote_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getQuote()));
};


/**
 * optional bytes quote = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getQuote()`
 * @return {!Uint8Array}
 */
proto.teleport.devicetrust.v1.TPMQuote.prototype.getQuote_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getQuote()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.teleport.devicetrust.v1.TPMQuote} returns this
 */
proto.teleport.devicetrust.v1.TPMQuote.prototype.setQuote = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.teleport.devicetrust.v1.TPMQuote.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.teleport.devicetrust.v1.TPMQuote.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.teleport.devicetrust.v1.TPMQuote.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.teleport.devicetrust.v1.TPMQuote} returns this
 */
proto.teleport.devicetrust.v1.TPMQuote.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.teleport.devicetrust.v1.TPMPlatformParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teleport.devicetrust.v1.TPMPlatformParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    quotesList: jspb.Message.toObjectList(msg.getQuotesList(),
    proto.teleport.devicetrust.v1.TPMQuote.toObject, includeInstance),
    pcrsList: jspb.Message.toObjectList(msg.getPcrsList(),
    proto.teleport.devicetrust.v1.TPMPCR.toObject, includeInstance),
    eventLog: msg.getEventLog_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teleport.devicetrust.v1.TPMPlatformParameters}
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teleport.devicetrust.v1.TPMPlatformParameters;
  return proto.teleport.devicetrust.v1.TPMPlatformParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teleport.devicetrust.v1.TPMPlatformParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teleport.devicetrust.v1.TPMPlatformParameters}
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.teleport.devicetrust.v1.TPMQuote;
      reader.readMessage(value,proto.teleport.devicetrust.v1.TPMQuote.deserializeBinaryFromReader);
      msg.addQuotes(value);
      break;
    case 2:
      var value = new proto.teleport.devicetrust.v1.TPMPCR;
      reader.readMessage(value,proto.teleport.devicetrust.v1.TPMPCR.deserializeBinaryFromReader);
      msg.addPcrs(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEventLog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teleport.devicetrust.v1.TPMPlatformParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teleport.devicetrust.v1.TPMPlatformParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.teleport.devicetrust.v1.TPMQuote.serializeBinaryToWriter
    );
  }
  f = message.getPcrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.teleport.devicetrust.v1.TPMPCR.serializeBinaryToWriter
    );
  }
  f = message.getEventLog_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * repeated TPMQuote quotes = 1;
 * @return {!Array<!proto.teleport.devicetrust.v1.TPMQuote>}
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters.prototype.getQuotesList = function() {
  return /** @type{!Array<!proto.teleport.devicetrust.v1.TPMQuote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.teleport.devicetrust.v1.TPMQuote, 1));
};


/**
 * @param {!Array<!proto.teleport.devicetrust.v1.TPMQuote>} value
 * @return {!proto.teleport.devicetrust.v1.TPMPlatformParameters} returns this
*/
proto.teleport.devicetrust.v1.TPMPlatformParameters.prototype.setQuotesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.teleport.devicetrust.v1.TPMQuote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.teleport.devicetrust.v1.TPMQuote}
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters.prototype.addQuotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.teleport.devicetrust.v1.TPMQuote, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.teleport.devicetrust.v1.TPMPlatformParameters} returns this
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters.prototype.clearQuotesList = function() {
  return this.setQuotesList([]);
};


/**
 * repeated TPMPCR pcrs = 2;
 * @return {!Array<!proto.teleport.devicetrust.v1.TPMPCR>}
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters.prototype.getPcrsList = function() {
  return /** @type{!Array<!proto.teleport.devicetrust.v1.TPMPCR>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.teleport.devicetrust.v1.TPMPCR, 2));
};


/**
 * @param {!Array<!proto.teleport.devicetrust.v1.TPMPCR>} value
 * @return {!proto.teleport.devicetrust.v1.TPMPlatformParameters} returns this
*/
proto.teleport.devicetrust.v1.TPMPlatformParameters.prototype.setPcrsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.teleport.devicetrust.v1.TPMPCR=} opt_value
 * @param {number=} opt_index
 * @return {!proto.teleport.devicetrust.v1.TPMPCR}
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters.prototype.addPcrs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.teleport.devicetrust.v1.TPMPCR, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.teleport.devicetrust.v1.TPMPlatformParameters} returns this
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters.prototype.clearPcrsList = function() {
  return this.setPcrsList([]);
};


/**
 * optional bytes event_log = 3;
 * @return {!(string|Uint8Array)}
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters.prototype.getEventLog = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes event_log = 3;
 * This is a type-conversion wrapper around `getEventLog()`
 * @return {string}
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters.prototype.getEventLog_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEventLog()));
};


/**
 * optional bytes event_log = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEventLog()`
 * @return {!Uint8Array}
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters.prototype.getEventLog_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEventLog()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.teleport.devicetrust.v1.TPMPlatformParameters} returns this
 */
proto.teleport.devicetrust.v1.TPMPlatformParameters.prototype.setEventLog = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teleport.devicetrust.v1.TPMPlatformAttestation.prototype.toObject = function(opt_includeInstance) {
  return proto.teleport.devicetrust.v1.TPMPlatformAttestation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teleport.devicetrust.v1.TPMPlatformAttestation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.devicetrust.v1.TPMPlatformAttestation.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: msg.getNonce_asB64(),
    platformParameters: (f = msg.getPlatformParameters()) && proto.teleport.devicetrust.v1.TPMPlatformParameters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teleport.devicetrust.v1.TPMPlatformAttestation}
 */
proto.teleport.devicetrust.v1.TPMPlatformAttestation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teleport.devicetrust.v1.TPMPlatformAttestation;
  return proto.teleport.devicetrust.v1.TPMPlatformAttestation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teleport.devicetrust.v1.TPMPlatformAttestation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teleport.devicetrust.v1.TPMPlatformAttestation}
 */
proto.teleport.devicetrust.v1.TPMPlatformAttestation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 2:
      var value = new proto.teleport.devicetrust.v1.TPMPlatformParameters;
      reader.readMessage(value,proto.teleport.devicetrust.v1.TPMPlatformParameters.deserializeBinaryFromReader);
      msg.setPlatformParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teleport.devicetrust.v1.TPMPlatformAttestation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teleport.devicetrust.v1.TPMPlatformAttestation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teleport.devicetrust.v1.TPMPlatformAttestation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.devicetrust.v1.TPMPlatformAttestation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPlatformParameters();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.teleport.devicetrust.v1.TPMPlatformParameters.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.teleport.devicetrust.v1.TPMPlatformAttestation.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nonce = 1;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.teleport.devicetrust.v1.TPMPlatformAttestation.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.teleport.devicetrust.v1.TPMPlatformAttestation.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.teleport.devicetrust.v1.TPMPlatformAttestation} returns this
 */
proto.teleport.devicetrust.v1.TPMPlatformAttestation.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional TPMPlatformParameters platform_parameters = 2;
 * @return {?proto.teleport.devicetrust.v1.TPMPlatformParameters}
 */
proto.teleport.devicetrust.v1.TPMPlatformAttestation.prototype.getPlatformParameters = function() {
  return /** @type{?proto.teleport.devicetrust.v1.TPMPlatformParameters} */ (
    jspb.Message.getWrapperField(this, proto.teleport.devicetrust.v1.TPMPlatformParameters, 2));
};


/**
 * @param {?proto.teleport.devicetrust.v1.TPMPlatformParameters|undefined} value
 * @return {!proto.teleport.devicetrust.v1.TPMPlatformAttestation} returns this
*/
proto.teleport.devicetrust.v1.TPMPlatformAttestation.prototype.setPlatformParameters = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teleport.devicetrust.v1.TPMPlatformAttestation} returns this
 */
proto.teleport.devicetrust.v1.TPMPlatformAttestation.prototype.clearPlatformParameters = function() {
  return this.setPlatformParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teleport.devicetrust.v1.TPMPlatformAttestation.prototype.hasPlatformParameters = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.teleport.devicetrust.v1);
