// source: teleport/lib/teleterm/v1/gateway.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.teleport.lib.teleterm.v1.Gateway', null, global);
goog.exportSymbol('proto.teleport.lib.teleterm.v1.GatewayCLICommand', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teleport.lib.teleterm.v1.Gateway = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teleport.lib.teleterm.v1.Gateway, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teleport.lib.teleterm.v1.Gateway.displayName = 'proto.teleport.lib.teleterm.v1.Gateway';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.teleport.lib.teleterm.v1.GatewayCLICommand.repeatedFields_, null);
};
goog.inherits(proto.teleport.lib.teleterm.v1.GatewayCLICommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teleport.lib.teleterm.v1.GatewayCLICommand.displayName = 'proto.teleport.lib.teleterm.v1.GatewayCLICommand';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.toObject = function(opt_includeInstance) {
  return proto.teleport.lib.teleterm.v1.Gateway.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teleport.lib.teleterm.v1.Gateway} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.lib.teleterm.v1.Gateway.toObject = function(includeInstance, msg) {
  var f, obj = {
    uri: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targetName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    targetUri: jspb.Message.getFieldWithDefault(msg, 3, ""),
    targetUser: jspb.Message.getFieldWithDefault(msg, 4, ""),
    localAddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    localPort: jspb.Message.getFieldWithDefault(msg, 6, ""),
    protocol: jspb.Message.getFieldWithDefault(msg, 7, ""),
    targetSubresourceName: jspb.Message.getFieldWithDefault(msg, 9, ""),
    gatewayCliCommand: (f = msg.getGatewayCliCommand()) && proto.teleport.lib.teleterm.v1.GatewayCLICommand.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teleport.lib.teleterm.v1.Gateway}
 */
proto.teleport.lib.teleterm.v1.Gateway.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teleport.lib.teleterm.v1.Gateway;
  return proto.teleport.lib.teleterm.v1.Gateway.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teleport.lib.teleterm.v1.Gateway} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teleport.lib.teleterm.v1.Gateway}
 */
proto.teleport.lib.teleterm.v1.Gateway.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetUri(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetUser(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalAddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalPort(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocol(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetSubresourceName(value);
      break;
    case 10:
      var value = new proto.teleport.lib.teleterm.v1.GatewayCLICommand;
      reader.readMessage(value,proto.teleport.lib.teleterm.v1.GatewayCLICommand.deserializeBinaryFromReader);
      msg.setGatewayCliCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teleport.lib.teleterm.v1.Gateway.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teleport.lib.teleterm.v1.Gateway} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.lib.teleterm.v1.Gateway.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargetName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTargetUri();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTargetUser();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLocalAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLocalPort();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getProtocol();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTargetSubresourceName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getGatewayCliCommand();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.teleport.lib.teleterm.v1.GatewayCLICommand.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uri = 1;
 * @return {string}
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.lib.teleterm.v1.Gateway} returns this
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.setUri = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string target_name = 2;
 * @return {string}
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.getTargetName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.lib.teleterm.v1.Gateway} returns this
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.setTargetName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string target_uri = 3;
 * @return {string}
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.getTargetUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.lib.teleterm.v1.Gateway} returns this
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.setTargetUri = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string target_user = 4;
 * @return {string}
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.getTargetUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.lib.teleterm.v1.Gateway} returns this
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.setTargetUser = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string local_address = 5;
 * @return {string}
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.getLocalAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.lib.teleterm.v1.Gateway} returns this
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.setLocalAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string local_port = 6;
 * @return {string}
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.getLocalPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.lib.teleterm.v1.Gateway} returns this
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.setLocalPort = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string protocol = 7;
 * @return {string}
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.lib.teleterm.v1.Gateway} returns this
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string target_subresource_name = 9;
 * @return {string}
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.getTargetSubresourceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.lib.teleterm.v1.Gateway} returns this
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.setTargetSubresourceName = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional GatewayCLICommand gateway_cli_command = 10;
 * @return {?proto.teleport.lib.teleterm.v1.GatewayCLICommand}
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.getGatewayCliCommand = function() {
  return /** @type{?proto.teleport.lib.teleterm.v1.GatewayCLICommand} */ (
    jspb.Message.getWrapperField(this, proto.teleport.lib.teleterm.v1.GatewayCLICommand, 10));
};


/**
 * @param {?proto.teleport.lib.teleterm.v1.GatewayCLICommand|undefined} value
 * @return {!proto.teleport.lib.teleterm.v1.Gateway} returns this
*/
proto.teleport.lib.teleterm.v1.Gateway.prototype.setGatewayCliCommand = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teleport.lib.teleterm.v1.Gateway} returns this
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.clearGatewayCliCommand = function() {
  return this.setGatewayCliCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teleport.lib.teleterm.v1.Gateway.prototype.hasGatewayCliCommand = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.prototype.toObject = function(opt_includeInstance) {
  return proto.teleport.lib.teleterm.v1.GatewayCLICommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teleport.lib.teleterm.v1.GatewayCLICommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    argsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    envList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    preview: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teleport.lib.teleterm.v1.GatewayCLICommand}
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teleport.lib.teleterm.v1.GatewayCLICommand;
  return proto.teleport.lib.teleterm.v1.GatewayCLICommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teleport.lib.teleterm.v1.GatewayCLICommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teleport.lib.teleterm.v1.GatewayCLICommand}
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addEnv(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreview(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teleport.lib.teleterm.v1.GatewayCLICommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teleport.lib.teleterm.v1.GatewayCLICommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getEnvList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getPreview();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.lib.teleterm.v1.GatewayCLICommand} returns this
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string args = 2;
 * @return {!Array<string>}
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.teleport.lib.teleterm.v1.GatewayCLICommand} returns this
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.prototype.setArgsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.teleport.lib.teleterm.v1.GatewayCLICommand} returns this
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.prototype.addArgs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.teleport.lib.teleterm.v1.GatewayCLICommand} returns this
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * repeated string env = 3;
 * @return {!Array<string>}
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.prototype.getEnvList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.teleport.lib.teleterm.v1.GatewayCLICommand} returns this
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.prototype.setEnvList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.teleport.lib.teleterm.v1.GatewayCLICommand} returns this
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.prototype.addEnv = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.teleport.lib.teleterm.v1.GatewayCLICommand} returns this
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.prototype.clearEnvList = function() {
  return this.setEnvList([]);
};


/**
 * optional string preview = 4;
 * @return {string}
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.prototype.getPreview = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.lib.teleterm.v1.GatewayCLICommand} returns this
 */
proto.teleport.lib.teleterm.v1.GatewayCLICommand.prototype.setPreview = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.teleport.lib.teleterm.v1);
