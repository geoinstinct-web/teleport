// Copyright 2021 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.lib.teleterm.v1;

option go_package = "github.com/gravitational/teleport/gen/proto/go/teleport/lib/teleterm/v1;teletermv1";

// Gateway is Teleterm's name for a connection to a resource like a database or a web app
// established through our ALPN proxy.
//
// The term "gateway" is used to avoid using the term "proxy" itself which could be confusing as
// "proxy" means a couple of different things depending on the context. But for Teleterm, a gateway
// is always an ALPN proxy connection.
//
// See RFD 39 for more info on ALPN.
message Gateway {
  // uri is the gateway uri
  string uri = 1;
  // target_name is the target resource name
  string target_name = 2;
  // target_uri is the target uri
  string target_uri = 3;
  // target_user is the target user
  string target_user = 4;
  // local_address is the gateway address on localhost
  string local_address = 5;
  // local_port is the gateway address on localhost
  string local_port = 6;
  // protocol is the gateway protocol
  string protocol = 7;
  reserved 8;
  reserved "cli_command";
  // target_subresource_name points at a subresource of the remote resource, for example a
  // database name on a database server.
  string target_subresource_name = 9;
  // gateway_cli_client represents a command that the user can execute to connect to the resource
  // through the gateway.
  //
  // Instead of generating those commands in in the frontend code, they are returned from the tsh
  // daemon. This means that the Database Access team can add support for a new protocol and
  // Connect will support it right away with no extra changes.
  GatewayCLICommand gateway_cli_command = 10;
}

// GatewayCLICommand represents a command that the user can execute to connect to the gateway
// resource. It is a direct translation of os.exec.Cmd.
message GatewayCLICommand {
  string path = 1;
  repeated string args = 2;
  repeated string env = 3;
  // preview is used to show the user what command will be executed before they decide to run it.
  // It's like os.exec.Cmd.String with two exceptions:
  //
  // 1) It is prepended with Cmd.Env.
  // 2) The command name is relative and not absolute.
  string preview = 4;
}
