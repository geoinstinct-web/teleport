// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package accessgraph.v1alpha;

import "teleport/legacy/client/proto/event.proto";
import "teleport/legacy/types/types.proto";

option go_package = "github.com/gravitational/teleport/gen/proto/go/accessgraph/v1alpha;accessgraphv1alpha";

// AccessGraphService is a service for interacting the access graph service.
service AccessGraphService {
  // Query queries the access graph.
  // Currently only used by WebUI.
  rpc Query(QueryRequest) returns (QueryResponse);
  // GetFile gets a static UI file from the access graph container.
  rpc GetFile(GetFileRequest) returns (GetFileResponse);

  // SendEvent sends an event to the access graph service.
  rpc SendEvent(SendEventRequest) returns (SendEventResponse);

  // SendResource sends a resource to the access graph service.
  rpc SendResource(SendResourceRequest) returns (SendResourceResponse);
}

// Node is a node in the access graph.
message Node {
  // ID is the unique ID of the node.
  string id = 1;
  // Kind is the kind of the node, ex: "user", "user_group", "resource", etc.
  string kind = 2;
  // SubKind is the subkind of the node.
  string sub_kind = 3;
  // Name is the name of the node.
  string name = 4;
  // Labels is a set of labels for the resource.
  map<string, string> labels = 5;
  // Hostname is the hostname of the node.
  string hostname = 6;
  // Properties is a set of properties for the resource.
  map<string, string> properties = 7;
}

// Edge is an edge in the access graph.
message Edge {
  // from is the ID of the node the edge is from.
  string from = 1;
  // to is the ID of the node the edge is to.
  string to = 2;
  // type is the type of the edge, e.g. "member_of", "belongs_to", etc.
  string type = 3;
}

// QueryRequest is a request to query the access graph.
message QueryRequest {
  // query is a SQL query.
  string query = 1;
}

// QueryResponse is a response to a query.
message QueryResponse {
  repeated Node nodes = 1;
  repeated Edge edges = 2;
}

// GetFileRequest is a request to get a file.
message GetFileRequest {
  string filepath = 1;
}

// GetFileResponse is a response to a file request.
message GetFileResponse {
  bytes data = 1;
}

// SendEventRequest is a request to send an event to the access graph.
message SendEventRequest {
  proto.Event event = 1;
}

// SendEventResponse is a response to sending an event.
message SendEventResponse {
  // cache_initialized is true if the cache has been initialized.
  // When false, the sender should send all resources to the access graph using SendResource.
  bool cache_initialized = 1;
}

// SendResourceRequest is a request to send a resource to the access graph.
message SendResourceRequest {
  // resource contains the updated resource
  oneof resource {
    SendResourceEnd end = 1;
    // ResourceHeader is specified in delete events,
    // the full object is not available, so resource
    // header is used to provide information about object type
    types.ResourceHeader resource_header = 2;
    // User is a user resource
    types.UserV2 user = 3;
    // Role is a role resource
    types.RoleV6 role = 4;
    // Server is a node or proxy resource
    types.ServerV2 server = 5;
    // AccessRequest is a resource for access requests
    types.AccessRequestV3 access_request = 6;
  }
}

// SendResourceEnd is a marker for the end of a resource stream.
message SendResourceEnd {}

// SendResourceResponse is a response to sending a resource.
message SendResourceResponse {}
