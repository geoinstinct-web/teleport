// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package accessgraph.v1alpha;

import "google/protobuf/empty.proto";
import "teleport/legacy/types/types.proto";

option go_package = "github.com/gravitational/teleport/gen/proto/go/accessgraph/v1alpha;accessgraphv1alpha";

// AccessGraphService is a service for interacting the access graph service.
service AccessGraphService {
  // Query queries the access graph.
  // Currently only used by WebUI.
  rpc Query(QueryRequest) returns (QueryResponse);
  // GetFile gets a static UI file from the access graph container.
  rpc GetFile(GetFileRequest) returns (GetFileResponse);

  // EventsStream is a stream of commands to the access graph service.
  // Teleport Auth server creates a stream to the access graph service
  // and pushes all resources and following events to it.
  // This stream is used to sync the access graph with the Teleport database state.
  // Once Teleport finishes syncing the current state, it sends a sync command
  // to the access graph service and resumes sending events.
  rpc EventsStream(stream EventsStreamRequest) returns (EventsStreamResponse);
}

// Node is a node in the access graph.
message Node {
  string id = 1;
  string kind = 2;
  string sub_kind = 3;
  string name = 4;
  map<string, string> labels = 5;
  string hostname = 6;
  map<string, string> properties = 7;
}

// Edge is an edge in the access graph.
message Edge {
  string from = 1;
  string to = 2;
  string type = 3;
}

// QueryRequest is a request to query the access graph.
message QueryRequest {
  // query is a SQL query.
  string query = 1;
}

// QueryResponse is a response to a query.
message QueryResponse {
  repeated Node nodes = 1;
  repeated Edge edges = 2;
}

// GetFileRequest is a request to get a file.
message GetFileRequest {
  string filepath = 1;
}

// GetFileResponse is a response to a file request.
message GetFileResponse {
  bytes data = 1;
}

// ResourceList is a list of resources to send to the access graph.
message ResourceList {
  repeated ResourceEntry resources = 1;
}

// ResourceEntry is a wrapper for the supported resource types.
message ResourceEntry {
  oneof resource {
    // User is a user resource
    types.UserV2 user = 1;
    // Role is a role resource
    types.RoleV6 role = 2;
    // Server is a node or proxy resource
    types.ServerV2 server = 3;
    // AccessRequest is a resource for access requests
    types.AccessRequestV3 access_request = 4;
  }
}

// EventsStreamRequest is a request to send commands to the access graph.
// This command is used to sync the access graph with the Teleport database state.
message EventsStreamRequest {
  // operation contains the desired operation
  oneof operation {
    // sync is a command to sync the access graph with the Teleport database state.
    // it's issued once Teleport finishes syncing all resources with the database.
    google.protobuf.Empty sync = 1;
    // upsert is a command to put a resource into the access graph or update it.
    ResourceList upsert = 2;
    // delete is a command to delete a resource from the access graph when it's deleted from Teleport.
    types.ResourceHeader delete = 3;
  }
}

// EventsStreamResponse is an empty response from EventsStream endpoint.
message EventsStreamResponse {}
