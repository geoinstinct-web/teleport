// source: v1/usage_events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent', null, global);
goog.exportSymbol('proto.teleport.terminal.v1.AccessRequestCreateEvent', null, global);
goog.exportSymbol('proto.teleport.terminal.v1.AccessRequestReviewEvent', null, global);
goog.exportSymbol('proto.teleport.terminal.v1.ClusterProperties', null, global);
goog.exportSymbol('proto.teleport.terminal.v1.ConnectUsageEventOneOf', null, global);
goog.exportSymbol('proto.teleport.terminal.v1.ConnectUsageEventOneOf.EventCase', null, global);
goog.exportSymbol('proto.teleport.terminal.v1.EventReportedResponse', null, global);
goog.exportSymbol('proto.teleport.terminal.v1.FileTransferRunEvent', null, global);
goog.exportSymbol('proto.teleport.terminal.v1.LoginEvent', null, global);
goog.exportSymbol('proto.teleport.terminal.v1.ProtocolRunEvent', null, global);
goog.exportSymbol('proto.teleport.terminal.v1.ReportEventRequest', null, global);
goog.exportSymbol('proto.teleport.terminal.v1.UserJobRoleUpdateEvent', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teleport.terminal.v1.ReportEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teleport.terminal.v1.ReportEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teleport.terminal.v1.ReportEventRequest.displayName = 'proto.teleport.terminal.v1.ReportEventRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teleport.terminal.v1.EventReportedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teleport.terminal.v1.EventReportedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teleport.terminal.v1.EventReportedResponse.displayName = 'proto.teleport.terminal.v1.EventReportedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teleport.terminal.v1.ClusterProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teleport.terminal.v1.ClusterProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teleport.terminal.v1.ClusterProperties.displayName = 'proto.teleport.terminal.v1.ClusterProperties';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teleport.terminal.v1.LoginEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teleport.terminal.v1.LoginEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teleport.terminal.v1.LoginEvent.displayName = 'proto.teleport.terminal.v1.LoginEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teleport.terminal.v1.ProtocolRunEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teleport.terminal.v1.ProtocolRunEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teleport.terminal.v1.ProtocolRunEvent.displayName = 'proto.teleport.terminal.v1.ProtocolRunEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teleport.terminal.v1.AccessRequestCreateEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teleport.terminal.v1.AccessRequestCreateEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teleport.terminal.v1.AccessRequestCreateEvent.displayName = 'proto.teleport.terminal.v1.AccessRequestCreateEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teleport.terminal.v1.AccessRequestReviewEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teleport.terminal.v1.AccessRequestReviewEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teleport.terminal.v1.AccessRequestReviewEvent.displayName = 'proto.teleport.terminal.v1.AccessRequestReviewEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent.displayName = 'proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teleport.terminal.v1.FileTransferRunEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teleport.terminal.v1.FileTransferRunEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teleport.terminal.v1.FileTransferRunEvent.displayName = 'proto.teleport.terminal.v1.FileTransferRunEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teleport.terminal.v1.UserJobRoleUpdateEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.teleport.terminal.v1.UserJobRoleUpdateEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teleport.terminal.v1.UserJobRoleUpdateEvent.displayName = 'proto.teleport.terminal.v1.UserJobRoleUpdateEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.teleport.terminal.v1.ConnectUsageEventOneOf.oneofGroups_);
};
goog.inherits(proto.teleport.terminal.v1.ConnectUsageEventOneOf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.teleport.terminal.v1.ConnectUsageEventOneOf.displayName = 'proto.teleport.terminal.v1.ConnectUsageEventOneOf';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teleport.terminal.v1.ReportEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.teleport.terminal.v1.ReportEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teleport.terminal.v1.ReportEventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.ReportEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    distinctId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && proto.teleport.terminal.v1.ConnectUsageEventOneOf.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teleport.terminal.v1.ReportEventRequest}
 */
proto.teleport.terminal.v1.ReportEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teleport.terminal.v1.ReportEventRequest;
  return proto.teleport.terminal.v1.ReportEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teleport.terminal.v1.ReportEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teleport.terminal.v1.ReportEventRequest}
 */
proto.teleport.terminal.v1.ReportEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDistinctId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 3:
      var value = new proto.teleport.terminal.v1.ConnectUsageEventOneOf;
      reader.readMessage(value,proto.teleport.terminal.v1.ConnectUsageEventOneOf.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teleport.terminal.v1.ReportEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teleport.terminal.v1.ReportEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teleport.terminal.v1.ReportEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.ReportEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDistinctId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.teleport.terminal.v1.ConnectUsageEventOneOf.serializeBinaryToWriter
    );
  }
};


/**
 * optional string distinct_id = 1;
 * @return {string}
 */
proto.teleport.terminal.v1.ReportEventRequest.prototype.getDistinctId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.terminal.v1.ReportEventRequest} returns this
 */
proto.teleport.terminal.v1.ReportEventRequest.prototype.setDistinctId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.teleport.terminal.v1.ReportEventRequest.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.teleport.terminal.v1.ReportEventRequest} returns this
*/
proto.teleport.terminal.v1.ReportEventRequest.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teleport.terminal.v1.ReportEventRequest} returns this
 */
proto.teleport.terminal.v1.ReportEventRequest.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teleport.terminal.v1.ReportEventRequest.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ConnectUsageEventOneOf event = 3;
 * @return {?proto.teleport.terminal.v1.ConnectUsageEventOneOf}
 */
proto.teleport.terminal.v1.ReportEventRequest.prototype.getEvent = function() {
  return /** @type{?proto.teleport.terminal.v1.ConnectUsageEventOneOf} */ (
    jspb.Message.getWrapperField(this, proto.teleport.terminal.v1.ConnectUsageEventOneOf, 3));
};


/**
 * @param {?proto.teleport.terminal.v1.ConnectUsageEventOneOf|undefined} value
 * @return {!proto.teleport.terminal.v1.ReportEventRequest} returns this
*/
proto.teleport.terminal.v1.ReportEventRequest.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teleport.terminal.v1.ReportEventRequest} returns this
 */
proto.teleport.terminal.v1.ReportEventRequest.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teleport.terminal.v1.ReportEventRequest.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teleport.terminal.v1.EventReportedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.teleport.terminal.v1.EventReportedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teleport.terminal.v1.EventReportedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.EventReportedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teleport.terminal.v1.EventReportedResponse}
 */
proto.teleport.terminal.v1.EventReportedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teleport.terminal.v1.EventReportedResponse;
  return proto.teleport.terminal.v1.EventReportedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teleport.terminal.v1.EventReportedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teleport.terminal.v1.EventReportedResponse}
 */
proto.teleport.terminal.v1.EventReportedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teleport.terminal.v1.EventReportedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teleport.terminal.v1.EventReportedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teleport.terminal.v1.EventReportedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.EventReportedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teleport.terminal.v1.ClusterProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.teleport.terminal.v1.ClusterProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teleport.terminal.v1.ClusterProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.ClusterProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    authClusterId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clusterName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teleport.terminal.v1.ClusterProperties}
 */
proto.teleport.terminal.v1.ClusterProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teleport.terminal.v1.ClusterProperties;
  return proto.teleport.terminal.v1.ClusterProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teleport.terminal.v1.ClusterProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teleport.terminal.v1.ClusterProperties}
 */
proto.teleport.terminal.v1.ClusterProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthClusterId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClusterName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teleport.terminal.v1.ClusterProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teleport.terminal.v1.ClusterProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teleport.terminal.v1.ClusterProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.ClusterProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthClusterId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClusterName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string auth_cluster_id = 1;
 * @return {string}
 */
proto.teleport.terminal.v1.ClusterProperties.prototype.getAuthClusterId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.terminal.v1.ClusterProperties} returns this
 */
proto.teleport.terminal.v1.ClusterProperties.prototype.setAuthClusterId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cluster_name = 2;
 * @return {string}
 */
proto.teleport.terminal.v1.ClusterProperties.prototype.getClusterName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.terminal.v1.ClusterProperties} returns this
 */
proto.teleport.terminal.v1.ClusterProperties.prototype.setClusterName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_name = 3;
 * @return {string}
 */
proto.teleport.terminal.v1.ClusterProperties.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.terminal.v1.ClusterProperties} returns this
 */
proto.teleport.terminal.v1.ClusterProperties.prototype.setUserName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teleport.terminal.v1.LoginEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.teleport.terminal.v1.LoginEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teleport.terminal.v1.LoginEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.LoginEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterProperties: (f = msg.getClusterProperties()) && proto.teleport.terminal.v1.ClusterProperties.toObject(includeInstance, f),
    arch: jspb.Message.getFieldWithDefault(msg, 2, ""),
    os: jspb.Message.getFieldWithDefault(msg, 3, ""),
    osVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    connectVersion: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teleport.terminal.v1.LoginEvent}
 */
proto.teleport.terminal.v1.LoginEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teleport.terminal.v1.LoginEvent;
  return proto.teleport.terminal.v1.LoginEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teleport.terminal.v1.LoginEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teleport.terminal.v1.LoginEvent}
 */
proto.teleport.terminal.v1.LoginEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.teleport.terminal.v1.ClusterProperties;
      reader.readMessage(value,proto.teleport.terminal.v1.ClusterProperties.deserializeBinaryFromReader);
      msg.setClusterProperties(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setArch(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOs(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOsVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teleport.terminal.v1.LoginEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teleport.terminal.v1.LoginEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teleport.terminal.v1.LoginEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.LoginEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterProperties();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.teleport.terminal.v1.ClusterProperties.serializeBinaryToWriter
    );
  }
  f = message.getArch();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOs();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOsVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getConnectVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional ClusterProperties cluster_properties = 1;
 * @return {?proto.teleport.terminal.v1.ClusterProperties}
 */
proto.teleport.terminal.v1.LoginEvent.prototype.getClusterProperties = function() {
  return /** @type{?proto.teleport.terminal.v1.ClusterProperties} */ (
    jspb.Message.getWrapperField(this, proto.teleport.terminal.v1.ClusterProperties, 1));
};


/**
 * @param {?proto.teleport.terminal.v1.ClusterProperties|undefined} value
 * @return {!proto.teleport.terminal.v1.LoginEvent} returns this
*/
proto.teleport.terminal.v1.LoginEvent.prototype.setClusterProperties = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teleport.terminal.v1.LoginEvent} returns this
 */
proto.teleport.terminal.v1.LoginEvent.prototype.clearClusterProperties = function() {
  return this.setClusterProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teleport.terminal.v1.LoginEvent.prototype.hasClusterProperties = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string arch = 2;
 * @return {string}
 */
proto.teleport.terminal.v1.LoginEvent.prototype.getArch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.terminal.v1.LoginEvent} returns this
 */
proto.teleport.terminal.v1.LoginEvent.prototype.setArch = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string os = 3;
 * @return {string}
 */
proto.teleport.terminal.v1.LoginEvent.prototype.getOs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.terminal.v1.LoginEvent} returns this
 */
proto.teleport.terminal.v1.LoginEvent.prototype.setOs = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string os_version = 4;
 * @return {string}
 */
proto.teleport.terminal.v1.LoginEvent.prototype.getOsVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.terminal.v1.LoginEvent} returns this
 */
proto.teleport.terminal.v1.LoginEvent.prototype.setOsVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string connect_version = 5;
 * @return {string}
 */
proto.teleport.terminal.v1.LoginEvent.prototype.getConnectVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.terminal.v1.LoginEvent} returns this
 */
proto.teleport.terminal.v1.LoginEvent.prototype.setConnectVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teleport.terminal.v1.ProtocolRunEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.teleport.terminal.v1.ProtocolRunEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teleport.terminal.v1.ProtocolRunEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.ProtocolRunEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterProperties: (f = msg.getClusterProperties()) && proto.teleport.terminal.v1.ClusterProperties.toObject(includeInstance, f),
    protocol: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teleport.terminal.v1.ProtocolRunEvent}
 */
proto.teleport.terminal.v1.ProtocolRunEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teleport.terminal.v1.ProtocolRunEvent;
  return proto.teleport.terminal.v1.ProtocolRunEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teleport.terminal.v1.ProtocolRunEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teleport.terminal.v1.ProtocolRunEvent}
 */
proto.teleport.terminal.v1.ProtocolRunEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.teleport.terminal.v1.ClusterProperties;
      reader.readMessage(value,proto.teleport.terminal.v1.ClusterProperties.deserializeBinaryFromReader);
      msg.setClusterProperties(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teleport.terminal.v1.ProtocolRunEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teleport.terminal.v1.ProtocolRunEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teleport.terminal.v1.ProtocolRunEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.ProtocolRunEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterProperties();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.teleport.terminal.v1.ClusterProperties.serializeBinaryToWriter
    );
  }
  f = message.getProtocol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ClusterProperties cluster_properties = 1;
 * @return {?proto.teleport.terminal.v1.ClusterProperties}
 */
proto.teleport.terminal.v1.ProtocolRunEvent.prototype.getClusterProperties = function() {
  return /** @type{?proto.teleport.terminal.v1.ClusterProperties} */ (
    jspb.Message.getWrapperField(this, proto.teleport.terminal.v1.ClusterProperties, 1));
};


/**
 * @param {?proto.teleport.terminal.v1.ClusterProperties|undefined} value
 * @return {!proto.teleport.terminal.v1.ProtocolRunEvent} returns this
*/
proto.teleport.terminal.v1.ProtocolRunEvent.prototype.setClusterProperties = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teleport.terminal.v1.ProtocolRunEvent} returns this
 */
proto.teleport.terminal.v1.ProtocolRunEvent.prototype.clearClusterProperties = function() {
  return this.setClusterProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teleport.terminal.v1.ProtocolRunEvent.prototype.hasClusterProperties = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string protocol = 2;
 * @return {string}
 */
proto.teleport.terminal.v1.ProtocolRunEvent.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.terminal.v1.ProtocolRunEvent} returns this
 */
proto.teleport.terminal.v1.ProtocolRunEvent.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teleport.terminal.v1.AccessRequestCreateEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.teleport.terminal.v1.AccessRequestCreateEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teleport.terminal.v1.AccessRequestCreateEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.AccessRequestCreateEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterProperties: (f = msg.getClusterProperties()) && proto.teleport.terminal.v1.ClusterProperties.toObject(includeInstance, f),
    kind: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teleport.terminal.v1.AccessRequestCreateEvent}
 */
proto.teleport.terminal.v1.AccessRequestCreateEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teleport.terminal.v1.AccessRequestCreateEvent;
  return proto.teleport.terminal.v1.AccessRequestCreateEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teleport.terminal.v1.AccessRequestCreateEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teleport.terminal.v1.AccessRequestCreateEvent}
 */
proto.teleport.terminal.v1.AccessRequestCreateEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.teleport.terminal.v1.ClusterProperties;
      reader.readMessage(value,proto.teleport.terminal.v1.ClusterProperties.deserializeBinaryFromReader);
      msg.setClusterProperties(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teleport.terminal.v1.AccessRequestCreateEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teleport.terminal.v1.AccessRequestCreateEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teleport.terminal.v1.AccessRequestCreateEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.AccessRequestCreateEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterProperties();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.teleport.terminal.v1.ClusterProperties.serializeBinaryToWriter
    );
  }
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ClusterProperties cluster_properties = 1;
 * @return {?proto.teleport.terminal.v1.ClusterProperties}
 */
proto.teleport.terminal.v1.AccessRequestCreateEvent.prototype.getClusterProperties = function() {
  return /** @type{?proto.teleport.terminal.v1.ClusterProperties} */ (
    jspb.Message.getWrapperField(this, proto.teleport.terminal.v1.ClusterProperties, 1));
};


/**
 * @param {?proto.teleport.terminal.v1.ClusterProperties|undefined} value
 * @return {!proto.teleport.terminal.v1.AccessRequestCreateEvent} returns this
*/
proto.teleport.terminal.v1.AccessRequestCreateEvent.prototype.setClusterProperties = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teleport.terminal.v1.AccessRequestCreateEvent} returns this
 */
proto.teleport.terminal.v1.AccessRequestCreateEvent.prototype.clearClusterProperties = function() {
  return this.setClusterProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teleport.terminal.v1.AccessRequestCreateEvent.prototype.hasClusterProperties = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string kind = 2;
 * @return {string}
 */
proto.teleport.terminal.v1.AccessRequestCreateEvent.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.terminal.v1.AccessRequestCreateEvent} returns this
 */
proto.teleport.terminal.v1.AccessRequestCreateEvent.prototype.setKind = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teleport.terminal.v1.AccessRequestReviewEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.teleport.terminal.v1.AccessRequestReviewEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teleport.terminal.v1.AccessRequestReviewEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.AccessRequestReviewEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterProperties: (f = msg.getClusterProperties()) && proto.teleport.terminal.v1.ClusterProperties.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teleport.terminal.v1.AccessRequestReviewEvent}
 */
proto.teleport.terminal.v1.AccessRequestReviewEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teleport.terminal.v1.AccessRequestReviewEvent;
  return proto.teleport.terminal.v1.AccessRequestReviewEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teleport.terminal.v1.AccessRequestReviewEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teleport.terminal.v1.AccessRequestReviewEvent}
 */
proto.teleport.terminal.v1.AccessRequestReviewEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.teleport.terminal.v1.ClusterProperties;
      reader.readMessage(value,proto.teleport.terminal.v1.ClusterProperties.deserializeBinaryFromReader);
      msg.setClusterProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teleport.terminal.v1.AccessRequestReviewEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teleport.terminal.v1.AccessRequestReviewEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teleport.terminal.v1.AccessRequestReviewEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.AccessRequestReviewEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterProperties();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.teleport.terminal.v1.ClusterProperties.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClusterProperties cluster_properties = 1;
 * @return {?proto.teleport.terminal.v1.ClusterProperties}
 */
proto.teleport.terminal.v1.AccessRequestReviewEvent.prototype.getClusterProperties = function() {
  return /** @type{?proto.teleport.terminal.v1.ClusterProperties} */ (
    jspb.Message.getWrapperField(this, proto.teleport.terminal.v1.ClusterProperties, 1));
};


/**
 * @param {?proto.teleport.terminal.v1.ClusterProperties|undefined} value
 * @return {!proto.teleport.terminal.v1.AccessRequestReviewEvent} returns this
*/
proto.teleport.terminal.v1.AccessRequestReviewEvent.prototype.setClusterProperties = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teleport.terminal.v1.AccessRequestReviewEvent} returns this
 */
proto.teleport.terminal.v1.AccessRequestReviewEvent.prototype.clearClusterProperties = function() {
  return this.setClusterProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teleport.terminal.v1.AccessRequestReviewEvent.prototype.hasClusterProperties = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterProperties: (f = msg.getClusterProperties()) && proto.teleport.terminal.v1.ClusterProperties.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent}
 */
proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent;
  return proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent}
 */
proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.teleport.terminal.v1.ClusterProperties;
      reader.readMessage(value,proto.teleport.terminal.v1.ClusterProperties.deserializeBinaryFromReader);
      msg.setClusterProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterProperties();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.teleport.terminal.v1.ClusterProperties.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClusterProperties cluster_properties = 1;
 * @return {?proto.teleport.terminal.v1.ClusterProperties}
 */
proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent.prototype.getClusterProperties = function() {
  return /** @type{?proto.teleport.terminal.v1.ClusterProperties} */ (
    jspb.Message.getWrapperField(this, proto.teleport.terminal.v1.ClusterProperties, 1));
};


/**
 * @param {?proto.teleport.terminal.v1.ClusterProperties|undefined} value
 * @return {!proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent} returns this
*/
proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent.prototype.setClusterProperties = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent} returns this
 */
proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent.prototype.clearClusterProperties = function() {
  return this.setClusterProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent.prototype.hasClusterProperties = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teleport.terminal.v1.FileTransferRunEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.teleport.terminal.v1.FileTransferRunEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teleport.terminal.v1.FileTransferRunEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.FileTransferRunEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterProperties: (f = msg.getClusterProperties()) && proto.teleport.terminal.v1.ClusterProperties.toObject(includeInstance, f),
    direction: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teleport.terminal.v1.FileTransferRunEvent}
 */
proto.teleport.terminal.v1.FileTransferRunEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teleport.terminal.v1.FileTransferRunEvent;
  return proto.teleport.terminal.v1.FileTransferRunEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teleport.terminal.v1.FileTransferRunEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teleport.terminal.v1.FileTransferRunEvent}
 */
proto.teleport.terminal.v1.FileTransferRunEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.teleport.terminal.v1.ClusterProperties;
      reader.readMessage(value,proto.teleport.terminal.v1.ClusterProperties.deserializeBinaryFromReader);
      msg.setClusterProperties(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teleport.terminal.v1.FileTransferRunEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teleport.terminal.v1.FileTransferRunEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teleport.terminal.v1.FileTransferRunEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.FileTransferRunEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterProperties();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.teleport.terminal.v1.ClusterProperties.serializeBinaryToWriter
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ClusterProperties cluster_properties = 1;
 * @return {?proto.teleport.terminal.v1.ClusterProperties}
 */
proto.teleport.terminal.v1.FileTransferRunEvent.prototype.getClusterProperties = function() {
  return /** @type{?proto.teleport.terminal.v1.ClusterProperties} */ (
    jspb.Message.getWrapperField(this, proto.teleport.terminal.v1.ClusterProperties, 1));
};


/**
 * @param {?proto.teleport.terminal.v1.ClusterProperties|undefined} value
 * @return {!proto.teleport.terminal.v1.FileTransferRunEvent} returns this
*/
proto.teleport.terminal.v1.FileTransferRunEvent.prototype.setClusterProperties = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teleport.terminal.v1.FileTransferRunEvent} returns this
 */
proto.teleport.terminal.v1.FileTransferRunEvent.prototype.clearClusterProperties = function() {
  return this.setClusterProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teleport.terminal.v1.FileTransferRunEvent.prototype.hasClusterProperties = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string direction = 2;
 * @return {string}
 */
proto.teleport.terminal.v1.FileTransferRunEvent.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.terminal.v1.FileTransferRunEvent} returns this
 */
proto.teleport.terminal.v1.FileTransferRunEvent.prototype.setDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teleport.terminal.v1.UserJobRoleUpdateEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.teleport.terminal.v1.UserJobRoleUpdateEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teleport.terminal.v1.UserJobRoleUpdateEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.UserJobRoleUpdateEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    jobRole: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teleport.terminal.v1.UserJobRoleUpdateEvent}
 */
proto.teleport.terminal.v1.UserJobRoleUpdateEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teleport.terminal.v1.UserJobRoleUpdateEvent;
  return proto.teleport.terminal.v1.UserJobRoleUpdateEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teleport.terminal.v1.UserJobRoleUpdateEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teleport.terminal.v1.UserJobRoleUpdateEvent}
 */
proto.teleport.terminal.v1.UserJobRoleUpdateEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teleport.terminal.v1.UserJobRoleUpdateEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teleport.terminal.v1.UserJobRoleUpdateEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teleport.terminal.v1.UserJobRoleUpdateEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.UserJobRoleUpdateEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJobRole();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string job_role = 1;
 * @return {string}
 */
proto.teleport.terminal.v1.UserJobRoleUpdateEvent.prototype.getJobRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.teleport.terminal.v1.UserJobRoleUpdateEvent} returns this
 */
proto.teleport.terminal.v1.UserJobRoleUpdateEvent.prototype.setJobRole = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.oneofGroups_ = [[1,2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.EventCase = {
  EVENT_NOT_SET: 0,
  LOGIN_EVENT: 1,
  PROTOCOL_RUN_EVENT: 2,
  ACCESS_REQUEST_CREATE_EVENT: 3,
  ACCESS_REQUEST_REVIEW_EVENT: 4,
  ACCESS_REQUEST_ASSUME_ROLE_EVENT: 5,
  FILE_TRANSFER_RUN_EVENT: 6,
  USER_JOB_ROLE_UPDATE_EVENT: 7
};

/**
 * @return {proto.teleport.terminal.v1.ConnectUsageEventOneOf.EventCase}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.getEventCase = function() {
  return /** @type {proto.teleport.terminal.v1.ConnectUsageEventOneOf.EventCase} */(jspb.Message.computeOneofCase(this, proto.teleport.terminal.v1.ConnectUsageEventOneOf.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.toObject = function(opt_includeInstance) {
  return proto.teleport.terminal.v1.ConnectUsageEventOneOf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.teleport.terminal.v1.ConnectUsageEventOneOf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.toObject = function(includeInstance, msg) {
  var f, obj = {
    loginEvent: (f = msg.getLoginEvent()) && proto.teleport.terminal.v1.LoginEvent.toObject(includeInstance, f),
    protocolRunEvent: (f = msg.getProtocolRunEvent()) && proto.teleport.terminal.v1.ProtocolRunEvent.toObject(includeInstance, f),
    accessRequestCreateEvent: (f = msg.getAccessRequestCreateEvent()) && proto.teleport.terminal.v1.AccessRequestCreateEvent.toObject(includeInstance, f),
    accessRequestReviewEvent: (f = msg.getAccessRequestReviewEvent()) && proto.teleport.terminal.v1.AccessRequestReviewEvent.toObject(includeInstance, f),
    accessRequestAssumeRoleEvent: (f = msg.getAccessRequestAssumeRoleEvent()) && proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent.toObject(includeInstance, f),
    fileTransferRunEvent: (f = msg.getFileTransferRunEvent()) && proto.teleport.terminal.v1.FileTransferRunEvent.toObject(includeInstance, f),
    userJobRoleUpdateEvent: (f = msg.getUserJobRoleUpdateEvent()) && proto.teleport.terminal.v1.UserJobRoleUpdateEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.teleport.terminal.v1.ConnectUsageEventOneOf}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.teleport.terminal.v1.ConnectUsageEventOneOf;
  return proto.teleport.terminal.v1.ConnectUsageEventOneOf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.teleport.terminal.v1.ConnectUsageEventOneOf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.teleport.terminal.v1.ConnectUsageEventOneOf}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.teleport.terminal.v1.LoginEvent;
      reader.readMessage(value,proto.teleport.terminal.v1.LoginEvent.deserializeBinaryFromReader);
      msg.setLoginEvent(value);
      break;
    case 2:
      var value = new proto.teleport.terminal.v1.ProtocolRunEvent;
      reader.readMessage(value,proto.teleport.terminal.v1.ProtocolRunEvent.deserializeBinaryFromReader);
      msg.setProtocolRunEvent(value);
      break;
    case 3:
      var value = new proto.teleport.terminal.v1.AccessRequestCreateEvent;
      reader.readMessage(value,proto.teleport.terminal.v1.AccessRequestCreateEvent.deserializeBinaryFromReader);
      msg.setAccessRequestCreateEvent(value);
      break;
    case 4:
      var value = new proto.teleport.terminal.v1.AccessRequestReviewEvent;
      reader.readMessage(value,proto.teleport.terminal.v1.AccessRequestReviewEvent.deserializeBinaryFromReader);
      msg.setAccessRequestReviewEvent(value);
      break;
    case 5:
      var value = new proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent;
      reader.readMessage(value,proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent.deserializeBinaryFromReader);
      msg.setAccessRequestAssumeRoleEvent(value);
      break;
    case 6:
      var value = new proto.teleport.terminal.v1.FileTransferRunEvent;
      reader.readMessage(value,proto.teleport.terminal.v1.FileTransferRunEvent.deserializeBinaryFromReader);
      msg.setFileTransferRunEvent(value);
      break;
    case 7:
      var value = new proto.teleport.terminal.v1.UserJobRoleUpdateEvent;
      reader.readMessage(value,proto.teleport.terminal.v1.UserJobRoleUpdateEvent.deserializeBinaryFromReader);
      msg.setUserJobRoleUpdateEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.teleport.terminal.v1.ConnectUsageEventOneOf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.teleport.terminal.v1.ConnectUsageEventOneOf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoginEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.teleport.terminal.v1.LoginEvent.serializeBinaryToWriter
    );
  }
  f = message.getProtocolRunEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.teleport.terminal.v1.ProtocolRunEvent.serializeBinaryToWriter
    );
  }
  f = message.getAccessRequestCreateEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.teleport.terminal.v1.AccessRequestCreateEvent.serializeBinaryToWriter
    );
  }
  f = message.getAccessRequestReviewEvent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.teleport.terminal.v1.AccessRequestReviewEvent.serializeBinaryToWriter
    );
  }
  f = message.getAccessRequestAssumeRoleEvent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent.serializeBinaryToWriter
    );
  }
  f = message.getFileTransferRunEvent();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.teleport.terminal.v1.FileTransferRunEvent.serializeBinaryToWriter
    );
  }
  f = message.getUserJobRoleUpdateEvent();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.teleport.terminal.v1.UserJobRoleUpdateEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional LoginEvent login_event = 1;
 * @return {?proto.teleport.terminal.v1.LoginEvent}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.getLoginEvent = function() {
  return /** @type{?proto.teleport.terminal.v1.LoginEvent} */ (
    jspb.Message.getWrapperField(this, proto.teleport.terminal.v1.LoginEvent, 1));
};


/**
 * @param {?proto.teleport.terminal.v1.LoginEvent|undefined} value
 * @return {!proto.teleport.terminal.v1.ConnectUsageEventOneOf} returns this
*/
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.setLoginEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.teleport.terminal.v1.ConnectUsageEventOneOf.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teleport.terminal.v1.ConnectUsageEventOneOf} returns this
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.clearLoginEvent = function() {
  return this.setLoginEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.hasLoginEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProtocolRunEvent protocol_run_event = 2;
 * @return {?proto.teleport.terminal.v1.ProtocolRunEvent}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.getProtocolRunEvent = function() {
  return /** @type{?proto.teleport.terminal.v1.ProtocolRunEvent} */ (
    jspb.Message.getWrapperField(this, proto.teleport.terminal.v1.ProtocolRunEvent, 2));
};


/**
 * @param {?proto.teleport.terminal.v1.ProtocolRunEvent|undefined} value
 * @return {!proto.teleport.terminal.v1.ConnectUsageEventOneOf} returns this
*/
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.setProtocolRunEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.teleport.terminal.v1.ConnectUsageEventOneOf.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teleport.terminal.v1.ConnectUsageEventOneOf} returns this
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.clearProtocolRunEvent = function() {
  return this.setProtocolRunEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.hasProtocolRunEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AccessRequestCreateEvent access_request_create_event = 3;
 * @return {?proto.teleport.terminal.v1.AccessRequestCreateEvent}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.getAccessRequestCreateEvent = function() {
  return /** @type{?proto.teleport.terminal.v1.AccessRequestCreateEvent} */ (
    jspb.Message.getWrapperField(this, proto.teleport.terminal.v1.AccessRequestCreateEvent, 3));
};


/**
 * @param {?proto.teleport.terminal.v1.AccessRequestCreateEvent|undefined} value
 * @return {!proto.teleport.terminal.v1.ConnectUsageEventOneOf} returns this
*/
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.setAccessRequestCreateEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.teleport.terminal.v1.ConnectUsageEventOneOf.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teleport.terminal.v1.ConnectUsageEventOneOf} returns this
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.clearAccessRequestCreateEvent = function() {
  return this.setAccessRequestCreateEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.hasAccessRequestCreateEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AccessRequestReviewEvent access_request_review_event = 4;
 * @return {?proto.teleport.terminal.v1.AccessRequestReviewEvent}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.getAccessRequestReviewEvent = function() {
  return /** @type{?proto.teleport.terminal.v1.AccessRequestReviewEvent} */ (
    jspb.Message.getWrapperField(this, proto.teleport.terminal.v1.AccessRequestReviewEvent, 4));
};


/**
 * @param {?proto.teleport.terminal.v1.AccessRequestReviewEvent|undefined} value
 * @return {!proto.teleport.terminal.v1.ConnectUsageEventOneOf} returns this
*/
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.setAccessRequestReviewEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.teleport.terminal.v1.ConnectUsageEventOneOf.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teleport.terminal.v1.ConnectUsageEventOneOf} returns this
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.clearAccessRequestReviewEvent = function() {
  return this.setAccessRequestReviewEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.hasAccessRequestReviewEvent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AccessRequestAssumeRoleEvent access_request_assume_role_event = 5;
 * @return {?proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.getAccessRequestAssumeRoleEvent = function() {
  return /** @type{?proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent} */ (
    jspb.Message.getWrapperField(this, proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent, 5));
};


/**
 * @param {?proto.teleport.terminal.v1.AccessRequestAssumeRoleEvent|undefined} value
 * @return {!proto.teleport.terminal.v1.ConnectUsageEventOneOf} returns this
*/
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.setAccessRequestAssumeRoleEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.teleport.terminal.v1.ConnectUsageEventOneOf.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teleport.terminal.v1.ConnectUsageEventOneOf} returns this
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.clearAccessRequestAssumeRoleEvent = function() {
  return this.setAccessRequestAssumeRoleEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.hasAccessRequestAssumeRoleEvent = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FileTransferRunEvent file_transfer_run_event = 6;
 * @return {?proto.teleport.terminal.v1.FileTransferRunEvent}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.getFileTransferRunEvent = function() {
  return /** @type{?proto.teleport.terminal.v1.FileTransferRunEvent} */ (
    jspb.Message.getWrapperField(this, proto.teleport.terminal.v1.FileTransferRunEvent, 6));
};


/**
 * @param {?proto.teleport.terminal.v1.FileTransferRunEvent|undefined} value
 * @return {!proto.teleport.terminal.v1.ConnectUsageEventOneOf} returns this
*/
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.setFileTransferRunEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.teleport.terminal.v1.ConnectUsageEventOneOf.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teleport.terminal.v1.ConnectUsageEventOneOf} returns this
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.clearFileTransferRunEvent = function() {
  return this.setFileTransferRunEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.hasFileTransferRunEvent = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional UserJobRoleUpdateEvent user_job_role_update_event = 7;
 * @return {?proto.teleport.terminal.v1.UserJobRoleUpdateEvent}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.getUserJobRoleUpdateEvent = function() {
  return /** @type{?proto.teleport.terminal.v1.UserJobRoleUpdateEvent} */ (
    jspb.Message.getWrapperField(this, proto.teleport.terminal.v1.UserJobRoleUpdateEvent, 7));
};


/**
 * @param {?proto.teleport.terminal.v1.UserJobRoleUpdateEvent|undefined} value
 * @return {!proto.teleport.terminal.v1.ConnectUsageEventOneOf} returns this
*/
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.setUserJobRoleUpdateEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.teleport.terminal.v1.ConnectUsageEventOneOf.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.teleport.terminal.v1.ConnectUsageEventOneOf} returns this
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.clearUserJobRoleUpdateEvent = function() {
  return this.setUserJobRoleUpdateEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.teleport.terminal.v1.ConnectUsageEventOneOf.prototype.hasUserJobRoleUpdateEvent = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto.teleport.terminal.v1);
