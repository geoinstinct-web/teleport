// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teleport/accesslist/v1/accesslist_service.proto

package accesslistv1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetAccessListsRequest is the request for getting all access lists.
type GetAccessListsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAccessListsRequest) Reset()         { *m = GetAccessListsRequest{} }
func (m *GetAccessListsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAccessListsRequest) ProtoMessage()    {}
func (*GetAccessListsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_196db5ede1c1a37c, []int{0}
}
func (m *GetAccessListsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccessListsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccessListsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccessListsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccessListsRequest.Merge(m, src)
}
func (m *GetAccessListsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAccessListsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccessListsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccessListsRequest proto.InternalMessageInfo

// GetAccessListsResponse is the response for getting all access lists.
type GetAccessListsResponse struct {
	// access_lists is the list of access lists.
	AccessLists          []*AccessList `protobuf:"bytes,1,rep,name=access_lists,json=accessLists,proto3" json:"access_lists,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetAccessListsResponse) Reset()         { *m = GetAccessListsResponse{} }
func (m *GetAccessListsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAccessListsResponse) ProtoMessage()    {}
func (*GetAccessListsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_196db5ede1c1a37c, []int{1}
}
func (m *GetAccessListsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccessListsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccessListsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccessListsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccessListsResponse.Merge(m, src)
}
func (m *GetAccessListsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAccessListsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccessListsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccessListsResponse proto.InternalMessageInfo

func (m *GetAccessListsResponse) GetAccessLists() []*AccessList {
	if m != nil {
		return m.AccessLists
	}
	return nil
}

// GetAccessListRequest is the request for retrieving an access list.
type GetAccessListRequest struct {
	// name is the name of the access list to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAccessListRequest) Reset()         { *m = GetAccessListRequest{} }
func (m *GetAccessListRequest) String() string { return proto.CompactTextString(m) }
func (*GetAccessListRequest) ProtoMessage()    {}
func (*GetAccessListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_196db5ede1c1a37c, []int{2}
}
func (m *GetAccessListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccessListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccessListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccessListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccessListRequest.Merge(m, src)
}
func (m *GetAccessListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAccessListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccessListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccessListRequest proto.InternalMessageInfo

func (m *GetAccessListRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// GetAccessListResponse is the response for retrieving an access list.
type GetAccessListResponse struct {
	// access_list is the requested access list.
	AccessList           *AccessList `protobuf:"bytes,1,opt,name=access_list,json=accessList,proto3" json:"access_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetAccessListResponse) Reset()         { *m = GetAccessListResponse{} }
func (m *GetAccessListResponse) String() string { return proto.CompactTextString(m) }
func (*GetAccessListResponse) ProtoMessage()    {}
func (*GetAccessListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_196db5ede1c1a37c, []int{3}
}
func (m *GetAccessListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccessListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccessListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccessListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccessListResponse.Merge(m, src)
}
func (m *GetAccessListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAccessListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccessListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccessListResponse proto.InternalMessageInfo

func (m *GetAccessListResponse) GetAccessList() *AccessList {
	if m != nil {
		return m.AccessList
	}
	return nil
}

// UpsertAccessListRequest is the request for upserting an access list.
type UpsertAccessListRequest struct {
	// access_list is the access list to upsert.
	AccessList           *AccessList `protobuf:"bytes,1,opt,name=access_list,json=accessList,proto3" json:"access_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpsertAccessListRequest) Reset()         { *m = UpsertAccessListRequest{} }
func (m *UpsertAccessListRequest) String() string { return proto.CompactTextString(m) }
func (*UpsertAccessListRequest) ProtoMessage()    {}
func (*UpsertAccessListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_196db5ede1c1a37c, []int{4}
}
func (m *UpsertAccessListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertAccessListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertAccessListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertAccessListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertAccessListRequest.Merge(m, src)
}
func (m *UpsertAccessListRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertAccessListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertAccessListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertAccessListRequest proto.InternalMessageInfo

func (m *UpsertAccessListRequest) GetAccessList() *AccessList {
	if m != nil {
		return m.AccessList
	}
	return nil
}

// UpsertAccessListResponse is the response for upserting an access list.
type UpsertAccessListResponse struct {
	// access_list is the access list that has been upserted.
	AccessList           *AccessList `protobuf:"bytes,1,opt,name=access_list,json=accessList,proto3" json:"access_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpsertAccessListResponse) Reset()         { *m = UpsertAccessListResponse{} }
func (m *UpsertAccessListResponse) String() string { return proto.CompactTextString(m) }
func (*UpsertAccessListResponse) ProtoMessage()    {}
func (*UpsertAccessListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_196db5ede1c1a37c, []int{5}
}
func (m *UpsertAccessListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertAccessListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertAccessListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertAccessListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertAccessListResponse.Merge(m, src)
}
func (m *UpsertAccessListResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertAccessListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertAccessListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertAccessListResponse proto.InternalMessageInfo

func (m *UpsertAccessListResponse) GetAccessList() *AccessList {
	if m != nil {
		return m.AccessList
	}
	return nil
}

// DeleteAccessListRequest is the request for deleting an access list.
type DeleteAccessListRequest struct {
	// name is the name of the access list to delete.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAccessListRequest) Reset()         { *m = DeleteAccessListRequest{} }
func (m *DeleteAccessListRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAccessListRequest) ProtoMessage()    {}
func (*DeleteAccessListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_196db5ede1c1a37c, []int{6}
}
func (m *DeleteAccessListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAccessListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAccessListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteAccessListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAccessListRequest.Merge(m, src)
}
func (m *DeleteAccessListRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAccessListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAccessListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAccessListRequest proto.InternalMessageInfo

func (m *DeleteAccessListRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// DeleteAllAccessListRequest is the request for deleting all access lists.
type DeleteAllAccessListsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAllAccessListsRequest) Reset()         { *m = DeleteAllAccessListsRequest{} }
func (m *DeleteAllAccessListsRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAllAccessListsRequest) ProtoMessage()    {}
func (*DeleteAllAccessListsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_196db5ede1c1a37c, []int{7}
}
func (m *DeleteAllAccessListsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAllAccessListsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAllAccessListsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteAllAccessListsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAllAccessListsRequest.Merge(m, src)
}
func (m *DeleteAllAccessListsRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAllAccessListsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAllAccessListsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAllAccessListsRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetAccessListsRequest)(nil), "teleport.accesslist.v1.GetAccessListsRequest")
	proto.RegisterType((*GetAccessListsResponse)(nil), "teleport.accesslist.v1.GetAccessListsResponse")
	proto.RegisterType((*GetAccessListRequest)(nil), "teleport.accesslist.v1.GetAccessListRequest")
	proto.RegisterType((*GetAccessListResponse)(nil), "teleport.accesslist.v1.GetAccessListResponse")
	proto.RegisterType((*UpsertAccessListRequest)(nil), "teleport.accesslist.v1.UpsertAccessListRequest")
	proto.RegisterType((*UpsertAccessListResponse)(nil), "teleport.accesslist.v1.UpsertAccessListResponse")
	proto.RegisterType((*DeleteAccessListRequest)(nil), "teleport.accesslist.v1.DeleteAccessListRequest")
	proto.RegisterType((*DeleteAllAccessListsRequest)(nil), "teleport.accesslist.v1.DeleteAllAccessListsRequest")
}

func init() {
	proto.RegisterFile("teleport/accesslist/v1/accesslist_service.proto", fileDescriptor_196db5ede1c1a37c)
}

var fileDescriptor_196db5ede1c1a37c = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6e, 0xda, 0x40,
	0x10, 0x95, 0x55, 0x54, 0xa9, 0x43, 0x5b, 0xd1, 0x15, 0x05, 0x64, 0x54, 0x84, 0x7c, 0x29, 0xaa,
	0xca, 0x6e, 0x81, 0x63, 0x4f, 0x6d, 0x82, 0x72, 0xc9, 0x89, 0x28, 0x39, 0x24, 0x51, 0x2c, 0xe3,
	0x4c, 0x1c, 0x4b, 0x8b, 0xd7, 0xf1, 0xae, 0x2d, 0xe5, 0x9b, 0xf2, 0x23, 0x39, 0xe6, 0x13, 0x22,
	0xbe, 0x24, 0xc2, 0x36, 0x31, 0x18, 0x5b, 0xf8, 0xc0, 0xcd, 0xbb, 0xfb, 0xe6, 0xbd, 0xe7, 0x99,
	0xd1, 0x03, 0xa6, 0x90, 0xa3, 0x2f, 0x02, 0xc5, 0x2c, 0xdb, 0x46, 0x29, 0xb9, 0x2b, 0x15, 0x8b,
	0x46, 0x1b, 0x27, 0x53, 0x62, 0x10, 0xb9, 0x36, 0x52, 0x3f, 0x10, 0x4a, 0x90, 0xd6, 0xba, 0x80,
	0x66, 0x10, 0x1a, 0x8d, 0xf4, 0xae, 0x23, 0x84, 0xc3, 0x91, 0xc5, 0xa8, 0x79, 0x78, 0xc7, 0x70,
	0xe1, 0xab, 0xc7, 0xa4, 0x48, 0xff, 0xb9, 0x57, 0x25, 0x01, 0x1a, 0x6d, 0xf8, 0x7e, 0x82, 0xea,
	0x5f, 0x7c, 0x7d, 0xea, 0x4a, 0x25, 0x67, 0xf8, 0x10, 0xa2, 0x54, 0x86, 0x09, 0xad, 0xfc, 0x83,
	0xf4, 0x85, 0x27, 0x91, 0x4c, 0xe1, 0x73, 0x42, 0x63, 0xae, 0x78, 0x64, 0x47, 0xeb, 0x7f, 0x18,
	0xd4, 0xc7, 0x06, 0x2d, 0xf6, 0x49, 0x33, 0x8a, 0x59, 0xdd, 0xca, 0xe8, 0x8c, 0x5f, 0xd0, 0xdc,
	0x12, 0x48, 0x85, 0x09, 0x81, 0x9a, 0x67, 0x2d, 0xb0, 0xa3, 0xf5, 0xb5, 0xc1, 0xa7, 0x59, 0xfc,
	0x6d, 0x5c, 0xe7, 0x5c, 0xbe, 0x7b, 0x39, 0x82, 0xfa, 0x86, 0x97, 0xb8, 0xa6, 0x9a, 0x15, 0xc8,
	0xac, 0x18, 0x37, 0xd0, 0x3e, 0xf7, 0x25, 0x06, 0x05, 0x66, 0x0e, 0xc2, 0x6f, 0x42, 0x67, 0x97,
	0xff, 0x90, 0x3f, 0x30, 0x84, 0xf6, 0x31, 0x72, 0x54, 0x58, 0xad, 0x9b, 0x3f, 0xa0, 0x9b, 0xc2,
	0x39, 0xdf, 0x9d, 0xfc, 0xf8, 0xa9, 0x06, 0xdf, 0xb2, 0xeb, 0xb3, 0x64, 0x19, 0x89, 0x80, 0xaf,
	0xdb, 0xfb, 0x40, 0x86, 0x65, 0x2e, 0x0b, 0x17, 0x4a, 0xa7, 0x55, 0xe1, 0x69, 0x67, 0x38, 0x7c,
	0xd9, 0x7a, 0x21, 0xbf, 0x2b, 0x11, 0xac, 0xe5, 0x86, 0x15, 0xd1, 0xa9, 0x5a, 0x08, 0x8d, 0xfc,
	0x8c, 0x08, 0x2b, 0xa3, 0x28, 0xd9, 0x16, 0xfd, 0x4f, 0xf5, 0x82, 0x54, 0xf6, 0x0a, 0x1a, 0xf9,
	0xc9, 0x95, 0xcb, 0x96, 0xcc, 0x58, 0x6f, 0xd1, 0x24, 0x0a, 0xe8, 0x3a, 0x0a, 0xe8, 0x74, 0x15,
	0x05, 0xc4, 0x86, 0x66, 0xd1, 0x9c, 0xc9, 0x64, 0x8f, 0x40, 0xd1, 0x56, 0x94, 0x89, 0xfc, 0xbf,
	0x7d, 0x5e, 0xf6, 0xb4, 0x97, 0x65, 0x4f, 0x7b, 0x5d, 0xf6, 0xb4, 0xcb, 0x0b, 0xc7, 0x55, 0xf7,
	0xe1, 0x9c, 0xda, 0x62, 0xc1, 0x9c, 0xc0, 0x8a, 0x5c, 0x65, 0x29, 0x57, 0x78, 0x16, 0xdf, 0x88,
	0x3d, 0xdf, 0x65, 0x0e, 0x7a, 0x49, 0x6e, 0x31, 0x47, 0x94, 0x04, 0xe2, 0xdf, 0xec, 0x14, 0x8d,
	0xe6, 0x1f, 0x63, 0xf4, 0xe4, 0x2d, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x31, 0xf5, 0x0f, 0x3e, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccessListServiceClient is the client API for AccessListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccessListServiceClient interface {
	// GetAccessLists returns a list of all access lists.
	GetAccessLists(ctx context.Context, in *GetAccessListsRequest, opts ...grpc.CallOption) (*GetAccessListsResponse, error)
	// GetAccessList returns the specified access list resource.
	GetAccessList(ctx context.Context, in *GetAccessListRequest, opts ...grpc.CallOption) (*GetAccessListResponse, error)
	// UpsertAccessList creates or updates an access list resource.
	UpsertAccessList(ctx context.Context, in *UpsertAccessListRequest, opts ...grpc.CallOption) (*UpsertAccessListResponse, error)
	// DeleteAccessList hard deletes the specified access list resource.
	DeleteAccessList(ctx context.Context, in *DeleteAccessListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllAccessLists hard deletes all access lists.
	DeleteAllAccessLists(ctx context.Context, in *DeleteAllAccessListsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type accessListServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccessListServiceClient(cc *grpc.ClientConn) AccessListServiceClient {
	return &accessListServiceClient{cc}
}

func (c *accessListServiceClient) GetAccessLists(ctx context.Context, in *GetAccessListsRequest, opts ...grpc.CallOption) (*GetAccessListsResponse, error) {
	out := new(GetAccessListsResponse)
	err := c.cc.Invoke(ctx, "/teleport.accesslist.v1.AccessListService/GetAccessLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessListServiceClient) GetAccessList(ctx context.Context, in *GetAccessListRequest, opts ...grpc.CallOption) (*GetAccessListResponse, error) {
	out := new(GetAccessListResponse)
	err := c.cc.Invoke(ctx, "/teleport.accesslist.v1.AccessListService/GetAccessList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessListServiceClient) UpsertAccessList(ctx context.Context, in *UpsertAccessListRequest, opts ...grpc.CallOption) (*UpsertAccessListResponse, error) {
	out := new(UpsertAccessListResponse)
	err := c.cc.Invoke(ctx, "/teleport.accesslist.v1.AccessListService/UpsertAccessList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessListServiceClient) DeleteAccessList(ctx context.Context, in *DeleteAccessListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/teleport.accesslist.v1.AccessListService/DeleteAccessList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessListServiceClient) DeleteAllAccessLists(ctx context.Context, in *DeleteAllAccessListsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/teleport.accesslist.v1.AccessListService/DeleteAllAccessLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessListServiceServer is the server API for AccessListService service.
type AccessListServiceServer interface {
	// GetAccessLists returns a list of all access lists.
	GetAccessLists(context.Context, *GetAccessListsRequest) (*GetAccessListsResponse, error)
	// GetAccessList returns the specified access list resource.
	GetAccessList(context.Context, *GetAccessListRequest) (*GetAccessListResponse, error)
	// UpsertAccessList creates or updates an access list resource.
	UpsertAccessList(context.Context, *UpsertAccessListRequest) (*UpsertAccessListResponse, error)
	// DeleteAccessList hard deletes the specified access list resource.
	DeleteAccessList(context.Context, *DeleteAccessListRequest) (*emptypb.Empty, error)
	// DeleteAllAccessLists hard deletes all access lists.
	DeleteAllAccessLists(context.Context, *DeleteAllAccessListsRequest) (*emptypb.Empty, error)
}

// UnimplementedAccessListServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAccessListServiceServer struct {
}

func (*UnimplementedAccessListServiceServer) GetAccessLists(ctx context.Context, req *GetAccessListsRequest) (*GetAccessListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessLists not implemented")
}
func (*UnimplementedAccessListServiceServer) GetAccessList(ctx context.Context, req *GetAccessListRequest) (*GetAccessListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessList not implemented")
}
func (*UnimplementedAccessListServiceServer) UpsertAccessList(ctx context.Context, req *UpsertAccessListRequest) (*UpsertAccessListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAccessList not implemented")
}
func (*UnimplementedAccessListServiceServer) DeleteAccessList(ctx context.Context, req *DeleteAccessListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccessList not implemented")
}
func (*UnimplementedAccessListServiceServer) DeleteAllAccessLists(ctx context.Context, req *DeleteAllAccessListsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllAccessLists not implemented")
}

func RegisterAccessListServiceServer(s *grpc.Server, srv AccessListServiceServer) {
	s.RegisterService(&_AccessListService_serviceDesc, srv)
}

func _AccessListService_GetAccessLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessListServiceServer).GetAccessLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.accesslist.v1.AccessListService/GetAccessLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessListServiceServer).GetAccessLists(ctx, req.(*GetAccessListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessListService_GetAccessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessListServiceServer).GetAccessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.accesslist.v1.AccessListService/GetAccessList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessListServiceServer).GetAccessList(ctx, req.(*GetAccessListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessListService_UpsertAccessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAccessListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessListServiceServer).UpsertAccessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.accesslist.v1.AccessListService/UpsertAccessList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessListServiceServer).UpsertAccessList(ctx, req.(*UpsertAccessListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessListService_DeleteAccessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessListServiceServer).DeleteAccessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.accesslist.v1.AccessListService/DeleteAccessList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessListServiceServer).DeleteAccessList(ctx, req.(*DeleteAccessListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessListService_DeleteAllAccessLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllAccessListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessListServiceServer).DeleteAllAccessLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.accesslist.v1.AccessListService/DeleteAllAccessLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessListServiceServer).DeleteAllAccessLists(ctx, req.(*DeleteAllAccessListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccessListService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.accesslist.v1.AccessListService",
	HandlerType: (*AccessListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccessLists",
			Handler:    _AccessListService_GetAccessLists_Handler,
		},
		{
			MethodName: "GetAccessList",
			Handler:    _AccessListService_GetAccessList_Handler,
		},
		{
			MethodName: "UpsertAccessList",
			Handler:    _AccessListService_UpsertAccessList_Handler,
		},
		{
			MethodName: "DeleteAccessList",
			Handler:    _AccessListService_DeleteAccessList_Handler,
		},
		{
			MethodName: "DeleteAllAccessLists",
			Handler:    _AccessListService_DeleteAllAccessLists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/accesslist/v1/accesslist_service.proto",
}

func (m *GetAccessListsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccessListsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccessListsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetAccessListsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccessListsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccessListsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessLists) > 0 {
		for iNdEx := len(m.AccessLists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccessLists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccesslistService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAccessListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccessListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccessListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAccesslistService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAccessListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccessListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccessListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccessList != nil {
		{
			size, err := m.AccessList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAccesslistService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertAccessListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertAccessListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertAccessListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccessList != nil {
		{
			size, err := m.AccessList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAccesslistService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertAccessListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertAccessListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertAccessListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccessList != nil {
		{
			size, err := m.AccessList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAccesslistService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteAccessListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAccessListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteAccessListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAccesslistService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteAllAccessListsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAllAccessListsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteAllAccessListsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintAccesslistService(dAtA []byte, offset int, v uint64) int {
	offset -= sovAccesslistService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetAccessListsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAccessListsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccessLists) > 0 {
		for _, e := range m.AccessLists {
			l = e.Size()
			n += 1 + l + sovAccesslistService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAccessListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAccesslistService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAccessListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccessList != nil {
		l = m.AccessList.Size()
		n += 1 + l + sovAccesslistService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpsertAccessListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccessList != nil {
		l = m.AccessList.Size()
		n += 1 + l + sovAccesslistService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpsertAccessListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccessList != nil {
		l = m.AccessList.Size()
		n += 1 + l + sovAccesslistService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAccessListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAccesslistService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAllAccessListsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAccesslistService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAccesslistService(x uint64) (n int) {
	return sovAccesslistService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetAccessListsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccesslistService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccessListsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccessListsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAccesslistService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccesslistService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccessListsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccesslistService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccessListsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccessListsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessLists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesslistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccesslistService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccesslistService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessLists = append(m.AccessLists, &AccessList{})
			if err := m.AccessLists[len(m.AccessLists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccesslistService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccesslistService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccessListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccesslistService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccessListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccessListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesslistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccesslistService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccesslistService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccesslistService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccesslistService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccessListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccesslistService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccessListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccessListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesslistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccesslistService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccesslistService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccessList == nil {
				m.AccessList = &AccessList{}
			}
			if err := m.AccessList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccesslistService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccesslistService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertAccessListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccesslistService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertAccessListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertAccessListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesslistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccesslistService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccesslistService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccessList == nil {
				m.AccessList = &AccessList{}
			}
			if err := m.AccessList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccesslistService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccesslistService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertAccessListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccesslistService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertAccessListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertAccessListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesslistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccesslistService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccesslistService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccessList == nil {
				m.AccessList = &AccessList{}
			}
			if err := m.AccessList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccesslistService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccesslistService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAccessListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccesslistService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAccessListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAccessListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesslistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccesslistService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccesslistService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccesslistService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccesslistService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAllAccessListsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccesslistService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAllAccessListsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAllAccessListsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAccesslistService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccesslistService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccesslistService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccesslistService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccesslistService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccesslistService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccesslistService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAccesslistService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAccesslistService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAccesslistService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccesslistService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAccesslistService = fmt.Errorf("proto: unexpected end of group")
)
