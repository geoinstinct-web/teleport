// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: teleport/mfa/v1/mfa.proto

package mfav1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChallengeScope is a scope authorized by an MFA challenge resolution.
type ChallengeScope int32

const (
	// Scope unknown or not specified.
	ChallengeScope_CHALLENGE_SCOPE_UNSPECIFIED ChallengeScope = 0
	// Standard webauthn login.
	ChallengeScope_CHALLENGE_SCOPE_LOGIN ChallengeScope = 1
	// Passwordless webauthn login.
	ChallengeScope_CHALLENGE_SCOPE_PASSWORDLESS_LOGIN ChallengeScope = 2
	// Headless login.
	ChallengeScope_CHALLENGE_SCOPE_HEADLESS_LOGIN ChallengeScope = 3
	// MFA device management.
	ChallengeScope_CHALLENGE_SCOPE_MANAGE_DEVICES ChallengeScope = 4
	// Account recovery.
	ChallengeScope_CHALLENGE_SCOPE_ACCOUNT_RECOVERY ChallengeScope = 5
	// Used for per-session MFA and moderated session presence checks.
	ChallengeScope_CHALLENGE_SCOPE_USER_SESSION ChallengeScope = 6
	// Used for various administrative actions, such as adding, updating, or
	// deleting administrative resources (users, roles, etc.).
	//
	// Note: this scope should not be used for new MFA capabilities that have
	// more precise scope. Instead, new scopes should be added. This scope may
	// also be split into multiple smaller scopes in the future.
	ChallengeScope_CHALLENGE_SCOPE_ADMIN_ACTION ChallengeScope = 7
)

// Enum value maps for ChallengeScope.
var (
	ChallengeScope_name = map[int32]string{
		0: "CHALLENGE_SCOPE_UNSPECIFIED",
		1: "CHALLENGE_SCOPE_LOGIN",
		2: "CHALLENGE_SCOPE_PASSWORDLESS_LOGIN",
		3: "CHALLENGE_SCOPE_HEADLESS_LOGIN",
		4: "CHALLENGE_SCOPE_MANAGE_DEVICES",
		5: "CHALLENGE_SCOPE_ACCOUNT_RECOVERY",
		6: "CHALLENGE_SCOPE_USER_SESSION",
		7: "CHALLENGE_SCOPE_ADMIN_ACTION",
	}
	ChallengeScope_value = map[string]int32{
		"CHALLENGE_SCOPE_UNSPECIFIED":        0,
		"CHALLENGE_SCOPE_LOGIN":              1,
		"CHALLENGE_SCOPE_PASSWORDLESS_LOGIN": 2,
		"CHALLENGE_SCOPE_HEADLESS_LOGIN":     3,
		"CHALLENGE_SCOPE_MANAGE_DEVICES":     4,
		"CHALLENGE_SCOPE_ACCOUNT_RECOVERY":   5,
		"CHALLENGE_SCOPE_USER_SESSION":       6,
		"CHALLENGE_SCOPE_ADMIN_ACTION":       7,
	}
)

func (x ChallengeScope) Enum() *ChallengeScope {
	p := new(ChallengeScope)
	*p = x
	return p
}

func (x ChallengeScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeScope) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_mfa_v1_mfa_proto_enumTypes[0].Descriptor()
}

func (ChallengeScope) Type() protoreflect.EnumType {
	return &file_teleport_mfa_v1_mfa_proto_enumTypes[0]
}

func (x ChallengeScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeScope.Descriptor instead.
func (ChallengeScope) EnumDescriptor() ([]byte, []int) {
	return file_teleport_mfa_v1_mfa_proto_rawDescGZIP(), []int{0}
}

// ChallengeAllowReuse determines whether an MFA challenge response can be used
// to authenticate the user more than once until the challenge expires.
//
// Reuse is only permitted for specific actions by the discretion of the server.
// See the server implementation for details.
type ChallengeAllowReuse int32

const (
	// Reuse unspecified, treated as CHALLENGE_ALLOW_REUSE_NO.
	ChallengeAllowReuse_CHALLENGE_ALLOW_REUSE_UNSPECIFIED ChallengeAllowReuse = 0
	// Reuse is permitted.
	ChallengeAllowReuse_CHALLENGE_ALLOW_REUSE_YES ChallengeAllowReuse = 1
	// Reuse is not permitted.
	ChallengeAllowReuse_CHALLENGE_ALLOW_REUSE_NO ChallengeAllowReuse = 2
)

// Enum value maps for ChallengeAllowReuse.
var (
	ChallengeAllowReuse_name = map[int32]string{
		0: "CHALLENGE_ALLOW_REUSE_UNSPECIFIED",
		1: "CHALLENGE_ALLOW_REUSE_YES",
		2: "CHALLENGE_ALLOW_REUSE_NO",
	}
	ChallengeAllowReuse_value = map[string]int32{
		"CHALLENGE_ALLOW_REUSE_UNSPECIFIED": 0,
		"CHALLENGE_ALLOW_REUSE_YES":         1,
		"CHALLENGE_ALLOW_REUSE_NO":          2,
	}
)

func (x ChallengeAllowReuse) Enum() *ChallengeAllowReuse {
	p := new(ChallengeAllowReuse)
	*p = x
	return p
}

func (x ChallengeAllowReuse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeAllowReuse) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_mfa_v1_mfa_proto_enumTypes[1].Descriptor()
}

func (ChallengeAllowReuse) Type() protoreflect.EnumType {
	return &file_teleport_mfa_v1_mfa_proto_enumTypes[1]
}

func (x ChallengeAllowReuse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeAllowReuse.Descriptor instead.
func (ChallengeAllowReuse) EnumDescriptor() ([]byte, []int) {
	return file_teleport_mfa_v1_mfa_proto_rawDescGZIP(), []int{1}
}

// ChallengeExtensions contains MFA challenge extensions used by Teleport
// during MFA authentication.
type ChallengeExtensions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Scope is an authorization scope for this MFA challenge.
	// Required.
	Scope ChallengeScope `protobuf:"varint,1,opt,name=scope,proto3,enum=teleport.mfa.v1.ChallengeScope" json:"scope,omitempty"`
	// AllowReuse determines whether the MFA challenge allows reuse.
	// Defaults to CHALLENGE_ALLOW_REUSE_NO.
	//
	// Note that reuse is only permitted for specific actions by the discretion
	// of the server. See the server implementation for details.
	AllowReuse ChallengeAllowReuse `protobuf:"varint,2,opt,name=allow_reuse,json=allowReuse,proto3,enum=teleport.mfa.v1.ChallengeAllowReuse" json:"allow_reuse,omitempty"`
}

func (x *ChallengeExtensions) Reset() {
	*x = ChallengeExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_mfa_v1_mfa_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeExtensions) ProtoMessage() {}

func (x *ChallengeExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_mfa_v1_mfa_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeExtensions.ProtoReflect.Descriptor instead.
func (*ChallengeExtensions) Descriptor() ([]byte, []int) {
	return file_teleport_mfa_v1_mfa_proto_rawDescGZIP(), []int{0}
}

func (x *ChallengeExtensions) GetScope() ChallengeScope {
	if x != nil {
		return x.Scope
	}
	return ChallengeScope_CHALLENGE_SCOPE_UNSPECIFIED
}

func (x *ChallengeExtensions) GetAllowReuse() ChallengeAllowReuse {
	if x != nil {
		return x.AllowReuse
	}
	return ChallengeAllowReuse_CHALLENGE_ALLOW_REUSE_UNSPECIFIED
}

var File_teleport_mfa_v1_mfa_proto protoreflect.FileDescriptor

var file_teleport_mfa_v1_mfa_proto_rawDesc = []byte{
	0x0a, 0x19, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6d, 0x66, 0x61, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x66, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6d, 0x66, 0x61, 0x2e, 0x76, 0x31, 0x22, 0x93, 0x01, 0x0a,
	0x13, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6d,
	0x66, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6d, 0x66, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x75, 0x73, 0x65, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x75,
	0x73, 0x65, 0x2a, 0xa6, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45,
	0x4e, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x48, 0x41,
	0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41,
	0x44, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10,
	0x04, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x48, 0x41,
	0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x2a, 0x79, 0x0a, 0x13, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x75,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x45, 0x55, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x48, 0x41,
	0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x45, 0x55,
	0x53, 0x45, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x41, 0x4c,
	0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x45, 0x55, 0x53,
	0x45, 0x5f, 0x4e, 0x4f, 0x10, 0x02, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6d, 0x66, 0x61, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x66, 0x61,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_teleport_mfa_v1_mfa_proto_rawDescOnce sync.Once
	file_teleport_mfa_v1_mfa_proto_rawDescData = file_teleport_mfa_v1_mfa_proto_rawDesc
)

func file_teleport_mfa_v1_mfa_proto_rawDescGZIP() []byte {
	file_teleport_mfa_v1_mfa_proto_rawDescOnce.Do(func() {
		file_teleport_mfa_v1_mfa_proto_rawDescData = protoimpl.X.CompressGZIP(file_teleport_mfa_v1_mfa_proto_rawDescData)
	})
	return file_teleport_mfa_v1_mfa_proto_rawDescData
}

var file_teleport_mfa_v1_mfa_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_teleport_mfa_v1_mfa_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_teleport_mfa_v1_mfa_proto_goTypes = []interface{}{
	(ChallengeScope)(0),         // 0: teleport.mfa.v1.ChallengeScope
	(ChallengeAllowReuse)(0),    // 1: teleport.mfa.v1.ChallengeAllowReuse
	(*ChallengeExtensions)(nil), // 2: teleport.mfa.v1.ChallengeExtensions
}
var file_teleport_mfa_v1_mfa_proto_depIdxs = []int32{
	0, // 0: teleport.mfa.v1.ChallengeExtensions.scope:type_name -> teleport.mfa.v1.ChallengeScope
	1, // 1: teleport.mfa.v1.ChallengeExtensions.allow_reuse:type_name -> teleport.mfa.v1.ChallengeAllowReuse
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_teleport_mfa_v1_mfa_proto_init() }
func file_teleport_mfa_v1_mfa_proto_init() {
	if File_teleport_mfa_v1_mfa_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_teleport_mfa_v1_mfa_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teleport_mfa_v1_mfa_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_mfa_v1_mfa_proto_goTypes,
		DependencyIndexes: file_teleport_mfa_v1_mfa_proto_depIdxs,
		EnumInfos:         file_teleport_mfa_v1_mfa_proto_enumTypes,
		MessageInfos:      file_teleport_mfa_v1_mfa_proto_msgTypes,
	}.Build()
	File_teleport_mfa_v1_mfa_proto = out.File
	file_teleport_mfa_v1_mfa_proto_rawDesc = nil
	file_teleport_mfa_v1_mfa_proto_goTypes = nil
	file_teleport_mfa_v1_mfa_proto_depIdxs = nil
}
