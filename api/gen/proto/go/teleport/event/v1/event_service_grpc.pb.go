// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/event/v1/event_service.proto

package eventv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventService_WatchEvents_FullMethodName                         = "/teleport.event.v1.EventService/WatchEvents"
	EventService_WatchPendingHeadlessAuthentications_FullMethodName = "/teleport.event.v1.EventService/WatchPendingHeadlessAuthentications"
)

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	// WatchEvents returns a new stream of cluster events
	// buf:lint:ignore RPC_NO_SERVER_STREAMING
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	WatchEvents(ctx context.Context, in *Watch, opts ...grpc.CallOption) (EventService_WatchEventsClient, error)
	// WatchPendingHeadlessAuthentications watches the backend for pending headless authentication requests for the user.
	// buf:lint:ignore RPC_NO_SERVER_STREAMING
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	WatchPendingHeadlessAuthentications(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (EventService_WatchPendingHeadlessAuthenticationsClient, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) WatchEvents(ctx context.Context, in *Watch, opts ...grpc.CallOption) (EventService_WatchEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[0], EventService_WatchEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceWatchEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_WatchEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventServiceWatchEventsClient struct {
	grpc.ClientStream
}

func (x *eventServiceWatchEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventServiceClient) WatchPendingHeadlessAuthentications(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (EventService_WatchPendingHeadlessAuthenticationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[1], EventService_WatchPendingHeadlessAuthentications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceWatchPendingHeadlessAuthenticationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_WatchPendingHeadlessAuthenticationsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventServiceWatchPendingHeadlessAuthenticationsClient struct {
	grpc.ClientStream
}

func (x *eventServiceWatchPendingHeadlessAuthenticationsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	// WatchEvents returns a new stream of cluster events
	// buf:lint:ignore RPC_NO_SERVER_STREAMING
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	WatchEvents(*Watch, EventService_WatchEventsServer) error
	// WatchPendingHeadlessAuthentications watches the backend for pending headless authentication requests for the user.
	// buf:lint:ignore RPC_NO_SERVER_STREAMING
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	WatchPendingHeadlessAuthentications(*emptypb.Empty, EventService_WatchPendingHeadlessAuthenticationsServer) error
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (UnimplementedEventServiceServer) WatchEvents(*Watch, EventService_WatchEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchEvents not implemented")
}
func (UnimplementedEventServiceServer) WatchPendingHeadlessAuthentications(*emptypb.Empty, EventService_WatchPendingHeadlessAuthenticationsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchPendingHeadlessAuthentications not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_WatchEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Watch)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).WatchEvents(m, &eventServiceWatchEventsServer{stream})
}

type EventService_WatchEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventServiceWatchEventsServer struct {
	grpc.ServerStream
}

func (x *eventServiceWatchEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _EventService_WatchPendingHeadlessAuthentications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).WatchPendingHeadlessAuthentications(m, &eventServiceWatchPendingHeadlessAuthenticationsServer{stream})
}

type EventService_WatchPendingHeadlessAuthenticationsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventServiceWatchPendingHeadlessAuthenticationsServer struct {
	grpc.ServerStream
}

func (x *eventServiceWatchPendingHeadlessAuthenticationsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.event.v1.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchEvents",
			Handler:       _EventService_WatchEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchPendingHeadlessAuthentications",
			Handler:       _EventService_WatchPendingHeadlessAuthentications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "teleport/event/v1/event_service.proto",
}
