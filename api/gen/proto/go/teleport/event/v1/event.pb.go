// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: teleport/event/v1/event.proto

package eventv1

import (
	types "github.com/gravitational/teleport/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Operation identifies type of operation
type Operation int32

const (
	// INIT is sent as a first sentinel event
	// on the watch channel
	// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
	Operation_OPERATION_INIT Operation = 0
	// PUT identifies created or updated object
	Operation_OPERATION_PUT Operation = 1
	// DELETE identifies deleted object
	Operation_OPERATION_DELETE Operation = 2
)

// Enum value maps for Operation.
var (
	Operation_name = map[int32]string{
		0: "OPERATION_INIT",
		1: "OPERATION_PUT",
		2: "OPERATION_DELETE",
	}
	Operation_value = map[string]int32{
		"OPERATION_INIT":   0,
		"OPERATION_PUT":    1,
		"OPERATION_DELETE": 2,
	}
)

func (x Operation) Enum() *Operation {
	p := new(Operation)
	*p = x
	return p
}

func (x Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_event_v1_event_proto_enumTypes[0].Descriptor()
}

func (Operation) Type() protoreflect.EnumType {
	return &file_teleport_event_v1_event_proto_enumTypes[0]
}

func (x Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation.Descriptor instead.
func (Operation) EnumDescriptor() ([]byte, []int) {
	return file_teleport_event_v1_event_proto_rawDescGZIP(), []int{0}
}

// Event returns cluster event
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation identifies operation
	Type Operation `protobuf:"varint,1,opt,name=type,proto3,enum=teleport.event.v1.Operation" json:"type,omitempty"`
	// Resource contains the updated resource
	//
	// Types that are assignable to Resource:
	//
	//	*Event_ResourceHeader
	//	*Event_CertAuthority
	//	*Event_StaticTokens
	//	*Event_ProvisionToken
	//	*Event_ClusterName
	//	*Event_User
	//	*Event_Role
	//	*Event_Namespace
	//	*Event_Server
	//	*Event_ReverseTunnel
	//	*Event_TunnelConnection
	//	*Event_AccessRequest
	//	*Event_AppSession
	//	*Event_RemoteCluster
	//	*Event_DatabaseServer
	//	*Event_WebSession
	//	*Event_WebToken
	//	*Event_ClusterNetworkingConfig
	//	*Event_SessionRecordingConfig
	//	*Event_AuthPreference
	//	*Event_ClusterAuditConfig
	//	*Event_Lock
	//	*Event_NetworkRestrictions
	//	*Event_WindowsDesktopService
	//	*Event_WindowsDesktop
	//	*Event_Database
	//	*Event_AppServer
	//	*Event_App
	//	*Event_SnowflakeSession
	//	*Event_KubernetesServer
	//	*Event_KubernetesCluster
	//	*Event_Installer
	//	*Event_DatabaseService
	//	*Event_SamlIdpServiceProvider
	//	*Event_SamlIdpSession
	//	*Event_UserGroup
	//	*Event_UiConfig
	//	*Event_OktaImportRule
	//	*Event_OktaAssignment
	//	*Event_Integration
	//	*Event_WatchStatus
	//	*Event_HeadlessAuthentication
	Resource isEvent_Resource `protobuf_oneof:"resource"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_event_v1_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_event_v1_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_teleport_event_v1_event_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetType() Operation {
	if x != nil {
		return x.Type
	}
	return Operation_OPERATION_INIT
}

func (m *Event) GetResource() isEvent_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *Event) GetResourceHeader() *types.ResourceHeader {
	if x, ok := x.GetResource().(*Event_ResourceHeader); ok {
		return x.ResourceHeader
	}
	return nil
}

func (x *Event) GetCertAuthority() *types.CertAuthorityV2 {
	if x, ok := x.GetResource().(*Event_CertAuthority); ok {
		return x.CertAuthority
	}
	return nil
}

func (x *Event) GetStaticTokens() *types.StaticTokensV2 {
	if x, ok := x.GetResource().(*Event_StaticTokens); ok {
		return x.StaticTokens
	}
	return nil
}

func (x *Event) GetProvisionToken() *types.ProvisionTokenV2 {
	if x, ok := x.GetResource().(*Event_ProvisionToken); ok {
		return x.ProvisionToken
	}
	return nil
}

func (x *Event) GetClusterName() *types.ClusterNameV2 {
	if x, ok := x.GetResource().(*Event_ClusterName); ok {
		return x.ClusterName
	}
	return nil
}

func (x *Event) GetUser() *types.UserV2 {
	if x, ok := x.GetResource().(*Event_User); ok {
		return x.User
	}
	return nil
}

func (x *Event) GetRole() *types.RoleV6 {
	if x, ok := x.GetResource().(*Event_Role); ok {
		return x.Role
	}
	return nil
}

func (x *Event) GetNamespace() *types.Namespace {
	if x, ok := x.GetResource().(*Event_Namespace); ok {
		return x.Namespace
	}
	return nil
}

func (x *Event) GetServer() *types.ServerV2 {
	if x, ok := x.GetResource().(*Event_Server); ok {
		return x.Server
	}
	return nil
}

func (x *Event) GetReverseTunnel() *types.ReverseTunnelV2 {
	if x, ok := x.GetResource().(*Event_ReverseTunnel); ok {
		return x.ReverseTunnel
	}
	return nil
}

func (x *Event) GetTunnelConnection() *types.TunnelConnectionV2 {
	if x, ok := x.GetResource().(*Event_TunnelConnection); ok {
		return x.TunnelConnection
	}
	return nil
}

func (x *Event) GetAccessRequest() *types.AccessRequestV3 {
	if x, ok := x.GetResource().(*Event_AccessRequest); ok {
		return x.AccessRequest
	}
	return nil
}

func (x *Event) GetAppSession() *types.WebSessionV2 {
	if x, ok := x.GetResource().(*Event_AppSession); ok {
		return x.AppSession
	}
	return nil
}

func (x *Event) GetRemoteCluster() *types.RemoteClusterV3 {
	if x, ok := x.GetResource().(*Event_RemoteCluster); ok {
		return x.RemoteCluster
	}
	return nil
}

func (x *Event) GetDatabaseServer() *types.DatabaseServerV3 {
	if x, ok := x.GetResource().(*Event_DatabaseServer); ok {
		return x.DatabaseServer
	}
	return nil
}

func (x *Event) GetWebSession() *types.WebSessionV2 {
	if x, ok := x.GetResource().(*Event_WebSession); ok {
		return x.WebSession
	}
	return nil
}

func (x *Event) GetWebToken() *types.WebTokenV3 {
	if x, ok := x.GetResource().(*Event_WebToken); ok {
		return x.WebToken
	}
	return nil
}

func (x *Event) GetClusterNetworkingConfig() *types.ClusterNetworkingConfigV2 {
	if x, ok := x.GetResource().(*Event_ClusterNetworkingConfig); ok {
		return x.ClusterNetworkingConfig
	}
	return nil
}

func (x *Event) GetSessionRecordingConfig() *types.SessionRecordingConfigV2 {
	if x, ok := x.GetResource().(*Event_SessionRecordingConfig); ok {
		return x.SessionRecordingConfig
	}
	return nil
}

func (x *Event) GetAuthPreference() *types.AuthPreferenceV2 {
	if x, ok := x.GetResource().(*Event_AuthPreference); ok {
		return x.AuthPreference
	}
	return nil
}

func (x *Event) GetClusterAuditConfig() *types.ClusterAuditConfigV2 {
	if x, ok := x.GetResource().(*Event_ClusterAuditConfig); ok {
		return x.ClusterAuditConfig
	}
	return nil
}

func (x *Event) GetLock() *types.LockV2 {
	if x, ok := x.GetResource().(*Event_Lock); ok {
		return x.Lock
	}
	return nil
}

func (x *Event) GetNetworkRestrictions() *types.NetworkRestrictionsV4 {
	if x, ok := x.GetResource().(*Event_NetworkRestrictions); ok {
		return x.NetworkRestrictions
	}
	return nil
}

func (x *Event) GetWindowsDesktopService() *types.WindowsDesktopServiceV3 {
	if x, ok := x.GetResource().(*Event_WindowsDesktopService); ok {
		return x.WindowsDesktopService
	}
	return nil
}

func (x *Event) GetWindowsDesktop() *types.WindowsDesktopV3 {
	if x, ok := x.GetResource().(*Event_WindowsDesktop); ok {
		return x.WindowsDesktop
	}
	return nil
}

func (x *Event) GetDatabase() *types.DatabaseV3 {
	if x, ok := x.GetResource().(*Event_Database); ok {
		return x.Database
	}
	return nil
}

func (x *Event) GetAppServer() *types.AppServerV3 {
	if x, ok := x.GetResource().(*Event_AppServer); ok {
		return x.AppServer
	}
	return nil
}

func (x *Event) GetApp() *types.AppV3 {
	if x, ok := x.GetResource().(*Event_App); ok {
		return x.App
	}
	return nil
}

func (x *Event) GetSnowflakeSession() *types.WebSessionV2 {
	if x, ok := x.GetResource().(*Event_SnowflakeSession); ok {
		return x.SnowflakeSession
	}
	return nil
}

func (x *Event) GetKubernetesServer() *types.KubernetesServerV3 {
	if x, ok := x.GetResource().(*Event_KubernetesServer); ok {
		return x.KubernetesServer
	}
	return nil
}

func (x *Event) GetKubernetesCluster() *types.KubernetesClusterV3 {
	if x, ok := x.GetResource().(*Event_KubernetesCluster); ok {
		return x.KubernetesCluster
	}
	return nil
}

func (x *Event) GetInstaller() *types.InstallerV1 {
	if x, ok := x.GetResource().(*Event_Installer); ok {
		return x.Installer
	}
	return nil
}

func (x *Event) GetDatabaseService() *types.DatabaseServiceV1 {
	if x, ok := x.GetResource().(*Event_DatabaseService); ok {
		return x.DatabaseService
	}
	return nil
}

func (x *Event) GetSamlIdpServiceProvider() *types.SAMLIdPServiceProviderV1 {
	if x, ok := x.GetResource().(*Event_SamlIdpServiceProvider); ok {
		return x.SamlIdpServiceProvider
	}
	return nil
}

func (x *Event) GetSamlIdpSession() *types.WebSessionV2 {
	if x, ok := x.GetResource().(*Event_SamlIdpSession); ok {
		return x.SamlIdpSession
	}
	return nil
}

func (x *Event) GetUserGroup() *types.UserGroupV1 {
	if x, ok := x.GetResource().(*Event_UserGroup); ok {
		return x.UserGroup
	}
	return nil
}

func (x *Event) GetUiConfig() *types.UIConfigV1 {
	if x, ok := x.GetResource().(*Event_UiConfig); ok {
		return x.UiConfig
	}
	return nil
}

func (x *Event) GetOktaImportRule() *types.OktaImportRuleV1 {
	if x, ok := x.GetResource().(*Event_OktaImportRule); ok {
		return x.OktaImportRule
	}
	return nil
}

func (x *Event) GetOktaAssignment() *types.OktaAssignmentV1 {
	if x, ok := x.GetResource().(*Event_OktaAssignment); ok {
		return x.OktaAssignment
	}
	return nil
}

func (x *Event) GetIntegration() *types.IntegrationV1 {
	if x, ok := x.GetResource().(*Event_Integration); ok {
		return x.Integration
	}
	return nil
}

func (x *Event) GetWatchStatus() *types.WatchStatusV1 {
	if x, ok := x.GetResource().(*Event_WatchStatus); ok {
		return x.WatchStatus
	}
	return nil
}

func (x *Event) GetHeadlessAuthentication() *types.HeadlessAuthentication {
	if x, ok := x.GetResource().(*Event_HeadlessAuthentication); ok {
		return x.HeadlessAuthentication
	}
	return nil
}

type isEvent_Resource interface {
	isEvent_Resource()
}

type Event_ResourceHeader struct {
	// resource_header is specified in delete events,
	// the full object is not available, so resource
	// header is used to provide information about object type
	ResourceHeader *types.ResourceHeader `protobuf:"bytes,2,opt,name=resource_header,json=resourceHeader,proto3,oneof"`
}

type Event_CertAuthority struct {
	// cert_authority is filled in certificate-authority related events
	CertAuthority *types.CertAuthorityV2 `protobuf:"bytes,3,opt,name=cert_authority,json=certAuthority,proto3,oneof"`
}

type Event_StaticTokens struct {
	// static_tokens is filled in static-tokens related events
	StaticTokens *types.StaticTokensV2 `protobuf:"bytes,4,opt,name=static_tokens,json=staticTokens,proto3,oneof"`
}

type Event_ProvisionToken struct {
	// provision_token is filled in provision-token related events
	ProvisionToken *types.ProvisionTokenV2 `protobuf:"bytes,5,opt,name=provision_token,json=provisionToken,proto3,oneof"`
}

type Event_ClusterName struct {
	// cluster_name is a cluster name resource
	ClusterName *types.ClusterNameV2 `protobuf:"bytes,6,opt,name=cluster_name,json=clusterName,proto3,oneof"`
}

type Event_User struct {
	// user is a user resource
	User *types.UserV2 `protobuf:"bytes,8,opt,name=user,proto3,oneof"`
}

type Event_Role struct {
	// role is a role resource
	Role *types.RoleV6 `protobuf:"bytes,9,opt,name=role,proto3,oneof"`
}

type Event_Namespace struct {
	// namespace is a namespace resource
	Namespace *types.Namespace `protobuf:"bytes,10,opt,name=namespace,proto3,oneof"`
}

type Event_Server struct {
	// server is a node or proxy resource
	Server *types.ServerV2 `protobuf:"bytes,11,opt,name=server,proto3,oneof"`
}

type Event_ReverseTunnel struct {
	// reverse_tunnel is a resource with reverse tunnel
	ReverseTunnel *types.ReverseTunnelV2 `protobuf:"bytes,12,opt,name=reverse_tunnel,json=reverseTunnel,proto3,oneof"`
}

type Event_TunnelConnection struct {
	// tunnel_connection is a resource for tunnel connnections
	TunnelConnection *types.TunnelConnectionV2 `protobuf:"bytes,13,opt,name=tunnel_connection,json=tunnelConnection,proto3,oneof"`
}

type Event_AccessRequest struct {
	// access_request is a resource for access requests
	AccessRequest *types.AccessRequestV3 `protobuf:"bytes,14,opt,name=access_request,json=accessRequest,proto3,oneof"`
}

type Event_AppSession struct {
	// app_session is an application web session.
	AppSession *types.WebSessionV2 `protobuf:"bytes,15,opt,name=app_session,json=appSession,proto3,oneof"`
}

type Event_RemoteCluster struct {
	// remote_cluster is a resource for remote clusters
	RemoteCluster *types.RemoteClusterV3 `protobuf:"bytes,16,opt,name=remote_cluster,json=remoteCluster,proto3,oneof"`
}

type Event_DatabaseServer struct {
	// database_server is a resource for database servers.
	DatabaseServer *types.DatabaseServerV3 `protobuf:"bytes,17,opt,name=database_server,json=databaseServer,proto3,oneof"`
}

type Event_WebSession struct {
	// web_session is a regular web session.
	WebSession *types.WebSessionV2 `protobuf:"bytes,18,opt,name=web_session,json=webSession,proto3,oneof"`
}

type Event_WebToken struct {
	// web_token is a web token.
	WebToken *types.WebTokenV3 `protobuf:"bytes,19,opt,name=web_token,json=webToken,proto3,oneof"`
}

type Event_ClusterNetworkingConfig struct {
	// cluster_networking_config is a resource for cluster networking configuration.
	ClusterNetworkingConfig *types.ClusterNetworkingConfigV2 `protobuf:"bytes,20,opt,name=cluster_networking_config,json=clusterNetworkingConfig,proto3,oneof"`
}

type Event_SessionRecordingConfig struct {
	// session_recording_config is a resource for session recording configuration.
	SessionRecordingConfig *types.SessionRecordingConfigV2 `protobuf:"bytes,21,opt,name=session_recording_config,json=sessionRecordingConfig,proto3,oneof"`
}

type Event_AuthPreference struct {
	// auth_preference is cluster auth preference.
	AuthPreference *types.AuthPreferenceV2 `protobuf:"bytes,22,opt,name=auth_preference,json=authPreference,proto3,oneof"`
}

type Event_ClusterAuditConfig struct {
	// cluster_audit_config is a resource for cluster audit configuration.
	ClusterAuditConfig *types.ClusterAuditConfigV2 `protobuf:"bytes,23,opt,name=cluster_audit_config,json=clusterAuditConfig,proto3,oneof"`
}

type Event_Lock struct {
	// lock is a lock resource.
	Lock *types.LockV2 `protobuf:"bytes,24,opt,name=lock,proto3,oneof"`
}

type Event_NetworkRestrictions struct {
	// network_restrictions is a resource for network restrictions
	NetworkRestrictions *types.NetworkRestrictionsV4 `protobuf:"bytes,25,opt,name=network_restrictions,json=networkRestrictions,proto3,oneof"`
}

type Event_WindowsDesktopService struct {
	// windows_desktop_service is a resource for Windows desktop services.
	WindowsDesktopService *types.WindowsDesktopServiceV3 `protobuf:"bytes,26,opt,name=windows_desktop_service,json=windowsDesktopService,proto3,oneof"`
}

type Event_WindowsDesktop struct {
	// windows_desktop is a resource for Windows desktop host.
	WindowsDesktop *types.WindowsDesktopV3 `protobuf:"bytes,27,opt,name=windows_desktop,json=windowsDesktop,proto3,oneof"`
}

type Event_Database struct {
	// database is a database resource.
	Database *types.DatabaseV3 `protobuf:"bytes,28,opt,name=database,proto3,oneof"`
}

type Event_AppServer struct {
	// app_server is an application server resource.
	AppServer *types.AppServerV3 `protobuf:"bytes,29,opt,name=app_server,json=appServer,proto3,oneof"`
}

type Event_App struct {
	// app is an application resource.
	App *types.AppV3 `protobuf:"bytes,30,opt,name=app,proto3,oneof"`
}

type Event_SnowflakeSession struct {
	// snowflake_session is a Snowflake web session.
	SnowflakeSession *types.WebSessionV2 `protobuf:"bytes,31,opt,name=snowflake_session,json=snowflakeSession,proto3,oneof"`
}

type Event_KubernetesServer struct {
	// kubernetes_server is an Kubernetes server resource.
	KubernetesServer *types.KubernetesServerV3 `protobuf:"bytes,32,opt,name=kubernetes_server,json=kubernetesServer,proto3,oneof"`
}

type Event_KubernetesCluster struct {
	// kubernetes_cluster is an Kubernetes cluster resource.
	KubernetesCluster *types.KubernetesClusterV3 `protobuf:"bytes,33,opt,name=kubernetes_cluster,json=kubernetesCluster,proto3,oneof"`
}

type Event_Installer struct {
	// installer is an installer resource
	Installer *types.InstallerV1 `protobuf:"bytes,34,opt,name=installer,proto3,oneof"`
}

type Event_DatabaseService struct {
	// database_service is a DatabaseService resource
	DatabaseService *types.DatabaseServiceV1 `protobuf:"bytes,35,opt,name=database_service,json=databaseService,proto3,oneof"`
}

type Event_SamlIdpServiceProvider struct {
	// saml_idp_service_provider is a SAMLIdPServiceProvider resource
	SamlIdpServiceProvider *types.SAMLIdPServiceProviderV1 `protobuf:"bytes,36,opt,name=saml_idp_service_provider,json=samlIdpServiceProvider,proto3,oneof"`
}

type Event_SamlIdpSession struct {
	// saml_idp_session is a SAML IdP session.
	SamlIdpSession *types.WebSessionV2 `protobuf:"bytes,37,opt,name=saml_idp_session,json=samlIdpSession,proto3,oneof"`
}

type Event_UserGroup struct {
	// user_group is a UserGroup resource
	UserGroup *types.UserGroupV1 `protobuf:"bytes,38,opt,name=user_group,json=userGroup,proto3,oneof"`
}

type Event_UiConfig struct {
	// ui_config provides a way for users to adjust settings of the UI served by the proxy service.
	UiConfig *types.UIConfigV1 `protobuf:"bytes,39,opt,name=ui_config,json=uiConfig,proto3,oneof"`
}

type Event_OktaImportRule struct {
	// okta_import_rule is an OktaImportRule resource.
	OktaImportRule *types.OktaImportRuleV1 `protobuf:"bytes,40,opt,name=okta_import_rule,json=oktaImportRule,proto3,oneof"`
}

type Event_OktaAssignment struct {
	// okta_assignment is an OktaAssignment resource.
	OktaAssignment *types.OktaAssignmentV1 `protobuf:"bytes,41,opt,name=okta_assignment,json=oktaAssignment,proto3,oneof"`
}

type Event_Integration struct {
	// integration is an Integration resource.
	Integration *types.IntegrationV1 `protobuf:"bytes,42,opt,name=integration,proto3,oneof"`
}

type Event_WatchStatus struct {
	// watch_status is an WatchStatus resource.
	WatchStatus *types.WatchStatusV1 `protobuf:"bytes,43,opt,name=watch_status,json=watchStatus,proto3,oneof"`
}

type Event_HeadlessAuthentication struct {
	// headless_authentication is a HeadlessAuthentication resource.
	HeadlessAuthentication *types.HeadlessAuthentication `protobuf:"bytes,44,opt,name=headless_authentication,json=headlessAuthentication,proto3,oneof"`
}

func (*Event_ResourceHeader) isEvent_Resource() {}

func (*Event_CertAuthority) isEvent_Resource() {}

func (*Event_StaticTokens) isEvent_Resource() {}

func (*Event_ProvisionToken) isEvent_Resource() {}

func (*Event_ClusterName) isEvent_Resource() {}

func (*Event_User) isEvent_Resource() {}

func (*Event_Role) isEvent_Resource() {}

func (*Event_Namespace) isEvent_Resource() {}

func (*Event_Server) isEvent_Resource() {}

func (*Event_ReverseTunnel) isEvent_Resource() {}

func (*Event_TunnelConnection) isEvent_Resource() {}

func (*Event_AccessRequest) isEvent_Resource() {}

func (*Event_AppSession) isEvent_Resource() {}

func (*Event_RemoteCluster) isEvent_Resource() {}

func (*Event_DatabaseServer) isEvent_Resource() {}

func (*Event_WebSession) isEvent_Resource() {}

func (*Event_WebToken) isEvent_Resource() {}

func (*Event_ClusterNetworkingConfig) isEvent_Resource() {}

func (*Event_SessionRecordingConfig) isEvent_Resource() {}

func (*Event_AuthPreference) isEvent_Resource() {}

func (*Event_ClusterAuditConfig) isEvent_Resource() {}

func (*Event_Lock) isEvent_Resource() {}

func (*Event_NetworkRestrictions) isEvent_Resource() {}

func (*Event_WindowsDesktopService) isEvent_Resource() {}

func (*Event_WindowsDesktop) isEvent_Resource() {}

func (*Event_Database) isEvent_Resource() {}

func (*Event_AppServer) isEvent_Resource() {}

func (*Event_App) isEvent_Resource() {}

func (*Event_SnowflakeSession) isEvent_Resource() {}

func (*Event_KubernetesServer) isEvent_Resource() {}

func (*Event_KubernetesCluster) isEvent_Resource() {}

func (*Event_Installer) isEvent_Resource() {}

func (*Event_DatabaseService) isEvent_Resource() {}

func (*Event_SamlIdpServiceProvider) isEvent_Resource() {}

func (*Event_SamlIdpSession) isEvent_Resource() {}

func (*Event_UserGroup) isEvent_Resource() {}

func (*Event_UiConfig) isEvent_Resource() {}

func (*Event_OktaImportRule) isEvent_Resource() {}

func (*Event_OktaAssignment) isEvent_Resource() {}

func (*Event_Integration) isEvent_Resource() {}

func (*Event_WatchStatus) isEvent_Resource() {}

func (*Event_HeadlessAuthentication) isEvent_Resource() {}

// Watch specifies watch parameters
type Watch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// kinds specifies object kinds to watch
	Kinds []*types.WatchKind `protobuf:"bytes,1,rep,name=kinds,proto3" json:"kinds,omitempty"`
	// allow_partial_success indicates that the watch should allow partial success.
	AllowPartialSuccess bool `protobuf:"varint,2,opt,name=allow_partial_success,json=allowPartialSuccess,proto3" json:"allow_partial_success,omitempty"`
}

func (x *Watch) Reset() {
	*x = Watch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_event_v1_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Watch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Watch) ProtoMessage() {}

func (x *Watch) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_event_v1_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Watch.ProtoReflect.Descriptor instead.
func (*Watch) Descriptor() ([]byte, []int) {
	return file_teleport_event_v1_event_proto_rawDescGZIP(), []int{1}
}

func (x *Watch) GetKinds() []*types.WatchKind {
	if x != nil {
		return x.Kinds
	}
	return nil
}

func (x *Watch) GetAllowPartialSuccess() bool {
	if x != nil {
		return x.AllowPartialSuccess
	}
	return false
}

var File_teleport_event_v1_event_proto protoreflect.FileDescriptor

var file_teleport_event_v1_event_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x1a, 0x21, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x15, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x40, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x56, 0x32, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x56, 0x32, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x56, 0x32, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x56, 0x32, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x32, 0x48, 0x00,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x56, 0x36, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x32, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x32, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x48, 0x0a, 0x11, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x48,
	0x00, 0x52, 0x10, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x56, 0x33, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x33, 0x48, 0x00, 0x52, 0x0d,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x33, 0x48,
	0x00, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57,
	0x65, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x48, 0x00, 0x52, 0x0a, 0x77,
	0x65, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x77, 0x65, 0x62,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x33, 0x48,
	0x00, 0x52, 0x08, 0x77, 0x65, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5e, 0x0a, 0x19, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x32,
	0x48, 0x00, 0x52, 0x17, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5b, 0x0a, 0x18, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x32, 0x48, 0x00,
	0x52, 0x16, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x32, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x75,
	0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x14,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x32, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a,
	0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x56, 0x32, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x51, 0x0a, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x34, 0x48, 0x00,
	0x52, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x17, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
	0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x56, 0x33, 0x48, 0x00, 0x52, 0x15, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x73, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x42, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x56,
	0x33, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x56, 0x33, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x33, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x61, 0x70, 0x70,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41,
	0x70, 0x70, 0x56, 0x33, 0x48, 0x00, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x42, 0x0a, 0x11, 0x73,
	0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57,
	0x65, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x48, 0x00, 0x52, 0x10, 0x73,
	0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x56, 0x33, 0x48, 0x00, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x12, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x33, 0x48, 0x00, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x56, 0x31, 0x48, 0x00, 0x52,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x10, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x31, 0x48, 0x00,
	0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x5c, 0x0a, 0x19, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x41, 0x4d,
	0x4c, 0x49, 0x64, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x56, 0x31, 0x48, 0x00, 0x52, 0x16, 0x73, 0x61, 0x6d, 0x6c, 0x49, 0x64, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x69, 0x64, 0x70, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x48, 0x00,
	0x52, 0x0e, 0x73, 0x61, 0x6d, 0x6c, 0x49, 0x64, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x31, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x55, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x31, 0x48, 0x00, 0x52, 0x08, 0x75,
	0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x10, 0x6f, 0x6b, 0x74, 0x61, 0x5f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x31, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6b,
	0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0f,
	0x6f, 0x6b, 0x74, 0x61, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b,
	0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x48, 0x00,
	0x52, 0x0e, 0x6f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x48, 0x00, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0c, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x56, 0x31, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x17, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x04, 0x08, 0x07, 0x10,
	0x08, 0x22, 0x63, 0x0a, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x05, 0x6b, 0x69,
	0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x6b, 0x69, 0x6e,
	0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2a, 0x48, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02,
	0x42, 0x4e, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_teleport_event_v1_event_proto_rawDescOnce sync.Once
	file_teleport_event_v1_event_proto_rawDescData = file_teleport_event_v1_event_proto_rawDesc
)

func file_teleport_event_v1_event_proto_rawDescGZIP() []byte {
	file_teleport_event_v1_event_proto_rawDescOnce.Do(func() {
		file_teleport_event_v1_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_teleport_event_v1_event_proto_rawDescData)
	})
	return file_teleport_event_v1_event_proto_rawDescData
}

var file_teleport_event_v1_event_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_teleport_event_v1_event_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_teleport_event_v1_event_proto_goTypes = []interface{}{
	(Operation)(0),                          // 0: teleport.event.v1.Operation
	(*Event)(nil),                           // 1: teleport.event.v1.Event
	(*Watch)(nil),                           // 2: teleport.event.v1.Watch
	(*types.ResourceHeader)(nil),            // 3: types.ResourceHeader
	(*types.CertAuthorityV2)(nil),           // 4: types.CertAuthorityV2
	(*types.StaticTokensV2)(nil),            // 5: types.StaticTokensV2
	(*types.ProvisionTokenV2)(nil),          // 6: types.ProvisionTokenV2
	(*types.ClusterNameV2)(nil),             // 7: types.ClusterNameV2
	(*types.UserV2)(nil),                    // 8: types.UserV2
	(*types.RoleV6)(nil),                    // 9: types.RoleV6
	(*types.Namespace)(nil),                 // 10: types.Namespace
	(*types.ServerV2)(nil),                  // 11: types.ServerV2
	(*types.ReverseTunnelV2)(nil),           // 12: types.ReverseTunnelV2
	(*types.TunnelConnectionV2)(nil),        // 13: types.TunnelConnectionV2
	(*types.AccessRequestV3)(nil),           // 14: types.AccessRequestV3
	(*types.WebSessionV2)(nil),              // 15: types.WebSessionV2
	(*types.RemoteClusterV3)(nil),           // 16: types.RemoteClusterV3
	(*types.DatabaseServerV3)(nil),          // 17: types.DatabaseServerV3
	(*types.WebTokenV3)(nil),                // 18: types.WebTokenV3
	(*types.ClusterNetworkingConfigV2)(nil), // 19: types.ClusterNetworkingConfigV2
	(*types.SessionRecordingConfigV2)(nil),  // 20: types.SessionRecordingConfigV2
	(*types.AuthPreferenceV2)(nil),          // 21: types.AuthPreferenceV2
	(*types.ClusterAuditConfigV2)(nil),      // 22: types.ClusterAuditConfigV2
	(*types.LockV2)(nil),                    // 23: types.LockV2
	(*types.NetworkRestrictionsV4)(nil),     // 24: types.NetworkRestrictionsV4
	(*types.WindowsDesktopServiceV3)(nil),   // 25: types.WindowsDesktopServiceV3
	(*types.WindowsDesktopV3)(nil),          // 26: types.WindowsDesktopV3
	(*types.DatabaseV3)(nil),                // 27: types.DatabaseV3
	(*types.AppServerV3)(nil),               // 28: types.AppServerV3
	(*types.AppV3)(nil),                     // 29: types.AppV3
	(*types.KubernetesServerV3)(nil),        // 30: types.KubernetesServerV3
	(*types.KubernetesClusterV3)(nil),       // 31: types.KubernetesClusterV3
	(*types.InstallerV1)(nil),               // 32: types.InstallerV1
	(*types.DatabaseServiceV1)(nil),         // 33: types.DatabaseServiceV1
	(*types.SAMLIdPServiceProviderV1)(nil),  // 34: types.SAMLIdPServiceProviderV1
	(*types.UserGroupV1)(nil),               // 35: types.UserGroupV1
	(*types.UIConfigV1)(nil),                // 36: types.UIConfigV1
	(*types.OktaImportRuleV1)(nil),          // 37: types.OktaImportRuleV1
	(*types.OktaAssignmentV1)(nil),          // 38: types.OktaAssignmentV1
	(*types.IntegrationV1)(nil),             // 39: types.IntegrationV1
	(*types.WatchStatusV1)(nil),             // 40: types.WatchStatusV1
	(*types.HeadlessAuthentication)(nil),    // 41: types.HeadlessAuthentication
	(*types.WatchKind)(nil),                 // 42: types.WatchKind
}
var file_teleport_event_v1_event_proto_depIdxs = []int32{
	0,  // 0: teleport.event.v1.Event.type:type_name -> teleport.event.v1.Operation
	3,  // 1: teleport.event.v1.Event.resource_header:type_name -> types.ResourceHeader
	4,  // 2: teleport.event.v1.Event.cert_authority:type_name -> types.CertAuthorityV2
	5,  // 3: teleport.event.v1.Event.static_tokens:type_name -> types.StaticTokensV2
	6,  // 4: teleport.event.v1.Event.provision_token:type_name -> types.ProvisionTokenV2
	7,  // 5: teleport.event.v1.Event.cluster_name:type_name -> types.ClusterNameV2
	8,  // 6: teleport.event.v1.Event.user:type_name -> types.UserV2
	9,  // 7: teleport.event.v1.Event.role:type_name -> types.RoleV6
	10, // 8: teleport.event.v1.Event.namespace:type_name -> types.Namespace
	11, // 9: teleport.event.v1.Event.server:type_name -> types.ServerV2
	12, // 10: teleport.event.v1.Event.reverse_tunnel:type_name -> types.ReverseTunnelV2
	13, // 11: teleport.event.v1.Event.tunnel_connection:type_name -> types.TunnelConnectionV2
	14, // 12: teleport.event.v1.Event.access_request:type_name -> types.AccessRequestV3
	15, // 13: teleport.event.v1.Event.app_session:type_name -> types.WebSessionV2
	16, // 14: teleport.event.v1.Event.remote_cluster:type_name -> types.RemoteClusterV3
	17, // 15: teleport.event.v1.Event.database_server:type_name -> types.DatabaseServerV3
	15, // 16: teleport.event.v1.Event.web_session:type_name -> types.WebSessionV2
	18, // 17: teleport.event.v1.Event.web_token:type_name -> types.WebTokenV3
	19, // 18: teleport.event.v1.Event.cluster_networking_config:type_name -> types.ClusterNetworkingConfigV2
	20, // 19: teleport.event.v1.Event.session_recording_config:type_name -> types.SessionRecordingConfigV2
	21, // 20: teleport.event.v1.Event.auth_preference:type_name -> types.AuthPreferenceV2
	22, // 21: teleport.event.v1.Event.cluster_audit_config:type_name -> types.ClusterAuditConfigV2
	23, // 22: teleport.event.v1.Event.lock:type_name -> types.LockV2
	24, // 23: teleport.event.v1.Event.network_restrictions:type_name -> types.NetworkRestrictionsV4
	25, // 24: teleport.event.v1.Event.windows_desktop_service:type_name -> types.WindowsDesktopServiceV3
	26, // 25: teleport.event.v1.Event.windows_desktop:type_name -> types.WindowsDesktopV3
	27, // 26: teleport.event.v1.Event.database:type_name -> types.DatabaseV3
	28, // 27: teleport.event.v1.Event.app_server:type_name -> types.AppServerV3
	29, // 28: teleport.event.v1.Event.app:type_name -> types.AppV3
	15, // 29: teleport.event.v1.Event.snowflake_session:type_name -> types.WebSessionV2
	30, // 30: teleport.event.v1.Event.kubernetes_server:type_name -> types.KubernetesServerV3
	31, // 31: teleport.event.v1.Event.kubernetes_cluster:type_name -> types.KubernetesClusterV3
	32, // 32: teleport.event.v1.Event.installer:type_name -> types.InstallerV1
	33, // 33: teleport.event.v1.Event.database_service:type_name -> types.DatabaseServiceV1
	34, // 34: teleport.event.v1.Event.saml_idp_service_provider:type_name -> types.SAMLIdPServiceProviderV1
	15, // 35: teleport.event.v1.Event.saml_idp_session:type_name -> types.WebSessionV2
	35, // 36: teleport.event.v1.Event.user_group:type_name -> types.UserGroupV1
	36, // 37: teleport.event.v1.Event.ui_config:type_name -> types.UIConfigV1
	37, // 38: teleport.event.v1.Event.okta_import_rule:type_name -> types.OktaImportRuleV1
	38, // 39: teleport.event.v1.Event.okta_assignment:type_name -> types.OktaAssignmentV1
	39, // 40: teleport.event.v1.Event.integration:type_name -> types.IntegrationV1
	40, // 41: teleport.event.v1.Event.watch_status:type_name -> types.WatchStatusV1
	41, // 42: teleport.event.v1.Event.headless_authentication:type_name -> types.HeadlessAuthentication
	42, // 43: teleport.event.v1.Watch.kinds:type_name -> types.WatchKind
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_teleport_event_v1_event_proto_init() }
func file_teleport_event_v1_event_proto_init() {
	if File_teleport_event_v1_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_teleport_event_v1_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_event_v1_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Watch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_teleport_event_v1_event_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Event_ResourceHeader)(nil),
		(*Event_CertAuthority)(nil),
		(*Event_StaticTokens)(nil),
		(*Event_ProvisionToken)(nil),
		(*Event_ClusterName)(nil),
		(*Event_User)(nil),
		(*Event_Role)(nil),
		(*Event_Namespace)(nil),
		(*Event_Server)(nil),
		(*Event_ReverseTunnel)(nil),
		(*Event_TunnelConnection)(nil),
		(*Event_AccessRequest)(nil),
		(*Event_AppSession)(nil),
		(*Event_RemoteCluster)(nil),
		(*Event_DatabaseServer)(nil),
		(*Event_WebSession)(nil),
		(*Event_WebToken)(nil),
		(*Event_ClusterNetworkingConfig)(nil),
		(*Event_SessionRecordingConfig)(nil),
		(*Event_AuthPreference)(nil),
		(*Event_ClusterAuditConfig)(nil),
		(*Event_Lock)(nil),
		(*Event_NetworkRestrictions)(nil),
		(*Event_WindowsDesktopService)(nil),
		(*Event_WindowsDesktop)(nil),
		(*Event_Database)(nil),
		(*Event_AppServer)(nil),
		(*Event_App)(nil),
		(*Event_SnowflakeSession)(nil),
		(*Event_KubernetesServer)(nil),
		(*Event_KubernetesCluster)(nil),
		(*Event_Installer)(nil),
		(*Event_DatabaseService)(nil),
		(*Event_SamlIdpServiceProvider)(nil),
		(*Event_SamlIdpSession)(nil),
		(*Event_UserGroup)(nil),
		(*Event_UiConfig)(nil),
		(*Event_OktaImportRule)(nil),
		(*Event_OktaAssignment)(nil),
		(*Event_Integration)(nil),
		(*Event_WatchStatus)(nil),
		(*Event_HeadlessAuthentication)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teleport_event_v1_event_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_event_v1_event_proto_goTypes,
		DependencyIndexes: file_teleport_event_v1_event_proto_depIdxs,
		EnumInfos:         file_teleport_event_v1_event_proto_enumTypes,
		MessageInfos:      file_teleport_event_v1_event_proto_msgTypes,
	}.Build()
	File_teleport_event_v1_event_proto = out.File
	file_teleport_event_v1_event_proto_rawDesc = nil
	file_teleport_event_v1_event_proto_goTypes = nil
	file_teleport_event_v1_event_proto_depIdxs = nil
}
