// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teleport/loginrule/v1/loginrule_service.proto

package loginrulev1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CreateLoginRuleRequest is a request to create a login rule.
type CreateLoginRuleRequest struct {
	// LoginRule is the login rule to be created.
	LoginRule            *LoginRule `protobuf:"bytes,1,opt,name=login_rule,json=loginRule,proto3" json:"login_rule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateLoginRuleRequest) Reset()         { *m = CreateLoginRuleRequest{} }
func (m *CreateLoginRuleRequest) String() string { return proto.CompactTextString(m) }
func (*CreateLoginRuleRequest) ProtoMessage()    {}
func (*CreateLoginRuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_512a9b51702351ee, []int{0}
}
func (m *CreateLoginRuleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateLoginRuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateLoginRuleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateLoginRuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateLoginRuleRequest.Merge(m, src)
}
func (m *CreateLoginRuleRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateLoginRuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateLoginRuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateLoginRuleRequest proto.InternalMessageInfo

func (m *CreateLoginRuleRequest) GetLoginRule() *LoginRule {
	if m != nil {
		return m.LoginRule
	}
	return nil
}

// UpsertLoginRuleRequest is a request to upsert a login rule.
type UpsertLoginRuleRequest struct {
	// LoginRule is the login rule to be created.
	LoginRule            *LoginRule `protobuf:"bytes,1,opt,name=login_rule,json=loginRule,proto3" json:"login_rule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UpsertLoginRuleRequest) Reset()         { *m = UpsertLoginRuleRequest{} }
func (m *UpsertLoginRuleRequest) String() string { return proto.CompactTextString(m) }
func (*UpsertLoginRuleRequest) ProtoMessage()    {}
func (*UpsertLoginRuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_512a9b51702351ee, []int{1}
}
func (m *UpsertLoginRuleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertLoginRuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertLoginRuleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertLoginRuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertLoginRuleRequest.Merge(m, src)
}
func (m *UpsertLoginRuleRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertLoginRuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertLoginRuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertLoginRuleRequest proto.InternalMessageInfo

func (m *UpsertLoginRuleRequest) GetLoginRule() *LoginRule {
	if m != nil {
		return m.LoginRule
	}
	return nil
}

// GetLoginRuleRequest is a request to get a single login rule.
type GetLoginRuleRequest struct {
	// Name is the name of the login rule to get.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLoginRuleRequest) Reset()         { *m = GetLoginRuleRequest{} }
func (m *GetLoginRuleRequest) String() string { return proto.CompactTextString(m) }
func (*GetLoginRuleRequest) ProtoMessage()    {}
func (*GetLoginRuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_512a9b51702351ee, []int{2}
}
func (m *GetLoginRuleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLoginRuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLoginRuleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLoginRuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLoginRuleRequest.Merge(m, src)
}
func (m *GetLoginRuleRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLoginRuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLoginRuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLoginRuleRequest proto.InternalMessageInfo

func (m *GetLoginRuleRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// ListLoginRulesRequest is a paginated request to list all login rules.
type ListLoginRulesRequest struct {
	// PageSize is The maximum number of login rules to return in a single
	// reponse.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// PageToken is the NextPageToken value returned from a previous
	// ListLoginRules request, if any.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListLoginRulesRequest) Reset()         { *m = ListLoginRulesRequest{} }
func (m *ListLoginRulesRequest) String() string { return proto.CompactTextString(m) }
func (*ListLoginRulesRequest) ProtoMessage()    {}
func (*ListLoginRulesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_512a9b51702351ee, []int{3}
}
func (m *ListLoginRulesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLoginRulesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLoginRulesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLoginRulesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLoginRulesRequest.Merge(m, src)
}
func (m *ListLoginRulesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListLoginRulesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLoginRulesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListLoginRulesRequest proto.InternalMessageInfo

func (m *ListLoginRulesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListLoginRulesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// ListLoginRulesResponse is a paginated response to a ListLoginRulesRequest.
type ListLoginRulesResponse struct {
	// LoginRules is the list of login rules.
	LoginRules []*LoginRule `protobuf:"bytes,1,rep,name=login_rules,json=loginRules,proto3" json:"login_rules,omitempty"`
	// NextPageToken is a token to retrieve the next page of results, or empty
	// if there are no more results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListLoginRulesResponse) Reset()         { *m = ListLoginRulesResponse{} }
func (m *ListLoginRulesResponse) String() string { return proto.CompactTextString(m) }
func (*ListLoginRulesResponse) ProtoMessage()    {}
func (*ListLoginRulesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_512a9b51702351ee, []int{4}
}
func (m *ListLoginRulesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLoginRulesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLoginRulesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLoginRulesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLoginRulesResponse.Merge(m, src)
}
func (m *ListLoginRulesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListLoginRulesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLoginRulesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListLoginRulesResponse proto.InternalMessageInfo

func (m *ListLoginRulesResponse) GetLoginRules() []*LoginRule {
	if m != nil {
		return m.LoginRules
	}
	return nil
}

func (m *ListLoginRulesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// DeleteLoginRuleRequest is a request to delete a login rule.
type DeleteLoginRuleRequest struct {
	// Name is the name of the login rule to delete.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteLoginRuleRequest) Reset()         { *m = DeleteLoginRuleRequest{} }
func (m *DeleteLoginRuleRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteLoginRuleRequest) ProtoMessage()    {}
func (*DeleteLoginRuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_512a9b51702351ee, []int{5}
}
func (m *DeleteLoginRuleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteLoginRuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteLoginRuleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteLoginRuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteLoginRuleRequest.Merge(m, src)
}
func (m *DeleteLoginRuleRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteLoginRuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteLoginRuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteLoginRuleRequest proto.InternalMessageInfo

func (m *DeleteLoginRuleRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateLoginRuleRequest)(nil), "teleport.loginrule.v1.CreateLoginRuleRequest")
	proto.RegisterType((*UpsertLoginRuleRequest)(nil), "teleport.loginrule.v1.UpsertLoginRuleRequest")
	proto.RegisterType((*GetLoginRuleRequest)(nil), "teleport.loginrule.v1.GetLoginRuleRequest")
	proto.RegisterType((*ListLoginRulesRequest)(nil), "teleport.loginrule.v1.ListLoginRulesRequest")
	proto.RegisterType((*ListLoginRulesResponse)(nil), "teleport.loginrule.v1.ListLoginRulesResponse")
	proto.RegisterType((*DeleteLoginRuleRequest)(nil), "teleport.loginrule.v1.DeleteLoginRuleRequest")
}

func init() {
	proto.RegisterFile("teleport/loginrule/v1/loginrule_service.proto", fileDescriptor_512a9b51702351ee)
}

var fileDescriptor_512a9b51702351ee = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x8b, 0xd4, 0x40,
	0x10, 0x25, 0xba, 0x8a, 0x53, 0xab, 0x8e, 0xb4, 0xec, 0x30, 0x64, 0x71, 0x18, 0x06, 0x14, 0x95,
	0x9d, 0x6e, 0x66, 0x3d, 0x7a, 0x10, 0xbf, 0xf0, 0xb2, 0x07, 0x99, 0x59, 0x41, 0x45, 0x08, 0xc9,
	0x52, 0xb6, 0x8d, 0x9d, 0x74, 0x4c, 0x77, 0x82, 0xee, 0x4d, 0xfc, 0x73, 0x1e, 0xfd, 0x09, 0x32,
	0xbf, 0x44, 0x3a, 0x31, 0x89, 0x66, 0x3b, 0x6c, 0x0e, 0x7b, 0xeb, 0xae, 0x7e, 0xf5, 0xaa, 0xaa,
	0xeb, 0xf1, 0x60, 0x69, 0x50, 0x62, 0xaa, 0x32, 0xc3, 0xa4, 0xe2, 0x22, 0xc9, 0x72, 0x89, 0xac,
	0x58, 0xb5, 0x97, 0x40, 0x63, 0x56, 0x88, 0x13, 0xa4, 0x69, 0xa6, 0x8c, 0x22, 0x7b, 0x35, 0x9c,
	0x36, 0x08, 0x5a, 0xac, 0xfc, 0x7d, 0xae, 0x14, 0x97, 0xc8, 0x4a, 0x50, 0x94, 0x7f, 0x64, 0x18,
	0xa7, 0xe6, 0x5b, 0x95, 0xe3, 0xdf, 0x3d, 0xa7, 0x44, 0x05, 0x5b, 0xbc, 0x83, 0xc9, 0xf3, 0x0c,
	0x43, 0x83, 0x47, 0xf6, 0x61, 0x9d, 0x4b, 0x5c, 0xe3, 0x97, 0x1c, 0xb5, 0x21, 0x4f, 0x00, 0x4a,
	0x70, 0x60, 0xd1, 0x53, 0x6f, 0xee, 0xdd, 0xdf, 0x3d, 0x9c, 0x53, 0x67, 0x27, 0xb4, 0x4d, 0x1e,
	0xc9, 0xfa, 0x68, 0xa9, 0xdf, 0xa4, 0x1a, 0x33, 0x73, 0xf1, 0xd4, 0x0f, 0xe0, 0xf6, 0x2b, 0x3c,
	0xcb, 0x4b, 0x60, 0x27, 0x09, 0xe3, 0x8a, 0x71, 0xb4, 0x2e, 0xcf, 0x8b, 0x0d, 0xec, 0x1d, 0x09,
	0xdd, 0x62, 0x75, 0x0d, 0xde, 0x87, 0x51, 0x1a, 0x72, 0x0c, 0xb4, 0x38, 0xad, 0x32, 0xae, 0xac,
	0xaf, 0xd9, 0xc0, 0x46, 0x9c, 0x22, 0xb9, 0x03, 0x50, 0x3e, 0x1a, 0xf5, 0x19, 0x93, 0xe9, 0xa5,
	0x92, 0xaf, 0x84, 0x1f, 0xdb, 0xc0, 0xe2, 0x87, 0x07, 0x93, 0x2e, 0xab, 0x4e, 0x55, 0xa2, 0x91,
	0x3c, 0x85, 0xdd, 0x76, 0x36, 0x3d, 0xf5, 0xe6, 0x97, 0x07, 0x0d, 0x07, 0xcd, 0x70, 0x9a, 0xdc,
	0x83, 0x71, 0x82, 0x5f, 0x4d, 0x70, 0xa6, 0x83, 0x1b, 0x36, 0xfc, 0xba, 0xe9, 0xe2, 0x00, 0x26,
	0x2f, 0x50, 0xa2, 0x63, 0x77, 0x8e, 0x8f, 0x38, 0xfc, 0xbe, 0x03, 0xb7, 0x1a, 0xe0, 0xa6, 0xd2,
	0x17, 0x89, 0x60, 0xdc, 0x59, 0x3f, 0x59, 0xf6, 0xf4, 0xea, 0x96, 0x89, 0x7f, 0xee, 0x68, 0xb6,
	0x46, 0x47, 0x07, 0xbd, 0x35, 0xdc, 0x7a, 0x19, 0x50, 0xe3, 0x03, 0x5c, 0xff, 0x57, 0x10, 0xe4,
	0x61, 0x4f, 0x86, 0x43, 0x35, 0x03, 0xd8, 0x63, 0xb8, 0xf9, 0xff, 0xb6, 0xc9, 0x41, 0x5f, 0x8e,
	0x4b, 0x6a, 0xfe, 0x72, 0x20, 0xfa, 0xaf, 0x84, 0xde, 0xc2, 0xb8, 0xb3, 0xd7, 0xde, 0x0f, 0x73,
	0xef, 0xdf, 0x9f, 0xd0, 0xca, 0x1a, 0x68, 0x6d, 0x0d, 0xf4, 0xa5, 0xb5, 0x86, 0x67, 0xd1, 0xcf,
	0xed, 0xcc, 0xfb, 0xb5, 0x9d, 0x79, 0xbf, 0xb7, 0x33, 0xef, 0xfd, 0x31, 0x17, 0xe6, 0x53, 0x1e,
	0xd1, 0x13, 0x15, 0x33, 0x9e, 0x85, 0x85, 0x30, 0xa1, 0x11, 0x2a, 0x09, 0x25, 0x6b, 0xbc, 0x23,
	0x4c, 0x05, 0xe3, 0x98, 0x54, 0x16, 0xc3, 0xb8, 0x62, 0x4e, 0x57, 0x79, 0xdc, 0x5c, 0x8a, 0x55,
	0x74, 0xb5, 0xc4, 0x3e, 0xfa, 0x13, 0x00, 0x00, 0xff, 0xff, 0x22, 0xb3, 0xca, 0xf7, 0xe4, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoginRuleServiceClient is the client API for LoginRuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoginRuleServiceClient interface {
	// CreateLoginRule creates a login rule if one with the same name does not
	// already exist, else it returns an error.
	CreateLoginRule(ctx context.Context, in *CreateLoginRuleRequest, opts ...grpc.CallOption) (*LoginRule, error)
	// UpsertLoginRule creates a login rule if one with the same name does not
	// already exist, else it replaces the existing login rule.
	UpsertLoginRule(ctx context.Context, in *UpsertLoginRuleRequest, opts ...grpc.CallOption) (*LoginRule, error)
	// GetLoginRule retrieves a login rule described by the given request.
	GetLoginRule(ctx context.Context, in *GetLoginRuleRequest, opts ...grpc.CallOption) (*LoginRule, error)
	// ListLoginRules lists all login rules.
	ListLoginRules(ctx context.Context, in *ListLoginRulesRequest, opts ...grpc.CallOption) (*ListLoginRulesResponse, error)
	// DeleteLoginRule deletes an existing login rule.
	DeleteLoginRule(ctx context.Context, in *DeleteLoginRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type loginRuleServiceClient struct {
	cc *grpc.ClientConn
}

func NewLoginRuleServiceClient(cc *grpc.ClientConn) LoginRuleServiceClient {
	return &loginRuleServiceClient{cc}
}

func (c *loginRuleServiceClient) CreateLoginRule(ctx context.Context, in *CreateLoginRuleRequest, opts ...grpc.CallOption) (*LoginRule, error) {
	out := new(LoginRule)
	err := c.cc.Invoke(ctx, "/teleport.loginrule.v1.LoginRuleService/CreateLoginRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginRuleServiceClient) UpsertLoginRule(ctx context.Context, in *UpsertLoginRuleRequest, opts ...grpc.CallOption) (*LoginRule, error) {
	out := new(LoginRule)
	err := c.cc.Invoke(ctx, "/teleport.loginrule.v1.LoginRuleService/UpsertLoginRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginRuleServiceClient) GetLoginRule(ctx context.Context, in *GetLoginRuleRequest, opts ...grpc.CallOption) (*LoginRule, error) {
	out := new(LoginRule)
	err := c.cc.Invoke(ctx, "/teleport.loginrule.v1.LoginRuleService/GetLoginRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginRuleServiceClient) ListLoginRules(ctx context.Context, in *ListLoginRulesRequest, opts ...grpc.CallOption) (*ListLoginRulesResponse, error) {
	out := new(ListLoginRulesResponse)
	err := c.cc.Invoke(ctx, "/teleport.loginrule.v1.LoginRuleService/ListLoginRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginRuleServiceClient) DeleteLoginRule(ctx context.Context, in *DeleteLoginRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/teleport.loginrule.v1.LoginRuleService/DeleteLoginRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginRuleServiceServer is the server API for LoginRuleService service.
type LoginRuleServiceServer interface {
	// CreateLoginRule creates a login rule if one with the same name does not
	// already exist, else it returns an error.
	CreateLoginRule(context.Context, *CreateLoginRuleRequest) (*LoginRule, error)
	// UpsertLoginRule creates a login rule if one with the same name does not
	// already exist, else it replaces the existing login rule.
	UpsertLoginRule(context.Context, *UpsertLoginRuleRequest) (*LoginRule, error)
	// GetLoginRule retrieves a login rule described by the given request.
	GetLoginRule(context.Context, *GetLoginRuleRequest) (*LoginRule, error)
	// ListLoginRules lists all login rules.
	ListLoginRules(context.Context, *ListLoginRulesRequest) (*ListLoginRulesResponse, error)
	// DeleteLoginRule deletes an existing login rule.
	DeleteLoginRule(context.Context, *DeleteLoginRuleRequest) (*emptypb.Empty, error)
}

// UnimplementedLoginRuleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLoginRuleServiceServer struct {
}

func (*UnimplementedLoginRuleServiceServer) CreateLoginRule(ctx context.Context, req *CreateLoginRuleRequest) (*LoginRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoginRule not implemented")
}
func (*UnimplementedLoginRuleServiceServer) UpsertLoginRule(ctx context.Context, req *UpsertLoginRuleRequest) (*LoginRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertLoginRule not implemented")
}
func (*UnimplementedLoginRuleServiceServer) GetLoginRule(ctx context.Context, req *GetLoginRuleRequest) (*LoginRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginRule not implemented")
}
func (*UnimplementedLoginRuleServiceServer) ListLoginRules(ctx context.Context, req *ListLoginRulesRequest) (*ListLoginRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginRules not implemented")
}
func (*UnimplementedLoginRuleServiceServer) DeleteLoginRule(ctx context.Context, req *DeleteLoginRuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoginRule not implemented")
}

func RegisterLoginRuleServiceServer(s *grpc.Server, srv LoginRuleServiceServer) {
	s.RegisterService(&_LoginRuleService_serviceDesc, srv)
}

func _LoginRuleService_CreateLoginRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoginRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginRuleServiceServer).CreateLoginRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.loginrule.v1.LoginRuleService/CreateLoginRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginRuleServiceServer).CreateLoginRule(ctx, req.(*CreateLoginRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginRuleService_UpsertLoginRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertLoginRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginRuleServiceServer).UpsertLoginRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.loginrule.v1.LoginRuleService/UpsertLoginRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginRuleServiceServer).UpsertLoginRule(ctx, req.(*UpsertLoginRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginRuleService_GetLoginRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginRuleServiceServer).GetLoginRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.loginrule.v1.LoginRuleService/GetLoginRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginRuleServiceServer).GetLoginRule(ctx, req.(*GetLoginRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginRuleService_ListLoginRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginRuleServiceServer).ListLoginRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.loginrule.v1.LoginRuleService/ListLoginRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginRuleServiceServer).ListLoginRules(ctx, req.(*ListLoginRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginRuleService_DeleteLoginRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoginRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginRuleServiceServer).DeleteLoginRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.loginrule.v1.LoginRuleService/DeleteLoginRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginRuleServiceServer).DeleteLoginRule(ctx, req.(*DeleteLoginRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoginRuleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.loginrule.v1.LoginRuleService",
	HandlerType: (*LoginRuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLoginRule",
			Handler:    _LoginRuleService_CreateLoginRule_Handler,
		},
		{
			MethodName: "UpsertLoginRule",
			Handler:    _LoginRuleService_UpsertLoginRule_Handler,
		},
		{
			MethodName: "GetLoginRule",
			Handler:    _LoginRuleService_GetLoginRule_Handler,
		},
		{
			MethodName: "ListLoginRules",
			Handler:    _LoginRuleService_ListLoginRules_Handler,
		},
		{
			MethodName: "DeleteLoginRule",
			Handler:    _LoginRuleService_DeleteLoginRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/loginrule/v1/loginrule_service.proto",
}

func (m *CreateLoginRuleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateLoginRuleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateLoginRuleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LoginRule != nil {
		{
			size, err := m.LoginRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLoginruleService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertLoginRuleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertLoginRuleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertLoginRuleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LoginRule != nil {
		{
			size, err := m.LoginRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLoginruleService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLoginRuleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLoginRuleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLoginRuleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLoginruleService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListLoginRulesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLoginRulesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListLoginRulesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PageToken) > 0 {
		i -= len(m.PageToken)
		copy(dAtA[i:], m.PageToken)
		i = encodeVarintLoginruleService(dAtA, i, uint64(len(m.PageToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.PageSize != 0 {
		i = encodeVarintLoginruleService(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListLoginRulesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLoginRulesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListLoginRulesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintLoginruleService(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LoginRules) > 0 {
		for iNdEx := len(m.LoginRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoginRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLoginruleService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteLoginRuleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteLoginRuleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteLoginRuleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLoginruleService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLoginruleService(dAtA []byte, offset int, v uint64) int {
	offset -= sovLoginruleService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateLoginRuleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoginRule != nil {
		l = m.LoginRule.Size()
		n += 1 + l + sovLoginruleService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpsertLoginRuleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoginRule != nil {
		l = m.LoginRule.Size()
		n += 1 + l + sovLoginruleService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLoginRuleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLoginruleService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListLoginRulesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageSize != 0 {
		n += 1 + sovLoginruleService(uint64(m.PageSize))
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovLoginruleService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListLoginRulesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LoginRules) > 0 {
		for _, e := range m.LoginRules {
			l = e.Size()
			n += 1 + l + sovLoginruleService(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovLoginruleService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteLoginRuleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLoginruleService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLoginruleService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLoginruleService(x uint64) (n int) {
	return sovLoginruleService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateLoginRuleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoginruleService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateLoginRuleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateLoginRuleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoginruleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoginruleService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoginruleService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoginRule == nil {
				m.LoginRule = &LoginRule{}
			}
			if err := m.LoginRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoginruleService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoginruleService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertLoginRuleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoginruleService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertLoginRuleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertLoginRuleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoginruleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoginruleService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoginruleService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoginRule == nil {
				m.LoginRule = &LoginRule{}
			}
			if err := m.LoginRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoginruleService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoginruleService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLoginRuleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoginruleService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLoginRuleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLoginRuleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoginruleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoginruleService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoginruleService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoginruleService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoginruleService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLoginRulesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoginruleService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLoginRulesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLoginRulesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoginruleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoginruleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoginruleService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoginruleService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoginruleService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoginruleService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLoginRulesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoginruleService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLoginRulesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLoginRulesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoginruleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoginruleService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoginruleService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginRules = append(m.LoginRules, &LoginRule{})
			if err := m.LoginRules[len(m.LoginRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoginruleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoginruleService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoginruleService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoginruleService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoginruleService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteLoginRuleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoginruleService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteLoginRuleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteLoginRuleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoginruleService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoginruleService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoginruleService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoginruleService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoginruleService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLoginruleService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLoginruleService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoginruleService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoginruleService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLoginruleService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLoginruleService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLoginruleService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLoginruleService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLoginruleService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLoginruleService = fmt.Errorf("proto: unexpected end of group")
)
