// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teleport/loginrule/v1/loginrule.proto

package loginrulev1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gravitational/teleport/api/types"
	wrappers "github.com/gravitational/teleport/api/types/wrappers"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LoginRule is a resource to configure rules and logic which should run during
// Teleport user login.
type LoginRule struct {
	// Metadata is resource metadata.
	Metadata *types.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Version is the resource version.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Priority is the priority of the login rule relative to other login rules
	// in the same cluster. Login rules with a lower numbered priority will be
	// evaluated first.
	Priority int32 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	// TraitsMap is a map of trait keys to lists of predicate expressions which
	// should evaluate to the desired values for that trait.
	TraitsMap map[string]*wrappers.StringValues `protobuf:"bytes,4,rep,name=traits_map,json=traitsMap,proto3" json:"traits_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// TraitsExpression is a predicate expression which should return the
	// desired traits for the user upon login.
	TraitsExpression     string   `protobuf:"bytes,5,opt,name=traits_expression,json=traitsExpression,proto3" json:"traits_expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginRule) Reset()         { *m = LoginRule{} }
func (m *LoginRule) String() string { return proto.CompactTextString(m) }
func (*LoginRule) ProtoMessage()    {}
func (*LoginRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9a95c6ef6e34e65, []int{0}
}
func (m *LoginRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRule.Merge(m, src)
}
func (m *LoginRule) XXX_Size() int {
	return m.Size()
}
func (m *LoginRule) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRule.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRule proto.InternalMessageInfo

func (m *LoginRule) GetMetadata() *types.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *LoginRule) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *LoginRule) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *LoginRule) GetTraitsMap() map[string]*wrappers.StringValues {
	if m != nil {
		return m.TraitsMap
	}
	return nil
}

func (m *LoginRule) GetTraitsExpression() string {
	if m != nil {
		return m.TraitsExpression
	}
	return ""
}

func init() {
	proto.RegisterType((*LoginRule)(nil), "teleport.loginrule.v1.LoginRule")
	proto.RegisterMapType((map[string]*wrappers.StringValues)(nil), "teleport.loginrule.v1.LoginRule.TraitsMapEntry")
}

func init() {
	proto.RegisterFile("teleport/loginrule/v1/loginrule.proto", fileDescriptor_c9a95c6ef6e34e65)
}

var fileDescriptor_c9a95c6ef6e34e65 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0xc7, 0xd9, 0xf6, 0xeb, 0x67, 0xb3, 0x05, 0xad, 0x0b, 0x4a, 0xc8, 0xa1, 0x44, 0x41, 0x08,
	0x54, 0x77, 0x69, 0xbd, 0x88, 0xde, 0x84, 0xde, 0xac, 0x87, 0x58, 0x3c, 0x78, 0x91, 0x6d, 0x1d,
	0xe2, 0x62, 0x9a, 0x5d, 0x36, 0x93, 0x68, 0x1e, 0xcf, 0x9b, 0x47, 0x1f, 0x41, 0xfa, 0x24, 0xd2,
	0xa4, 0x4d, 0x10, 0x7a, 0x59, 0xe6, 0x3f, 0xf3, 0x9b, 0xd9, 0x99, 0x9d, 0xa5, 0x67, 0x08, 0x31,
	0x18, 0x6d, 0x51, 0xc4, 0x3a, 0x52, 0x89, 0xcd, 0x62, 0x10, 0xf9, 0xa8, 0x11, 0xdc, 0x58, 0x8d,
	0x9a, 0x1d, 0x6d, 0x31, 0xde, 0x44, 0xf2, 0x91, 0x77, 0xd2, 0x64, 0x43, 0x24, 0x17, 0x85, 0xc0,
	0xc2, 0x40, 0x5a, 0x9d, 0x55, 0xa6, 0x77, 0xb1, 0x1b, 0x79, 0xb7, 0xd2, 0x18, 0xb0, 0x8d, 0x51,
	0xe1, 0xa7, 0x9f, 0x2d, 0xea, 0xdc, 0xad, 0xaf, 0x08, 0xb3, 0x18, 0xd8, 0x90, 0x76, 0x97, 0x80,
	0xf2, 0x45, 0xa2, 0x74, 0x89, 0x4f, 0x82, 0xde, 0xf8, 0x80, 0x57, 0xc5, 0xa7, 0x1b, 0x77, 0x58,
	0x03, 0xcc, 0xa5, 0x7b, 0x39, 0xd8, 0x54, 0xe9, 0xc4, 0x6d, 0xf9, 0x24, 0x70, 0xc2, 0xad, 0x64,
	0x1e, 0xed, 0x1a, 0xab, 0xb4, 0x55, 0x58, 0xb8, 0x6d, 0x9f, 0x04, 0x9d, 0xb0, 0xd6, 0xec, 0x9e,
	0x52, 0xb4, 0x52, 0x61, 0xfa, 0xbc, 0x94, 0xc6, 0xfd, 0xe7, 0xb7, 0x83, 0xde, 0x58, 0xf0, 0x9d,
	0xe3, 0xf2, 0xba, 0x31, 0x3e, 0x2b, 0x53, 0xa6, 0xd2, 0x4c, 0x12, 0xb4, 0x45, 0xe8, 0xe0, 0x56,
	0xb3, 0x21, 0x3d, 0xdc, 0xd4, 0x83, 0x0f, 0x63, 0x21, 0x2d, 0xfb, 0xe9, 0x94, 0xfd, 0xf4, 0xab,
	0xc0, 0xa4, 0xf6, 0x7b, 0x33, 0xba, 0xff, 0xb7, 0x12, 0xeb, 0xd3, 0xf6, 0x1b, 0x14, 0xe5, 0xb0,
	0x4e, 0xb8, 0x36, 0xd9, 0x39, 0xed, 0xe4, 0x32, 0xce, 0xa0, 0x1c, 0xaa, 0x37, 0x3e, 0xe6, 0xf5,
	0x8b, 0x3d, 0xa0, 0x55, 0x49, 0xf4, 0xb8, 0x0e, 0xa6, 0x61, 0x05, 0x5d, 0xb7, 0xae, 0xc8, 0xed,
	0xfc, 0x6b, 0x35, 0x20, 0xdf, 0xab, 0x01, 0xf9, 0x59, 0x0d, 0xc8, 0xd3, 0x2c, 0x52, 0xf8, 0x9a,
	0xcd, 0xf9, 0x42, 0x2f, 0x45, 0x64, 0x65, 0xae, 0x50, 0xa2, 0xd2, 0x89, 0x8c, 0x45, 0xbd, 0x19,
	0x69, 0x94, 0x88, 0x20, 0x11, 0xe5, 0x0a, 0x44, 0xa4, 0xc5, 0xce, 0x4f, 0x71, 0x53, 0x8b, 0x7c,
	0x34, 0xff, 0x5f, 0xb2, 0x97, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x7b, 0x61, 0x48, 0x40,
	0x02, 0x00, 0x00,
}

func (m *LoginRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TraitsExpression) > 0 {
		i -= len(m.TraitsExpression)
		copy(dAtA[i:], m.TraitsExpression)
		i = encodeVarintLoginrule(dAtA, i, uint64(len(m.TraitsExpression)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TraitsMap) > 0 {
		for k := range m.TraitsMap {
			v := m.TraitsMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintLoginrule(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLoginrule(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLoginrule(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Priority != 0 {
		i = encodeVarintLoginrule(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintLoginrule(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLoginrule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLoginrule(dAtA []byte, offset int, v uint64) int {
	offset -= sovLoginrule(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoginRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovLoginrule(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovLoginrule(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovLoginrule(uint64(m.Priority))
	}
	if len(m.TraitsMap) > 0 {
		for k, v := range m.TraitsMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovLoginrule(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovLoginrule(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovLoginrule(uint64(mapEntrySize))
		}
	}
	l = len(m.TraitsExpression)
	if l > 0 {
		n += 1 + l + sovLoginrule(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLoginrule(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLoginrule(x uint64) (n int) {
	return sovLoginrule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoginRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoginrule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoginrule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoginrule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoginrule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &types.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoginrule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoginrule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoginrule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoginrule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraitsMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoginrule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoginrule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoginrule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TraitsMap == nil {
				m.TraitsMap = make(map[string]*wrappers.StringValues)
			}
			var mapkey string
			var mapvalue *wrappers.StringValues
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLoginrule
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLoginrule
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLoginrule
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLoginrule
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLoginrule
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLoginrule
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLoginrule
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &wrappers.StringValues{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLoginrule(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLoginrule
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TraitsMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraitsExpression", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoginrule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoginrule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoginrule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraitsExpression = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoginrule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoginrule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLoginrule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLoginrule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoginrule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoginrule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLoginrule
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLoginrule
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLoginrule
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLoginrule        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLoginrule          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLoginrule = fmt.Errorf("proto: unexpected end of group")
)
