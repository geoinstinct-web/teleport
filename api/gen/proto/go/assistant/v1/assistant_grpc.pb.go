// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/assistant/v1/assistant.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AssistantService_Complete_FullMethodName     = "/teleport.assistant.v1.AssistantService/Complete"
	AssistantService_TitleSummary_FullMethodName = "/teleport.assistant.v1.AssistantService/TitleSummary"
)

// AssistantServiceClient is the client API for AssistantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssistantServiceClient interface {
	// Complete is the main method used to exchange messages between Teleport and AI backend (currently OpenAI).
	Complete(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*CompletionResponse, error)
	// Create title summary. The title will be saved in the DB after before the title is returned.
	TitleSummary(ctx context.Context, in *TitleSummaryRequest, opts ...grpc.CallOption) (*TitleSummaryResponse, error)
}

type assistantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssistantServiceClient(cc grpc.ClientConnInterface) AssistantServiceClient {
	return &assistantServiceClient{cc}
}

func (c *assistantServiceClient) Complete(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*CompletionResponse, error) {
	out := new(CompletionResponse)
	err := c.cc.Invoke(ctx, AssistantService_Complete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) TitleSummary(ctx context.Context, in *TitleSummaryRequest, opts ...grpc.CallOption) (*TitleSummaryResponse, error) {
	out := new(TitleSummaryResponse)
	err := c.cc.Invoke(ctx, AssistantService_TitleSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssistantServiceServer is the server API for AssistantService service.
// All implementations must embed UnimplementedAssistantServiceServer
// for forward compatibility
type AssistantServiceServer interface {
	// Complete is the main method used to exchange messages between Teleport and AI backend (currently OpenAI).
	Complete(context.Context, *CompleteRequest) (*CompletionResponse, error)
	// Create title summary. The title will be saved in the DB after before the title is returned.
	TitleSummary(context.Context, *TitleSummaryRequest) (*TitleSummaryResponse, error)
	mustEmbedUnimplementedAssistantServiceServer()
}

// UnimplementedAssistantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAssistantServiceServer struct {
}

func (UnimplementedAssistantServiceServer) Complete(context.Context, *CompleteRequest) (*CompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedAssistantServiceServer) TitleSummary(context.Context, *TitleSummaryRequest) (*TitleSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TitleSummary not implemented")
}
func (UnimplementedAssistantServiceServer) mustEmbedUnimplementedAssistantServiceServer() {}

// UnsafeAssistantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssistantServiceServer will
// result in compilation errors.
type UnsafeAssistantServiceServer interface {
	mustEmbedUnimplementedAssistantServiceServer()
}

func RegisterAssistantServiceServer(s grpc.ServiceRegistrar, srv AssistantServiceServer) {
	s.RegisterService(&AssistantService_ServiceDesc, srv)
}

func _AssistantService_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_Complete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).Complete(ctx, req.(*CompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_TitleSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TitleSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).TitleSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_TitleSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).TitleSummary(ctx, req.(*TitleSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssistantService_ServiceDesc is the grpc.ServiceDesc for AssistantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssistantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.assistant.v1.AssistantService",
	HandlerType: (*AssistantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Complete",
			Handler:    _AssistantService_Complete_Handler,
		},
		{
			MethodName: "TitleSummary",
			Handler:    _AssistantService_TitleSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/assistant/v1/assistant.proto",
}
