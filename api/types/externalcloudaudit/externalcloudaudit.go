/*
Copyright 2023 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package externalcloudaudit

import (
	"time"

	"github.com/gravitational/trace"

	"github.com/gravitational/teleport/api/types"
	"github.com/gravitational/teleport/api/types/header"
	"github.com/gravitational/teleport/api/types/header/convert/legacy"
	"github.com/gravitational/teleport/api/utils"
)

// ExternalCloudAudit is internal representation of an external cloud audit resource.
// Proto definion can be found https://github.com/gravitational/teleport/blob/master/api/proto/teleport/externalcloudaudit/v1/externalcloudaudit.proto
type ExternalCloudAudit struct {
	// ResourceHeader is the common resource header for all resources.
	header.ResourceHeader

	// Spec is the specification for the external cloud audit.
	Spec ExternalCloudAuditSpec `json:"spec" yaml:"spec"`
}

// ExternalCloudAuditSpec is the specification for an external cloud audit.
type ExternalCloudAuditSpec struct {
	// IntegrationName is name of existing OIDC intagration used to
	// generate AWS credentials.
	IntegrationName string `json:"integration_name" yaml:"integration_name"`
	// SessionsRecordingsURI is s3 path used to store sessions recordings.
	SessionsRecordingsURI string `json:"sessions_recordings_uri" yaml:"sessions_recordings_uri"`
	// AthenaWorkgroup is workgroup used by Athena audit logs during queries.
	AthenaWorkgroup string `json:"athena_workgroup" yaml:"athena_workgroup"`
	// GlueDatabase is database used by Athena audit logs during queries.
	GlueDatabase string `json:"glue_database" yaml:"glue_database"`
	// GlueTable is table used by Athena audit logs during queries.
	GlueTable string `json:"glue_table" yaml:"glue_table"`
	// AuditEventsLongTermURI is s3 path used to store batched parquet files with
	// audit events, partitioned by event date.
	AuditEventsLongTermURI string `json:"audit_events_long_term_uri" yaml:"audit_events_long_term_uri"`
	// AthenaResultsURI is s3 path used to store temporary results generated by
	// Athena engine.
	AthenaResultsURI string `json:"athena_results_uri" yaml:"athena_results_uri"`
}

// NewDraftExternalCloudAudit will create a new draft external cloud audit.
func NewDraftExternalCloudAudit(metadata header.Metadata, spec ExternalCloudAuditSpec) (*ExternalCloudAudit, error) {
	externalaudit := &ExternalCloudAudit{
		ResourceHeader: header.ResourceHeaderFromMetadata(metadata),
		Spec:           spec,
	}

	name := externalaudit.GetName()
	switch {
	case name == "":
		externalaudit.SetName(types.MetaNameExternalCloudAuditDraft)
	case name != types.MetaNameExternalCloudAuditDraft:
		return nil, trace.BadParameter("draft external cloud audit invalid name")
	}

	if err := externalaudit.CheckAndSetDefaults(); err != nil {
		return nil, trace.Wrap(err)
	}
	return externalaudit, nil
}

// NewClusterExternalCloudAudit will create a new cluster external cloud audit.
func NewClusterExternalCloudAudit(metadata header.Metadata, spec ExternalCloudAuditSpec) (*ExternalCloudAudit, error) {
	externalaudit := &ExternalCloudAudit{
		ResourceHeader: header.ResourceHeaderFromMetadata(metadata),
		Spec:           spec,
	}

	name := externalaudit.GetName()
	switch {
	case name == "":
		externalaudit.SetName(types.MetaNameExternalCloudAuditCluster)
	case name != types.MetaNameExternalCloudAuditCluster:
		return nil, trace.BadParameter("cluster external cloud audit invalid name")
	}

	if err := externalaudit.CheckAndSetDefaults(); err != nil {
		return nil, trace.Wrap(err)
	}
	return externalaudit, nil
}

// CheckAndSetDefaults validates fields and populates empty fields with default values.
func (a *ExternalCloudAudit) CheckAndSetDefaults() error {
	a.SetKind(types.KindExternalCloudAudit)
	a.SetVersion(types.V1)
	a.SetExpiry(time.Time{})

	if err := a.ResourceHeader.CheckAndSetDefaults(); err != nil {
		return trace.Wrap(err)
	}

	if a.Spec.IntegrationName == "" {
		return trace.BadParameter("external cloud audit integration_name required")
	}
	if a.Spec.SessionsRecordingsURI == "" {
		return trace.BadParameter("external cloud audit sessions_recordings_uri required")
	}
	if a.Spec.AthenaWorkgroup == "" {
		return trace.BadParameter("external cloud audit athena_workgroup required")
	}
	if a.Spec.GlueDatabase == "" {
		return trace.BadParameter("external cloud audit glue_database required")
	}
	if a.Spec.GlueTable == "" {
		return trace.BadParameter("external cloud audit glue_table required")
	}
	if a.Spec.AuditEventsLongTermURI == "" {
		return trace.BadParameter("external cloud audit audit_events_long_term_uri required")
	}
	if a.Spec.AthenaResultsURI == "" {
		return trace.BadParameter("external cloud audit athena_results_uri required")
	}

	return nil
}

// GetMetadata returns metadata. This is specifically for conforming to the Resource interface,
// and should be removed when possible.
func (a *ExternalCloudAudit) GetMetadata() types.Metadata {
	return legacy.FromHeaderMetadata(a.Metadata)
}

// MatchSearch goes through select field values of a resource
// and tries to match against the list of search values.
func (a *ExternalCloudAudit) MatchSearch(values []string) bool {
	fieldVals := append(utils.MapToStrings(a.GetAllLabels()), a.GetName())
	return types.MatchSearch(fieldVals, values, nil)
}

// CloneResource returns a copy of the resource as types.ResourceWithLabels.
func (a *ExternalCloudAudit) CloneResource() types.ResourceWithLabels {
	var copy *ExternalCloudAudit
	utils.StrictObjectToStruct(a, &copy)
	return copy
}
