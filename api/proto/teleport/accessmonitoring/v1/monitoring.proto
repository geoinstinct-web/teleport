// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.accessmonitoring.v1;

import "google/protobuf/empty.proto";
import "teleport/header/v1/resourceheader.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/accessmonitoring/v1;accessmonitoring";

// Rule is audit query resource.
message Rule {
  // header is the header for //the resource.
  teleport.header.v1.ResourceHeader header = 1;
  // spec is audit query spec.
  RuleSpec spec = 2;
}

// AuditQuerySpec is audit query spec.
message RuleSpec {
  repeated string subjects = 1;
  repeated string states = 2;
  string condition = 3;
  // Notification settings
  message Notification {
    string name = 1;
    string recipients = 2;
  }
  // AuditEvent is the audit event to monitor.
  message AuditEvent {
    // code is the audit event code to monitor.
    string code = 1;
    // condition is the condition to monitor.
    string condition = 2;
    // action is the action to take when the condition is met.
    string action = 3;
  }
  // audit_event is the audit event to monitor.
  AuditEvent audit_event = 4;
}

// SecReportsService is a service that manages security reports.
service MonitoringService {
  // UpsertAuditQuery upsets an audit query.
  rpc UpsertRule(UpsertRuleRequest) returns (google.protobuf.Empty);
  // GetAuditQuery returns an audit query.
  rpc GetRule(GetRuleRequest) returns (Rule);
  // ListAuditQueries returns a paginated list of all Okta import rule resources.
  rpc ListRules(ListRulesRequest) returns (ListRulesResponse);
  // DeleteAuditQuery deletes an audit query.
  rpc DeleteRule(DeleteRuleRequest) returns (google.protobuf.Empty);
}

// UpsertAuditQueryRequest is audit query upsert request.
message UpsertRuleRequest {
  // rule is the audit query to upsert.
  Rule rule = 1;
}

// GetAuditQueryRequest is audit query get request.
message GetRuleRequest {
  // name is the name of the rule to get.
  string name = 1;
}

// ListARulesRequest is audit query list request.
message ListRulesRequest {
  // page_size is the number of results to return.
  int32 page_size = 1;
  // page_token is the next_token value returned from a previous List request if any.
  string page_token = 2;
}

// ListRulesResponse is audit query list response.
message ListRulesResponse {
  // rules is a list of audit queries.
  repeated Rule rules = 1;
  // next_page_token is the next page token. If there are no more results, it will be empty.
  string next_page_token = 2;
}

// DeleteRuleRequest is audit query delete request.
message DeleteRuleRequest {
  // name is the name of the audit query to delete.
  string name = 1;
}
