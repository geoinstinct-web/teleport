// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.devicetrust.v1;

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/devicetrust/v1;devicetrustv1";

// Encapsulates the value of a PCR at a point at time.
// See https://pkg.go.dev/github.com/google/go-attestation/attest#PCR
message TPMPCR {
  // the PCR index in the PCR bank
  int32 index = 1;
  // the digest currently held in the PCR
  bytes digest = 2;
  // the hash algorithm used to produce the digest in this PCR bank. This value
  // is the underlying value of the Go crypto.Hash type.
  uint64 digest_alg = 3;
}

// Encapsulates the result of a quote operation against the TPM over a PCR
// using an attestation key.
// See https://pkg.go.dev/github.com/google/go-attestation/attest#Quote
message TPMQuote {
  bytes quote = 1;
  bytes signature = 2;
}

// The quotes, PCRs and event log from a TPM that attest to the booted state
// of the machine.
// See https://pkg.go.dev/github.com/google/go-attestation/attest#PlatformParameters
// Excludes TPMVersion and Public since these are already known values.
message TPMPlatformParameters {
  repeated TPMQuote quotes = 1;
  repeated TPMPCR pcrs = 2;
  bytes event_log = 3;
}

// Holds the record of a TPM platform attestation, including the platform
// parameters sent by the device and the nonce the server generated. This allows
// a historical platform attestation to be revalidated and allows us to compare
// the incoming state of a device (e.g during authentication) against the
// historical state in order to detect potentially malicious actions.
message TPMPlatformAttestation {
  bytes nonce = 1;
  TPMPlatformParameters platform_parameters = 2;
}

// The attestation key and the parameters necessary to remotely verify it as
// related to the endorsement key.
// See https://pkg.go.dev/github.com/google/go-attestation/attest#AttestationParameters.
// This message excludes the `UseTCSDActivationFormat` field from the link above
// as it is TMP 1.x specific and always false.
message TPMAttestationParameters {
  // The encoded TPMT_PUBLIC structure containing the attestation public key
  // and signing parameters.
  bytes public = 1;
  // The properties of the attestation key, encoded as a TPMS_CREATION_DATA
  // structure.
  bytes create_data = 2;
  // An assertion as to the details of the key, encoded as a TPMS_ATTEST
  // structure.
  bytes create_attestation = 3;
  // A signature of create_attestation, encoded as a TPMT_SIGNATURE structure.
  bytes create_signature = 4;
}

// These values are used by the TPM2.0 `ActivateCredential` command to produce
// the solution which proves possession of the EK and AK.
//
// For a more in-depth description see:
// - https://pkg.go.dev/github.com/google/go-attestation/attest#EncryptedCredential
// - https://trustedcomputinggroup.org/wp-content/uploads/TCG_TPM2_r1p59_Part3_Commands_code_pub.pdf (Heading 12.5.1 "TPM2_ActivateCredential" "General Description")
// - https://github.com/google/go-attestation/blob/v0.4.3/attest/activation.go#L199
// - https://github.com/google/go-tpm/blob/v0.3.3/tpm2/credactivation/credential_activation.go#L61
message TPMEncryptedCredential {
  // The `credential_blob` parameter to be used with the `ActivateCredential`
  // command. This is used with the decrypted value of `secret` in a
  // cryptographic process to decrypt the solution.
  bytes credential_blob = 1;
  // The `secret` parameter to be used with `ActivateCredential`. This is a
  // seed which can be decrypted with the EK. The decrypted seed is then used
  // when decrypting `credential_blob`.
  bytes secret = 2;
}
