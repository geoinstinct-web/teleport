# AWS LoadBalancer Controller is the AWS recommended way to create AWS LoadBalancer resources
# sending traffic to an EKS cluster. However, this requires cluster administrators to install
# and manage the controller.
# See
# See https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.html and ./aws-lb-controller.yaml
chartMode: aws
clusterName: teleport.example.com                 # Name of your cluster. Use the FQDN you intend to configure in DNS
aws:
  region: us-west-2                               # AWS region
  backendTable: teleport-helm-backend             # DynamoDB table to use for the Teleport backend
  auditLogTable: teleport-helm-events             # DynamoDB table to use for the Teleport audit log (must be different to the backend table)
  auditLogMirrorOnStdout: false                   # Whether to mirror audit log entries to stdout in JSON format (useful for external log collectors)
  sessionRecordingBucket: teleport-helm-sessions  # S3 bucket to use for Teleport session recordings
  backups: true                                   # Whether to turn on DynamoDB backups
  dynamoAutoScaling: false                        # Whether Teleport should configure DynamoDB's autoscaling.
highAvailability:
  replicaCount: 2                                 # Number of replicas to configure
  # cert-manager is not part of the chart, it should be installed by cluster administrators
  certManager:
    enabled: true                                 # Enable cert-manager support to get TLS certificates
    issuerName: letsencrypt-production            # Name of the cert-manager Issuer to use (should be created beforehand)

# Those annotations will configure the AWS LoadBalancer
annotations:
  service:
    service.beta.kubernetes.io/aws-load-balancer-type: external
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    service.beta.kubernetes.io/aws-load-balancer-attributes: load_balancing.cross_zone.enabled=true
    # IMPORTANT: if the EKS cluster runs on EC2 or Fargate and the CNI uses native AWS VPC networking, set target-type to `ip`
    # This will make the LoadBalancer send the traffic to the pods IP directly, which removes an extra network hop
    # See https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/guide/service/annotations/#nlb-target-type
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: instance
