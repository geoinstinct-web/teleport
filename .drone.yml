---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: build-teleport-spacelift-runner-oci-images
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-teleport-spacelift-runner-oci.yml
    -workflow-ref=${DRONE_TAG} -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_TAG} '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: promote-teleport-spacelift-runner-oci-images
trigger:
  event:
    include:
    - promote
  target:
    include:
    - production
    - promote-teleport-spacelift-runner
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow promote-teleport-spacelift-runner-oci.yml
    -workflow-ref=${DRONE_TAG} -input "release-source-tag=${DRONE_TAG}" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: push-build-linux-amd64
trigger:
  event:
    include:
    - push
    exclude:
    - pull_request
  repo:
    include:
    - gravitational/*
  branch:
    include:
    - master
    - branch/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-linux.yaml -workflow-ref=${DRONE_BRANCH}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_COMMIT}
    -input "build-connect=true" -input "release-target=release-amd64-centos7" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
- name: Send Slack notification
  image: plugins/slack:1.4.1
  settings:
    template: |-
      *✘ Failed:* `{{ build.event }}` / `${DRONE_STAGE_NAME}` / <{{ build.link }}|Build: #{{ build.number }}>
      Author: <https://github.com/{{ build.author }}|{{ build.author }}> Repo: <https://github.com/{{ repo.owner }}/{{ repo.name }}/|{{ repo.owner }}/{{ repo.name }}> Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}> Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
    webhook:
      from_secret: SLACK_WEBHOOK_DEV_TELEPORT
  when:
    status:
    - failure
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: push-build-linux-386
trigger:
  event:
    include:
    - push
    exclude:
    - pull_request
  repo:
    include:
    - gravitational/*
  branch:
    include:
    - master
    - branch/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-linux.yaml -workflow-ref=${DRONE_BRANCH}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_COMMIT}
    -input "build-connect=false" -input "release-target=release-386" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
- name: Send Slack notification
  image: plugins/slack:1.4.1
  settings:
    template: |-
      *✘ Failed:* `{{ build.event }}` / `${DRONE_STAGE_NAME}` / <{{ build.link }}|Build: #{{ build.number }}>
      Author: <https://github.com/{{ build.author }}|{{ build.author }}> Repo: <https://github.com/{{ repo.owner }}/{{ repo.name }}/|{{ repo.owner }}/{{ repo.name }}> Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}> Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
    webhook:
      from_secret: SLACK_WEBHOOK_DEV_TELEPORT
  when:
    status:
    - failure
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: push-build-linux-amd64-fips
trigger:
  event:
    include:
    - push
    exclude:
    - pull_request
  repo:
    include:
    - gravitational/*
  branch:
    include:
    - master
    - branch/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-linux.yaml -workflow-ref=${DRONE_BRANCH}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_COMMIT}
    -input "build-connect=false" -input "release-target=release-amd64-centos7-fips" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
- name: Send Slack notification
  image: plugins/slack:1.4.1
  settings:
    template: |-
      *✘ Failed:* `{{ build.event }}` / `${DRONE_STAGE_NAME}` / <{{ build.link }}|Build: #{{ build.number }}>
      Author: <https://github.com/{{ build.author }}|{{ build.author }}> Repo: <https://github.com/{{ repo.owner }}/{{ repo.name }}/|{{ repo.owner }}/{{ repo.name }}> Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}> Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
    webhook:
      from_secret: SLACK_WEBHOOK_DEV_TELEPORT
  when:
    status:
    - failure
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: push-build-windows-amd64
trigger:
  event:
    include:
    - push
    exclude:
    - pull_request
  repo:
    include:
    - gravitational/*
  branch:
    include:
    - master
    - branch/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 30m0s -workflow release-windows.yaml -workflow-ref=${DRONE_BRANCH}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_BRANCH} '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
- name: Send Slack notification
  image: plugins/slack:1.4.1
  settings:
    template: |-
      *✘ Failed:* `{{ build.event }}` / `${DRONE_STAGE_NAME}` / <{{ build.link }}|Build: #{{ build.number }}>
      Author: <https://github.com/{{ build.author }}|{{ build.author }}> Repo: <https://github.com/{{ repo.owner }}/{{ repo.name }}/|{{ repo.owner }}/{{ repo.name }}> Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}> Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
    webhook:
      from_secret: SLACK_WEBHOOK_DEV_TELEPORT
  when:
    status:
    - failure
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/relcli.go (main.relcliPipeline)
################################################

kind: pipeline
type: kubernetes
name: clean-up-previous-build
environment:
  RELCLI_IMAGE: 146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/relcli:prod-7680ffb-20240117T224722
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
clone:
  disable: true
steps:
- name: Check if commit is tagged
  image: alpine
  commands:
  - '[ -n ${DRONE_TAG} ] || (echo ''DRONE_TAG is not set. Is the commit tagged?''
    && exit 1)'
- name: Wait for docker
  image: docker
  pull: if-not-exists
  commands:
  - timeout 30s /bin/sh -c 'while [ ! -S /var/run/docker.sock ]; do sleep 1; done'
  - printenv DOCKERHUB_PASSWORD | docker login -u="$DOCKERHUB_USERNAME" --password-stdin
  environment:
    DOCKERHUB_PASSWORD:
      from_secret: DOCKERHUB_READONLY_TOKEN
    DOCKERHUB_USERNAME:
      from_secret: DOCKERHUB_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  - name: dockerconfig
    path: /root/.docker
- name: Assume AWS Role
  image: amazon/aws-cli
  pull: if-not-exists
  commands:
  - aws sts get-caller-identity
  - |-
    printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s\n" \
      $(aws sts assume-role \
        --role-arn "$AWS_ROLE" \
        --role-session-name $(echo "drone-${DRONE_REPO}-${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
        --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
        --output text) \
      > /root/.aws/credentials
  - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
  - aws sts get-caller-identity --profile default
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TELEPORT_BUILD_USER_READ_ONLY_KEY
    AWS_ROLE:
      from_secret: TELEPORT_BUILD_READ_ONLY_AWS_ROLE
    AWS_SECRET_ACCESS_KEY:
      from_secret: TELEPORT_BUILD_USER_READ_ONLY_SECRET
  volumes:
  - name: awsconfig
    path: /root/.aws
- name: Pull relcli
  image: docker:cli
  commands:
  - apk add --no-cache aws-cli
  - aws ecr get-login-password | docker login -u="AWS" --password-stdin 146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker pull $RELCLI_IMAGE
  environment:
    AWS_DEFAULT_REGION: us-west-2
  volumes:
  - name: dockersock
    path: /var/run
  - name: awsconfig
    path: /root/.aws
- name: Clean up previously built artifacts
  image: docker:git
  commands:
  - mkdir -p /tmpfs/creds
  - echo "$RELEASES_CERT" | base64 -d > "$RELCLI_CERT"
  - echo "$RELEASES_KEY" | base64 -d > "$RELCLI_KEY"
  - trap "rm -rf /tmpfs/creds" EXIT
  - docker run -i -v /tmpfs/creds:/tmpfs/creds -e DRONE_REPO -e DRONE_TAG -e RELCLI_BASE_URL
    -e RELCLI_CERT -e RELCLI_KEY $RELCLI_IMAGE auto_destroy -f -v 6
  environment:
    RELCLI_BASE_URL: https://releases-prod.platform.teleport.sh
    RELCLI_CERT: /tmpfs/creds/releases.crt
    RELCLI_KEY: /tmpfs/creds/releases.key
    RELEASES_CERT:
      from_secret: RELEASES_CERT
    RELEASES_KEY:
      from_secret: RELEASES_KEY
  volumes:
  - name: dockersock
    path: /var/run
  - name: tmpfs
    path: /tmpfs
  - name: awsconfig
    path: /root/.aws
services:
- name: Start Docker
  image: docker:dind
  privileged: true
  volumes:
  - name: tmpfs
    path: /tmpfs
  - name: dockersock
    path: /var/run
volumes:
- name: tmpfs
  temp:
    medium: memory
- name: awsconfig
  temp: {}
- name: dockersock
  temp: {}
- name: dockerconfig
  temp: {}
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: push-build-linux-arm
trigger:
  event:
    include:
    - push
    exclude:
    - pull_request
  repo:
    include:
    - gravitational/*
  branch:
    include:
    - master
    - branch/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-linux.yaml -workflow-ref=${DRONE_BRANCH}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_COMMIT}
    -input "build-connect=false" -input "release-target=release-arm" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
- name: Send Slack notification
  image: plugins/slack:1.4.1
  settings:
    template: |-
      *✘ Failed:* `{{ build.event }}` / `${DRONE_STAGE_NAME}` / <{{ build.link }}|Build: #{{ build.number }}>
      Author: <https://github.com/{{ build.author }}|{{ build.author }}> Repo: <https://github.com/{{ repo.owner }}/{{ repo.name }}/|{{ repo.owner }}/{{ repo.name }}> Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}> Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
    webhook:
      from_secret: SLACK_WEBHOOK_DEV_TELEPORT
  when:
    status:
    - failure
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: push-build-linux-arm64
trigger:
  event:
    include:
    - push
    exclude:
    - pull_request
  repo:
    include:
    - gravitational/*
  branch:
    include:
    - master
    - branch/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-linux.yaml -workflow-ref=${DRONE_BRANCH}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_COMMIT}
    -input "build-connect=false" -input "release-target=release-arm64" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
- name: Send Slack notification
  image: plugins/slack:1.4.1
  settings:
    template: |-
      *✘ Failed:* `{{ build.event }}` / `${DRONE_STAGE_NAME}` / <{{ build.link }}|Build: #{{ build.number }}>
      Author: <https://github.com/{{ build.author }}|{{ build.author }}> Repo: <https://github.com/{{ repo.owner }}/{{ repo.name }}/|{{ repo.owner }}/{{ repo.name }}> Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}> Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
    webhook:
      from_secret: SLACK_WEBHOOK_DEV_TELEPORT
  when:
    status:
    - failure
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: push-build-linux-arm64-fips
trigger:
  event:
    include:
    - push
    exclude:
    - pull_request
  repo:
    include:
    - gravitational/*
  branch:
    include:
    - master
    - branch/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-linux.yaml -workflow-ref=${DRONE_BRANCH}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_COMMIT}
    -input "build-connect=false" -input "release-target=release-arm64-fips" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
- name: Send Slack notification
  image: plugins/slack:1.4.1
  settings:
    template: |-
      *✘ Failed:* `{{ build.event }}` / `${DRONE_STAGE_NAME}` / <{{ build.link }}|Build: #{{ build.number }}>
      Author: <https://github.com/{{ build.author }}|{{ build.author }}> Repo: <https://github.com/{{ repo.owner }}/{{ repo.name }}/|{{ repo.owner }}/{{ repo.name }}> Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}> Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
    webhook:
      from_secret: SLACK_WEBHOOK_DEV_TELEPORT
  when:
    status:
    - failure
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
kind: pipeline
type: kubernetes
name: teleport-docker-cron-ecr

trigger:
  cron:
    - teleport-docker-cron-ecr
  repo:
    include:
      - gravitational/teleport

workspace:
  path: /go

clone:
  disable: false

steps:
  - name: Set up variables and Dockerfile
    image: docker:git
    environment:
      # increment these variables when a new major/minor version is released to bump the automatic builds
      # this only needs to be done on the master branch, as that's the branch that the Drone cron is configured for
      # build major version images which are just teleport:x
      CURRENT_VERSION_ROOT: v14
      PREVIOUS_VERSION_ONE_ROOT: v13
      PREVIOUS_VERSION_TWO_ROOT: v12
    commands:
      - apk --update --no-cache add curl go
      - mkdir -p /go/build && cd /go/build
      # CURRENT_VERSION
      - (cd /go/build.assets/tooling && go run ./cmd/query-latest $CURRENT_VERSION_ROOT > /go/build/CURRENT_VERSION_TAG.txt)
      - echo "$(cat /go/build/CURRENT_VERSION_TAG.txt | cut -d. -f1 | tr -d '^v')" > /go/build/CURRENT_VERSION_TAG_GENERIC.txt
      # PREVIOUS_VERSION_ONE
      - (cd /go/build.assets/tooling && go run ./cmd/query-latest $PREVIOUS_VERSION_ONE_ROOT > /go/build/PREVIOUS_VERSION_ONE_TAG.txt)
      - echo "$(cat /go/build/PREVIOUS_VERSION_ONE_TAG.txt | cut -d. -f1 | tr -d '^v')" > /go/build/PREVIOUS_VERSION_ONE_TAG_GENERIC.txt
      # PREVIOUS_VERSION_TWO
      - (cd /go/build.assets/tooling && go run ./cmd/query-latest $PREVIOUS_VERSION_TWO_ROOT > /go/build/PREVIOUS_VERSION_TWO_TAG.txt)
      - echo "$(cat /go/build/PREVIOUS_VERSION_TWO_TAG.txt | cut -d. -f1 | tr -d '^v')" > /go/build/PREVIOUS_VERSION_TWO_TAG_GENERIC.txt
      # list versions
      - for FILE in /go/build/*.txt; do echo $FILE; cat $FILE; done
      # wait for Docker to be ready
      - sleep 3

  - name: Configure Staging AWS Profile
    image: amazon/aws-cli
    commands:
      - aws sts get-caller-identity
      - |-
        printf "[staging]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s\n" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}-${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
          > /root/.aws/credentials
      - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
      - aws sts get-caller-identity --profile staging
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: STAGING_TELEPORT_DRONE_USER_ECR_KEY
      AWS_SECRET_ACCESS_KEY:
        from_secret: STAGING_TELEPORT_DRONE_USER_ECR_SECRET
      AWS_ROLE:
        from_secret: STAGING_TELEPORT_DRONE_ECR_AWS_ROLE
    volumes:
      - name: awsconfig
        path: /root/.aws

  - name: Configure Production AWS Profile
    image: amazon/aws-cli
    commands:
      - aws sts get-caller-identity
      - |-
        printf "[production]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s\n" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}-${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
          >> /root/.aws/credentials
      - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
      - aws sts get-caller-identity --profile production
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
      AWS_SECRET_ACCESS_KEY:
        from_secret: PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
      AWS_ROLE:
        from_secret: PRODUCTION_TELEPORT_DRONE_ECR_AWS_ROLE
    volumes:
      - name: awsconfig
        path: /root/.aws

  - name: Build/push Teleport Lab Docker image
    image: docker:git
    environment:
      OS: linux
      ARCH: amd64
    volumes:
      - name: dockersock
        path: /var/run
      - name: awsconfig
        path: /root/.aws
    commands:
      - apk add --no-cache aws-cli
      - export CURRENT_DATE=$(date '+%Y%m%d%H%M')
      - export TELEPORT_TAG=$(cat /go/build/CURRENT_VERSION_TAG.txt | tr -d '^v')
      - export TELEPORT_LAB_IMAGE_NAME_STAGING="146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-lab:$(cat /go/build/CURRENT_VERSION_TAG_GENERIC.txt)-$CURRENT_DATE"
      - export TELEPORT_LAB_IMAGE_NAME_PROD="public.ecr.aws/gravitational/teleport-lab:$(cat /go/build/CURRENT_VERSION_TAG_GENERIC.txt)"
        # Check out code
      - mkdir -p /go/src/github.com/gravitational/teleport
      - cd /go/src/github.com/gravitational/teleport
      - git init && git remote add origin ${DRONE_REMOTE_URL}
      - git fetch origin
      - git checkout -qf ${DRONE_COMMIT_SHA}
      # Authenticate to staging registry
      - aws ecr get-login-password --profile staging --region=us-west-2 | docker login -u="AWS" --password-stdin 146628656107.dkr.ecr.us-west-2.amazonaws.com
      # Build and push image
      - docker build --build-arg TELEPORT_TAG=$TELEPORT_TAG -t $TELEPORT_LAB_IMAGE_NAME_STAGING /go/src/github.com/gravitational/teleport/docker/sshd
      - docker push $TELEPORT_LAB_IMAGE_NAME_STAGING
      # Authenticate to production registry
      - docker logout 146628656107.dkr.ecr.us-west-2.amazonaws.com
      - aws ecr-public get-login-password --profile production --region=us-east-1 | docker login -u="AWS" --password-stdin public.ecr.aws
      # Push to production registry
      - docker tag $TELEPORT_LAB_IMAGE_NAME_STAGING $TELEPORT_LAB_IMAGE_NAME_PROD
      - docker push $TELEPORT_LAB_IMAGE_NAME_PROD

services:
  - name: Start Docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}
  - name: awsconfig
    temp: {}

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: build-linux-amd64
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-linux.yaml -workflow-ref=${DRONE_TAG}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_TAG} -input
    "build-connect=true" -input "build-os-packages=true" -input "release-artifacts=true"
    -input "release-target=release-amd64-centos7" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
- name: Send Slack notification
  image: plugins/slack:1.4.1
  settings:
    template: |-
      *✘ Failed:* `{{ build.event }}` / `${DRONE_STAGE_NAME}` / <{{ build.link }}|Build: #{{ build.number }}>
      Author: <https://github.com/{{ build.author }}|{{ build.author }}> Repo: <https://github.com/{{ repo.owner }}/{{ repo.name }}/|{{ repo.owner }}/{{ repo.name }}> Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}> Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
    webhook:
      from_secret: SLACK_WEBHOOK_DEV_TELEPORT
  when:
    status:
    - failure
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: build-linux-amd64-fips
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-linux.yaml -workflow-ref=${DRONE_TAG}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_TAG} -input
    "build-connect=false" -input "build-os-packages=true" -input "release-artifacts=true"
    -input "release-target=release-amd64-centos7-fips" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
- name: Send Slack notification
  image: plugins/slack:1.4.1
  settings:
    template: |-
      *✘ Failed:* `{{ build.event }}` / `${DRONE_STAGE_NAME}` / <{{ build.link }}|Build: #{{ build.number }}>
      Author: <https://github.com/{{ build.author }}|{{ build.author }}> Repo: <https://github.com/{{ repo.owner }}/{{ repo.name }}/|{{ repo.owner }}/{{ repo.name }}> Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}> Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
    webhook:
      from_secret: SLACK_WEBHOOK_DEV_TELEPORT
  when:
    status:
    - failure
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: build-linux-386
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-linux.yaml -workflow-ref=${DRONE_TAG}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_TAG} -input
    "build-connect=false" -input "build-os-packages=true" -input "release-artifacts=true"
    -input "release-target=release-386" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
- name: Send Slack notification
  image: plugins/slack:1.4.1
  settings:
    template: |-
      *✘ Failed:* `{{ build.event }}` / `${DRONE_STAGE_NAME}` / <{{ build.link }}|Build: #{{ build.number }}>
      Author: <https://github.com/{{ build.author }}|{{ build.author }}> Repo: <https://github.com/{{ repo.owner }}/{{ repo.name }}/|{{ repo.owner }}/{{ repo.name }}> Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}> Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
    webhook:
      from_secret: SLACK_WEBHOOK_DEV_TELEPORT
  when:
    status:
    - failure
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: build-darwin-amd64
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-mac.yaml -workflow-ref=${DRONE_TAG}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_TAG} -input
    "build-packages=true" -input "release-artifacts=true" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
- name: Send Slack notification
  image: plugins/slack:1.4.1
  settings:
    template: |-
      *✘ Failed:* `{{ build.event }}` / `${DRONE_STAGE_NAME}` / <{{ build.link }}|Build: #{{ build.number }}>
      Author: <https://github.com/{{ build.author }}|{{ build.author }}> Repo: <https://github.com/{{ repo.owner }}/{{ repo.name }}/|{{ repo.owner }}/{{ repo.name }}> Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}> Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
    webhook:
      from_secret: SLACK_WEBHOOK_DEV_TELEPORT
  when:
    status:
    - failure
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: build-linux-arm
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-linux.yaml -workflow-ref=${DRONE_TAG}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_TAG} -input
    "build-connect=false" -input "build-os-packages=true" -input "release-artifacts=true"
    -input "release-target=release-arm" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
- name: Send Slack notification
  image: plugins/slack:1.4.1
  settings:
    template: |-
      *✘ Failed:* `{{ build.event }}` / `${DRONE_STAGE_NAME}` / <{{ build.link }}|Build: #{{ build.number }}>
      Author: <https://github.com/{{ build.author }}|{{ build.author }}> Repo: <https://github.com/{{ repo.owner }}/{{ repo.name }}/|{{ repo.owner }}/{{ repo.name }}> Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}> Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
    webhook:
      from_secret: SLACK_WEBHOOK_DEV_TELEPORT
  when:
    status:
    - failure
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: build-linux-arm64
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-linux.yaml -workflow-ref=${DRONE_TAG}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_TAG} -input
    "build-connect=false" -input "build-os-packages=true" -input "release-artifacts=true"
    -input "release-target=release-arm64" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
- name: Send Slack notification
  image: plugins/slack:1.4.1
  settings:
    template: |-
      *✘ Failed:* `{{ build.event }}` / `${DRONE_STAGE_NAME}` / <{{ build.link }}|Build: #{{ build.number }}>
      Author: <https://github.com/{{ build.author }}|{{ build.author }}> Repo: <https://github.com/{{ repo.owner }}/{{ repo.name }}/|{{ repo.owner }}/{{ repo.name }}> Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}> Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
    webhook:
      from_secret: SLACK_WEBHOOK_DEV_TELEPORT
  when:
    status:
    - failure
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: build-linux-arm64-fips
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-linux.yaml -workflow-ref=${DRONE_TAG}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_TAG} -input
    "build-connect=false" -input "build-os-packages=true" -input "release-artifacts=true"
    -input "release-target=release-arm64-fips" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
- name: Send Slack notification
  image: plugins/slack:1.4.1
  settings:
    template: |-
      *✘ Failed:* `{{ build.event }}` / `${DRONE_STAGE_NAME}` / <{{ build.link }}|Build: #{{ build.number }}>
      Author: <https://github.com/{{ build.author }}|{{ build.author }}> Repo: <https://github.com/{{ repo.owner }}/{{ repo.name }}/|{{ repo.owner }}/{{ repo.name }}> Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}> Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
    webhook:
      from_secret: SLACK_WEBHOOK_DEV_TELEPORT
  when:
    status:
    - failure
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: tag-build-windows-amd64
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 30m0s -workflow release-windows.yaml -workflow-ref=${DRONE_TAG}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_TAG} '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
- name: Send Slack notification
  image: plugins/slack:1.4.1
  settings:
    template: |-
      *✘ Failed:* `{{ build.event }}` / `${DRONE_STAGE_NAME}` / <{{ build.link }}|Build: #{{ build.number }}>
      Author: <https://github.com/{{ build.author }}|{{ build.author }}> Repo: <https://github.com/{{ repo.owner }}/{{ repo.name }}/|{{ repo.owner }}/{{ repo.name }}> Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}> Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
    webhook:
      from_secret: SLACK_WEBHOOK_DEV_TELEPORT
  when:
    status:
    - failure
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: build-oci
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-teleport-oci.yaml -workflow-ref=${DRONE_TAG}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_TAG} '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
- name: Send Slack notification
  image: plugins/slack:1.4.1
  settings:
    template: |-
      *✘ Failed:* `{{ build.event }}` / `${DRONE_STAGE_NAME}` / <{{ build.link }}|Build: #{{ build.number }}>
      Author: <https://github.com/{{ build.author }}|{{ build.author }}> Repo: <https://github.com/{{ repo.owner }}/{{ repo.name }}/|{{ repo.owner }}/{{ repo.name }}> Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}> Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
    webhook:
      from_secret: SLACK_WEBHOOK_DEV_TELEPORT
  when:
    status:
    - failure
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: publish-os-package-repos
trigger:
  event:
    include:
    - promote
  target:
    include:
    - production
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Determine if release should go to development or production
  image: golang:1.18-alpine
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - mkdir -pv "/go/vars"
  - (CGO_ENABLED=0 go run ./cmd/check -tag ${DRONE_TAG} -check prerelease && echo
    "promote" || echo "build") > "/go/vars/release-environment.txt"
  depends_on:
  - Check out code
- name: Publish Teleport to stable/${DRONE_TAG} apt repo
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -series-run -series-run-filter .*apt.* -timeout 12h0m0s -workflow
    deploy-packages.yaml -workflow-ref=refs/heads/master -input "artifact-tag=${DRONE_TAG}"
    -input "environment=$(cat "/go/vars/release-environment.txt")" -input "package-to-test=teleport-ent"
    -input "release-channel=stable" -input "repo-type=apt" -input "version-channel=${DRONE_TAG}" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
  depends_on:
  - Determine if release should go to development or production
- name: Wait - Publish Teleport to stable/${DRONE_TAG} yum repo
  image: alpine:latest
  commands:
  - sleep 10
  depends_on:
  - Determine if release should go to development or production
- name: Publish Teleport to stable/${DRONE_TAG} yum repo
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -series-run -series-run-filter .*yum.* -timeout 12h0m0s -workflow
    deploy-packages.yaml -workflow-ref=refs/heads/master -input "artifact-tag=${DRONE_TAG}"
    -input "environment=$(cat "/go/vars/release-environment.txt")" -input "package-to-test=teleport-ent"
    -input "release-channel=stable" -input "repo-type=yum" -input "version-channel=${DRONE_TAG}" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
  depends_on:
  - Wait - Publish Teleport to stable/${DRONE_TAG} yum repo
- name: Wait - Publish teleport-ent-updater to stable/cloud apt repo
  image: alpine:latest
  commands:
  - sleep 20
  depends_on:
  - Determine if release should go to development or production
- name: Publish teleport-ent-updater to stable/cloud apt repo
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -series-run -series-run-filter .*apt.* -timeout 12h0m0s -workflow
    deploy-packages.yaml -workflow-ref=refs/heads/master -input "artifact-tag=${DRONE_TAG}"
    -input "environment=$(cat "/go/vars/release-environment.txt")" -input "package-name-filter=teleport-ent-updater*"
    -input "release-channel=stable" -input "repo-type=apt" -input "version-channel=cloud" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
  depends_on:
  - Wait - Publish teleport-ent-updater to stable/cloud apt repo
- name: Wait - Publish teleport-ent-updater to stable/cloud yum repo
  image: alpine:latest
  commands:
  - sleep 30
  depends_on:
  - Determine if release should go to development or production
- name: Publish teleport-ent-updater to stable/cloud yum repo
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -series-run -series-run-filter .*yum.* -timeout 12h0m0s -workflow
    deploy-packages.yaml -workflow-ref=refs/heads/master -input "artifact-tag=${DRONE_TAG}"
    -input "environment=$(cat "/go/vars/release-environment.txt")" -input "package-name-filter=teleport-ent-updater*"
    -input "release-channel=stable" -input "repo-type=yum" -input "version-channel=cloud" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
  depends_on:
  - Wait - Publish teleport-ent-updater to stable/cloud yum repo
- name: Wait - Publish Teleport to stable/rolling apt repo
  image: alpine:latest
  commands:
  - sleep 40
  depends_on:
  - Determine if release should go to development or production
- name: Publish Teleport to stable/rolling apt repo
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -series-run -series-run-filter .*apt.* -timeout 12h0m0s -workflow
    deploy-packages.yaml -workflow-ref=refs/heads/master -input "artifact-tag=${DRONE_TAG}"
    -input "environment=$(cat "/go/vars/release-environment.txt")" -input "package-to-test=teleport-ent"
    -input "release-channel=stable" -input "repo-type=apt" -input "version-channel=rolling" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
  depends_on:
  - Wait - Publish Teleport to stable/rolling apt repo
- name: Wait - Publish Teleport to stable/rolling yum repo
  image: alpine:latest
  commands:
  - sleep 50
  depends_on:
  - Determine if release should go to development or production
- name: Publish Teleport to stable/rolling yum repo
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -series-run -series-run-filter .*yum.* -timeout 12h0m0s -workflow
    deploy-packages.yaml -workflow-ref=refs/heads/master -input "artifact-tag=${DRONE_TAG}"
    -input "environment=$(cat "/go/vars/release-environment.txt")" -input "package-to-test=teleport-ent"
    -input "release-channel=stable" -input "repo-type=yum" -input "version-channel=rolling" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
  depends_on:
  - Wait - Publish Teleport to stable/rolling yum repo
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
kind: pipeline
type: kubernetes
name: promote-build

trigger:
  event:
    - promote
  target:
    - production
  repo:
    include:
      - gravitational/*

workspace:
  path: /go

clone:
  disable: true

steps:
  - name: Check if commit is tagged
    image: alpine
    commands:
      - "[ -n ${DRONE_TAG} ] || (echo 'DRONE_TAG is not set. Is the commit tagged?' && exit 1)"

  - name: Assume Download AWS Role
    image: amazon/aws-cli
    commands:
      - aws sts get-caller-identity
      - |-
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s\n" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}-${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
          > /root/.aws/credentials
      - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
      - aws sts get-caller-identity --profile default
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      AWS_ROLE:
        from_secret: AWS_ROLE
    volumes:
      - name: awsconfig
        path: /root/.aws

  - name: Download artifacts from S3
    image: amazon/aws-cli
    commands:
      - mkdir -p /go/artifacts
      - aws s3 sync s3://$AWS_S3_BUCKET/teleport/tag/${DRONE_TAG##v}/ /go/artifacts/
    environment:
      AWS_S3_BUCKET:
        from_secret: AWS_S3_BUCKET
      AWS_REGION: us-west-2
    volumes:
      - name: awsconfig
        path: /root/.aws

  - name: Assume Upload AWS Role
    image: amazon/aws-cli
    commands:
      - aws sts get-caller-identity
      - |-
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s\n" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}-${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
          > /root/.aws/credentials
      - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
      - aws sts get-caller-identity --profile default
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: PRODUCTION_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: PRODUCTION_AWS_SECRET_ACCESS_KEY
      AWS_ROLE:
        from_secret: PRODUCTION_AWS_ROLE
    volumes:
      - name: awsconfig
        path: /root/.aws

  # Uploads to Houston
  - name: Upload artifacts to production S3
    image: amazon/aws-cli
    environment:
      AWS_REGION: us-east-1
      AWS_S3_BUCKET:
        from_secret: PRODUCTION_AWS_S3_BUCKET
    volumes:
      - name: awsconfig
        path: /root/.aws
    commands:
      - cd /go/artifacts/
      - aws s3 sync --acl public-read . s3://$AWS_S3_BUCKET/teleport/${DRONE_TAG##v}

  - name: Check out code
    image: docker:git
    commands:
      - |
        mkdir -p /go/src/github.com/gravitational/teleport
        cd /go/src/github.com/gravitational/teleport
        git init && git remote add origin ${DRONE_REMOTE_URL}
        git fetch origin +refs/tags/${DRONE_TAG}:
        git checkout -qf FETCH_HEAD

  - name: "Helm: Assume Download AWS Role"
    image: amazon/aws-cli
    commands:
      - aws sts get-caller-identity
      - |-
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s\n" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}-${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
          > /root/.aws/credentials
      - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
      - aws sts get-caller-identity --profile default
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: PRODUCTION_CHARTS_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: PRODUCTION_CHARTS_AWS_SECRET_ACCESS_KEY
      AWS_ROLE:
        from_secret: PRODUCTION_CHARTS_AWS_ROLE
    volumes:
      - name: awsconfig
        path: /root/.aws

  # Download all previously packaged charts. This is needed to rebuild the
  # index and re-publish the repository.
  - name: "Helm: Download chart repository"
    image: amazon/aws-cli
    environment:
      AWS_REGION: us-west-2
      AWS_S3_BUCKET:
        from_secret: PRODUCTION_CHARTS_AWS_S3_BUCKET
    volumes:
      - name: awsconfig
        path: /root/.aws
    commands:
      - mkdir -p /go/chart
      - aws s3 sync s3://$AWS_S3_BUCKET/ /go/chart

  - name: "Helm: Package chart repository"
    image: alpine/helm:latest
    commands:
      - cd /go/chart
      - helm package /go/src/github.com/gravitational/teleport/examples/chart/teleport-cluster
      - helm package /go/src/github.com/gravitational/teleport/examples/chart/teleport-kube-agent
      - helm package /go/src/github.com/gravitational/teleport/examples/chart/teleport-cluster/charts/teleport-operator
      # copy index.html to root of the S3 bucket.
      - cp /go/src/github.com/gravitational/teleport/examples/chart/index.html /go/chart
      # this will index all previous versions of the charts downloaded from the S3 bucket,
      # plus the just-packaged charts listed above
      - helm repo index /go/chart
      - ls /go/chart

  - name: "Helm: Assume Upload AWS Role"
    image: amazon/aws-cli
    commands:
      - aws sts get-caller-identity
      - |-
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s\n" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}-${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
          > /root/.aws/credentials
      - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
      - aws sts get-caller-identity --profile default
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: PRODUCTION_CHARTS_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: PRODUCTION_CHARTS_AWS_SECRET_ACCESS_KEY
      AWS_ROLE:
        from_secret: PRODUCTION_CHARTS_AWS_ROLE
    volumes:
      - name: awsconfig
        path: /root/.aws

  - name: "Helm: Publish chart repository to S3"
    image: amazon/aws-cli
    environment:
      AWS_REGION: us-west-2
      AWS_S3_BUCKET:
        from_secret: PRODUCTION_CHARTS_AWS_S3_BUCKET
    volumes:
      - name: awsconfig
        path: /root/.aws
    commands:
      - cd /go/chart/
      - aws s3 sync . s3://$AWS_S3_BUCKET/

services:
  - name: Start Docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run
      - name: tmpfs
        path: /tmpfs

volumes:
  - name: awsconfig
    temp: {}
  - name: dockersock
    temp: {}
  - name: tmpfs
    temp:
      medium: memory
  # these persistent volumes cache RPMs/DEBs near Drone so that we don't need to download the
  # entire repo contents from S3 every time to build the repo, we just sync any differences
  - name: rpmrepo
    claim:
      name: drone-s3-rpmrepo-pvc
  - name: debrepo
    claim:
      name: drone-s3-debrepo-pvc
---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: promote-teleport-oci-distroless-images
trigger:
  event:
    include:
    - promote
  target:
    include:
    - production
    - promote-distroless
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow promote-teleport-oci-distroless.yml -workflow-ref=${DRONE_TAG}
    -input "release-source-tag=${DRONE_TAG}" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: promote-teleport-hardened-amis
trigger:
  event:
    include:
    - promote
  target:
    include:
    - production
    - promote-hardened-amis
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow promote-teleport-hardened-amis.yaml -workflow-ref=${DRONE_TAG}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_TAG} -input
    "release-source-tag=${DRONE_TAG}" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: promote-teleport-kube-agent-updater-oci-images
trigger:
  event:
    include:
    - promote
  target:
    include:
    - production
    - promote-updater
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow promote-teleport-kube-agent-updater-oci.yml
    -workflow-ref=${DRONE_TAG} -input "release-source-tag=${DRONE_TAG}" '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: build-teleport-oci-distroless-images
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
depends_on:
- clean-up-previous-build
- build-linux-amd64
- build-linux-amd64-fips
- build-linux-arm64
- build-linux-arm64-fips
- build-linux-arm
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-teleport-oci-distroless.yml -workflow-ref=${DRONE_TAG}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_TAG} '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: build-teleport-hardened-amis
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
depends_on:
- clean-up-previous-build
- build-linux-amd64
- build-linux-amd64-fips
- build-linux-arm64
- build-linux-arm64-fips
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-teleport-hardened-amis.yaml -workflow-ref=${DRONE_TAG}
    -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_TAG} '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/gha.go (main.ghaMultiBuildPipeline)
################################################

kind: pipeline
type: kubernetes
name: build-teleport-kube-agent-updater-oci-images
trigger:
  event:
    include:
    - tag
  ref:
    include:
    - refs/tags/v*
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Check out code
  image: docker:git
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_COMMIT_SHA}"
  - mkdir -m 0700 /root/.ssh && echo "$GITHUB_PRIVATE_KEY" > /root/.ssh/id_rsa &&
    chmod 600 /root/.ssh/id_rsa
  - ssh-keyscan -H github.com > /root/.ssh/known_hosts 2>/dev/null && chmod 600 /root/.ssh/known_hosts
  - git submodule update --init e
  - mkdir -pv /go/cache
  - rm -f /root/.ssh/id_rsa
  environment:
    GITHUB_PRIVATE_KEY:
      from_secret: GITHUB_PRIVATE_KEY
- name: Delegate build to GitHub
  image: golang:1.18-alpine
  pull: if-not-exists
  commands:
  - cd "/go/src/github.com/gravitational/teleport/build.assets/tooling"
  - 'go run ./cmd/gh-trigger-workflow -owner ${DRONE_REPO_OWNER} -repo teleport.e
    -tag-workflow -timeout 2h30m0s -workflow release-teleport-kube-agent-updater-oci.yml
    -workflow-ref=${DRONE_TAG} -input oss-teleport-repo=${DRONE_REPO} -input oss-teleport-ref=${DRONE_TAG} '
  environment:
    GHA_APP_KEY:
      from_secret: GITHUB_WORKFLOW_APP_PRIVATE_KEY
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/container_images_release_version.go (main.(*ReleaseVersion).buildVersionPipeline)
################################################

kind: pipeline
type: kubernetes
name: teleport-container-images-branch-promote
environment:
  DEBIAN_FRONTEND: noninteractive
trigger:
  event:
    include:
    - promote
  target:
    include:
    - production
    - promote-docker
  repo:
    include:
    - gravitational/*
workspace:
  path: /go
clone:
  disable: true
steps:
- name: Verify build is tagged
  image: alpine:latest
  pull: if-not-exists
  commands:
  - '[ -n ${DRONE_TAG} ] || (echo ''DRONE_TAG is not set. Is the commit tagged?''
    && exit 1)'
- name: Record if tag ($DRONE_TAG) is prerelease
  image: golang:1.18-alpine
  commands:
  - apk add git
  - mkdir -pv "/tmp/repo"
  - cd "/tmp/repo"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "${DRONE_TAG}"
  - mkdir -pv $(dirname "/go/vars/release-is-prerelease")
  - cd "/tmp/repo/build.assets/tooling"
  - CGO_ENABLED=0 go run ./cmd/check -tag $DRONE_TAG -check prerelease &> /dev/null
    || echo 'Version is a prerelease' > "/go/vars/release-is-prerelease"
  - printf 'Version is '; [ ! -f "/go/vars/release-is-prerelease" ] && printf 'not
    '; echo 'a prerelease'
- name: Wait for docker
  image: docker
  pull: if-not-exists
  commands:
  - timeout 30s /bin/sh -c 'while [ ! -S /var/run/docker.sock ]; do sleep 1; done'
  - printenv DOCKERHUB_PASSWORD | docker login -u="$DOCKERHUB_USERNAME" --password-stdin
  environment:
    DOCKERHUB_PASSWORD:
      from_secret: DOCKERHUB_READONLY_TOKEN
    DOCKERHUB_USERNAME:
      from_secret: DOCKERHUB_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  - name: dockerconfig
    path: /root/.docker
  depends_on:
  - Verify build is tagged
  - Record if tag ($DRONE_TAG) is prerelease
- name: Wait for docker registry
  image: alpine
  pull: if-not-exists
  commands:
  - apk add curl
  - timeout 30s /bin/sh -c 'while [ "$(curl -s -o /dev/null -w %{http_code} http://drone-docker-registry:5000/)"
    != "200" ]; do sleep 1; done'
  depends_on:
  - Verify build is tagged
  - Record if tag ($DRONE_TAG) is prerelease
- name: Check out code
  image: alpine/git:latest
  pull: if-not-exists
  commands:
  - mkdir -pv "/go/src/github.com/gravitational/teleport"
  - cd "/go/src/github.com/gravitational/teleport"
  - git init
  - git remote add origin ${DRONE_REMOTE_URL}
  - git fetch origin --tags
  - git checkout -qf "$DRONE_TAG"
  depends_on:
  - Verify build is tagged
  - Record if tag ($DRONE_TAG) is prerelease
- name: Build major, minor, and full semvers
  image: alpine
  commands:
  - mkdir -pv $(dirname "/go/var/major-version")
  - echo $DRONE_TAG | sed 's/v//' | cut -d'.' -f "1" > "/go/var/major-version"
  - echo $(cat "/go/var/major-version")
  - mkdir -pv $(dirname "/go/var/minor-version")
  - echo $DRONE_TAG | sed 's/v//' | cut -d'.' -f "1,2" > "/go/var/minor-version"
  - echo $(cat "/go/var/minor-version")
  - mkdir -pv $(dirname "/go/var/full-version")
  - echo $DRONE_TAG | sed 's/v//' > "/go/var/full-version"
  - echo $(cat "/go/var/full-version")
  depends_on:
  - Verify build is tagged
  - Record if tag ($DRONE_TAG) is prerelease
- name: Assume ECR - staging AWS Role
  image: amazon/aws-cli
  pull: if-not-exists
  commands:
  - aws sts get-caller-identity
  - |-
    printf "[ecr-staging]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s\n" \
      $(aws sts assume-role \
        --role-arn "$AWS_ROLE" \
        --role-session-name $(echo "drone-${DRONE_REPO}-${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
        --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
        --output text) \
      >> /root/.aws/credentials
  - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
  - aws sts get-caller-identity --profile ecr-staging
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: STAGING_TELEPORT_DRONE_USER_ECR_KEY
    AWS_ROLE:
      from_secret: STAGING_TELEPORT_DRONE_ECR_AWS_ROLE
    AWS_SECRET_ACCESS_KEY:
      from_secret: STAGING_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: awsconfig
    path: /root/.aws
  depends_on:
  - Verify build is tagged
  - Record if tag ($DRONE_TAG) is prerelease
- name: Assume ECR - production AWS Role
  image: amazon/aws-cli
  pull: if-not-exists
  commands:
  - aws sts get-caller-identity
  - |-
    printf "[ecr-production]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s\n" \
      $(aws sts assume-role \
        --role-arn "$AWS_ROLE" \
        --role-session-name $(echo "drone-${DRONE_REPO}-${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
        --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
        --output text) \
      >> /root/.aws/credentials
  - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
  - aws sts get-caller-identity --profile ecr-production
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: PRODUCTION_TELEPORT_DRONE_USER_ECR_KEY
    AWS_ROLE:
      from_secret: PRODUCTION_TELEPORT_DRONE_ECR_AWS_ROLE
    AWS_SECRET_ACCESS_KEY:
      from_secret: PRODUCTION_TELEPORT_DRONE_USER_ECR_SECRET
  volumes:
  - name: awsconfig
    path: /root/.aws
  depends_on:
  - Assume ECR - staging AWS Role
  - Verify build is tagged
  - Record if tag ($DRONE_TAG) is prerelease
- name: Pull teleport-operator:v15-amd64 and push it to Local Registry
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - printenv DOCKERHUB_PASSWORD | docker login -u="$DOCKERHUB_USERNAME" --password-stdin
  - docker pull 146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:$(cat
    "/go/var/full-version")-amd64
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  - docker tag 146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:$(cat
    "/go/var/full-version")-amd64 drone-docker-registry:5000/teleport-operator:$(cat
    "/go/var/full-version")-amd64
  - docker push drone-docker-registry:5000/teleport-operator:$(cat "/go/var/full-version")-amd64
  environment:
    AWS_PROFILE: ecr-staging
    DOCKERHUB_PASSWORD:
      from_secret: DOCKERHUB_READONLY_TOKEN
    DOCKERHUB_USERNAME:
      from_secret: DOCKERHUB_USERNAME
  volumes:
  - name: awsconfig
    path: /root/.aws
  - name: dockersock
    path: /var/run
  depends_on:
  - Verify build is tagged
  - Record if tag ($DRONE_TAG) is prerelease
  - Wait for docker
  - Wait for docker registry
  - Check out code
  - Build major, minor, and full semvers
  - Assume ECR - staging AWS Role
  - Assume ECR - production AWS Role
- name: Pull teleport-operator:v15-arm and push it to Local Registry
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - printenv DOCKERHUB_PASSWORD | docker login -u="$DOCKERHUB_USERNAME" --password-stdin
  - docker pull 146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:$(cat
    "/go/var/full-version")-arm
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  - docker tag 146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:$(cat
    "/go/var/full-version")-arm drone-docker-registry:5000/teleport-operator:$(cat
    "/go/var/full-version")-arm
  - docker push drone-docker-registry:5000/teleport-operator:$(cat "/go/var/full-version")-arm
  environment:
    AWS_PROFILE: ecr-staging
    DOCKERHUB_PASSWORD:
      from_secret: DOCKERHUB_READONLY_TOKEN
    DOCKERHUB_USERNAME:
      from_secret: DOCKERHUB_USERNAME
  volumes:
  - name: awsconfig
    path: /root/.aws
  - name: dockersock
    path: /var/run
  depends_on:
  - Verify build is tagged
  - Record if tag ($DRONE_TAG) is prerelease
  - Wait for docker
  - Wait for docker registry
  - Check out code
  - Build major, minor, and full semvers
  - Assume ECR - staging AWS Role
  - Assume ECR - production AWS Role
- name: Pull teleport-operator:v15-arm64 and push it to Local Registry
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - aws ecr get-login-password --region=us-west-2 | docker login -u="AWS" --password-stdin
    146628656107.dkr.ecr.us-west-2.amazonaws.com
  - printenv DOCKERHUB_PASSWORD | docker login -u="$DOCKERHUB_USERNAME" --password-stdin
  - docker pull 146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:$(cat
    "/go/var/full-version")-arm64
  - docker logout "146628656107.dkr.ecr.us-west-2.amazonaws.com"
  - docker tag 146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/teleport-operator:$(cat
    "/go/var/full-version")-arm64 drone-docker-registry:5000/teleport-operator:$(cat
    "/go/var/full-version")-arm64
  - docker push drone-docker-registry:5000/teleport-operator:$(cat "/go/var/full-version")-arm64
  environment:
    AWS_PROFILE: ecr-staging
    DOCKERHUB_PASSWORD:
      from_secret: DOCKERHUB_READONLY_TOKEN
    DOCKERHUB_USERNAME:
      from_secret: DOCKERHUB_USERNAME
  volumes:
  - name: awsconfig
    path: /root/.aws
  - name: dockersock
    path: /var/run
  depends_on:
  - Verify build is tagged
  - Record if tag ($DRONE_TAG) is prerelease
  - Wait for docker
  - Wait for docker registry
  - Check out code
  - Build major, minor, and full semvers
  - Assume ECR - staging AWS Role
  - Assume ECR - production AWS Role
- name: Tag and push image "teleport-operator:v15-amd64" to ECR - production
  image: docker
  commands:
  - docker pull --platform "linux/amd64" drone-docker-registry:5000/teleport-operator:$(cat
    "/go/var/full-version")-amd64
  - apk add --no-cache aws-cli
  - aws ecr-public get-login-password --region=us-east-1 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - printenv DOCKERHUB_PASSWORD | docker login -u="$DOCKERHUB_USERNAME" --password-stdin
  - docker manifest inspect public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/full-version")-amd64
    > /dev/null 2>&1 && echo 'Found existing image, skipping' || (docker tag drone-docker-registry:5000/teleport-operator:$(cat
    "/go/var/full-version")-amd64 public.ecr.aws/gravitational/teleport-operator:$(cat
    "/go/var/full-version")-amd64 && docker push public.ecr.aws/gravitational/teleport-operator:$(cat
    "/go/var/full-version")-amd64)
  - printf "Prerelease "; ! [ -f /go/vars/release-is-prerelease ] && printf "not ";
    printf "detected for version $DRONE_TAG, "; [ -f /go/vars/release-is-prerelease
    ] && echo "skipping" || echo "continuing"
  - '[ -f /go/vars/release-is-prerelease ] && exit 0'
  - docker tag drone-docker-registry:5000/teleport-operator:$(cat "/go/var/full-version")-amd64
    public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/major-version")-amd64
  - docker push public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/major-version")-amd64
  - printf "Prerelease "; ! [ -f /go/vars/release-is-prerelease ] && printf "not ";
    printf "detected for version $DRONE_TAG, "; [ -f /go/vars/release-is-prerelease
    ] && echo "skipping" || echo "continuing"
  - '[ -f /go/vars/release-is-prerelease ] && exit 0'
  - docker tag drone-docker-registry:5000/teleport-operator:$(cat "/go/var/full-version")-amd64
    public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/minor-version")-amd64
  - docker push public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/minor-version")-amd64
  - docker logout "public.ecr.aws"
  environment:
    AWS_PROFILE: ecr-production
    DOCKERHUB_PASSWORD:
      from_secret: DOCKERHUB_READONLY_TOKEN
    DOCKERHUB_USERNAME:
      from_secret: DOCKERHUB_USERNAME
  volumes:
  - name: awsconfig
    path: /root/.aws
  - name: dockersock
    path: /var/run
  depends_on:
  - Pull teleport-operator:v15-amd64 and push it to Local Registry
- name: Tag and push image "teleport-operator:v15-arm" to ECR - production
  image: docker
  commands:
  - docker pull --platform "linux/arm" drone-docker-registry:5000/teleport-operator:$(cat
    "/go/var/full-version")-arm
  - apk add --no-cache aws-cli
  - aws ecr-public get-login-password --region=us-east-1 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - printenv DOCKERHUB_PASSWORD | docker login -u="$DOCKERHUB_USERNAME" --password-stdin
  - docker manifest inspect public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/full-version")-arm
    > /dev/null 2>&1 && echo 'Found existing image, skipping' || (docker tag drone-docker-registry:5000/teleport-operator:$(cat
    "/go/var/full-version")-arm public.ecr.aws/gravitational/teleport-operator:$(cat
    "/go/var/full-version")-arm && docker push public.ecr.aws/gravitational/teleport-operator:$(cat
    "/go/var/full-version")-arm)
  - printf "Prerelease "; ! [ -f /go/vars/release-is-prerelease ] && printf "not ";
    printf "detected for version $DRONE_TAG, "; [ -f /go/vars/release-is-prerelease
    ] && echo "skipping" || echo "continuing"
  - '[ -f /go/vars/release-is-prerelease ] && exit 0'
  - docker tag drone-docker-registry:5000/teleport-operator:$(cat "/go/var/full-version")-arm
    public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/major-version")-arm
  - docker push public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/major-version")-arm
  - printf "Prerelease "; ! [ -f /go/vars/release-is-prerelease ] && printf "not ";
    printf "detected for version $DRONE_TAG, "; [ -f /go/vars/release-is-prerelease
    ] && echo "skipping" || echo "continuing"
  - '[ -f /go/vars/release-is-prerelease ] && exit 0'
  - docker tag drone-docker-registry:5000/teleport-operator:$(cat "/go/var/full-version")-arm
    public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/minor-version")-arm
  - docker push public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/minor-version")-arm
  - docker logout "public.ecr.aws"
  environment:
    AWS_PROFILE: ecr-production
    DOCKERHUB_PASSWORD:
      from_secret: DOCKERHUB_READONLY_TOKEN
    DOCKERHUB_USERNAME:
      from_secret: DOCKERHUB_USERNAME
  volumes:
  - name: awsconfig
    path: /root/.aws
  - name: dockersock
    path: /var/run
  depends_on:
  - Pull teleport-operator:v15-arm and push it to Local Registry
- name: Tag and push image "teleport-operator:v15-arm64" to ECR - production
  image: docker
  commands:
  - docker pull --platform "linux/arm64" drone-docker-registry:5000/teleport-operator:$(cat
    "/go/var/full-version")-arm64
  - apk add --no-cache aws-cli
  - aws ecr-public get-login-password --region=us-east-1 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - printenv DOCKERHUB_PASSWORD | docker login -u="$DOCKERHUB_USERNAME" --password-stdin
  - docker manifest inspect public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/full-version")-arm64
    > /dev/null 2>&1 && echo 'Found existing image, skipping' || (docker tag drone-docker-registry:5000/teleport-operator:$(cat
    "/go/var/full-version")-arm64 public.ecr.aws/gravitational/teleport-operator:$(cat
    "/go/var/full-version")-arm64 && docker push public.ecr.aws/gravitational/teleport-operator:$(cat
    "/go/var/full-version")-arm64)
  - printf "Prerelease "; ! [ -f /go/vars/release-is-prerelease ] && printf "not ";
    printf "detected for version $DRONE_TAG, "; [ -f /go/vars/release-is-prerelease
    ] && echo "skipping" || echo "continuing"
  - '[ -f /go/vars/release-is-prerelease ] && exit 0'
  - docker tag drone-docker-registry:5000/teleport-operator:$(cat "/go/var/full-version")-arm64
    public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/major-version")-arm64
  - docker push public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/major-version")-arm64
  - printf "Prerelease "; ! [ -f /go/vars/release-is-prerelease ] && printf "not ";
    printf "detected for version $DRONE_TAG, "; [ -f /go/vars/release-is-prerelease
    ] && echo "skipping" || echo "continuing"
  - '[ -f /go/vars/release-is-prerelease ] && exit 0'
  - docker tag drone-docker-registry:5000/teleport-operator:$(cat "/go/var/full-version")-arm64
    public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/minor-version")-arm64
  - docker push public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/minor-version")-arm64
  - docker logout "public.ecr.aws"
  environment:
    AWS_PROFILE: ecr-production
    DOCKERHUB_PASSWORD:
      from_secret: DOCKERHUB_READONLY_TOKEN
    DOCKERHUB_USERNAME:
      from_secret: DOCKERHUB_USERNAME
  volumes:
  - name: awsconfig
    path: /root/.aws
  - name: dockersock
    path: /var/run
  depends_on:
  - Pull teleport-operator:v15-arm64 and push it to Local Registry
- name: Create manifest and push "teleport-operator:major" to ECR - production
  image: docker
  commands:
  - printf "Prerelease "; ! [ -f /go/vars/release-is-prerelease ] && printf "not ";
    printf "detected for version $DRONE_TAG, "; [ -f /go/vars/release-is-prerelease
    ] && echo "skipping" || echo "continuing"
  - '[ -f /go/vars/release-is-prerelease ] && exit 0'
  - apk add --no-cache aws-cli
  - aws ecr-public get-login-password --region=us-east-1 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - printenv DOCKERHUB_PASSWORD | docker login -u="$DOCKERHUB_USERNAME" --password-stdin
  - docker manifest create public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/major-version")
    --amend public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/major-version")-amd64
    --amend public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/major-version")-arm
    --amend public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/major-version")-arm64
  - docker manifest push public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/major-version")
  - docker logout "public.ecr.aws"
  environment:
    AWS_PROFILE: ecr-production
    DOCKERHUB_PASSWORD:
      from_secret: DOCKERHUB_READONLY_TOKEN
    DOCKERHUB_USERNAME:
      from_secret: DOCKERHUB_USERNAME
  volumes:
  - name: awsconfig
    path: /root/.aws
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push image "teleport-operator:v15-amd64" to ECR - production
  - Tag and push image "teleport-operator:v15-arm" to ECR - production
  - Tag and push image "teleport-operator:v15-arm64" to ECR - production
- name: Create manifest and push "teleport-operator:minor" to ECR - production
  image: docker
  commands:
  - printf "Prerelease "; ! [ -f /go/vars/release-is-prerelease ] && printf "not ";
    printf "detected for version $DRONE_TAG, "; [ -f /go/vars/release-is-prerelease
    ] && echo "skipping" || echo "continuing"
  - '[ -f /go/vars/release-is-prerelease ] && exit 0'
  - apk add --no-cache aws-cli
  - aws ecr-public get-login-password --region=us-east-1 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - printenv DOCKERHUB_PASSWORD | docker login -u="$DOCKERHUB_USERNAME" --password-stdin
  - docker manifest create public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/minor-version")
    --amend public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/minor-version")-amd64
    --amend public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/minor-version")-arm
    --amend public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/minor-version")-arm64
  - docker manifest push public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/minor-version")
  - docker logout "public.ecr.aws"
  environment:
    AWS_PROFILE: ecr-production
    DOCKERHUB_PASSWORD:
      from_secret: DOCKERHUB_READONLY_TOKEN
    DOCKERHUB_USERNAME:
      from_secret: DOCKERHUB_USERNAME
  volumes:
  - name: awsconfig
    path: /root/.aws
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push image "teleport-operator:v15-amd64" to ECR - production
  - Tag and push image "teleport-operator:v15-arm" to ECR - production
  - Tag and push image "teleport-operator:v15-arm64" to ECR - production
- name: Create manifest and push "teleport-operator:full" to ECR - production
  image: docker
  commands:
  - apk add --no-cache aws-cli
  - aws ecr-public get-login-password --region=us-east-1 | docker login -u="AWS" --password-stdin
    public.ecr.aws
  - printenv DOCKERHUB_PASSWORD | docker login -u="$DOCKERHUB_USERNAME" --password-stdin
  - docker manifest inspect public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/full-version")
    > /dev/null 2>&1 && echo 'Found existing image, skipping' || (docker manifest
    create public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/full-version")
    --amend public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/full-version")-amd64
    --amend public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/full-version")-arm
    --amend public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/full-version")-arm64
    && docker manifest push public.ecr.aws/gravitational/teleport-operator:$(cat "/go/var/full-version"))
  - docker logout "public.ecr.aws"
  environment:
    AWS_PROFILE: ecr-production
    DOCKERHUB_PASSWORD:
      from_secret: DOCKERHUB_READONLY_TOKEN
    DOCKERHUB_USERNAME:
      from_secret: DOCKERHUB_USERNAME
  volumes:
  - name: awsconfig
    path: /root/.aws
  - name: dockersock
    path: /var/run
  depends_on:
  - Tag and push image "teleport-operator:v15-amd64" to ECR - production
  - Tag and push image "teleport-operator:v15-arm" to ECR - production
  - Tag and push image "teleport-operator:v15-arm64" to ECR - production
services:
- name: Start Docker
  image: docker:dind
  privileged: true
  volumes:
  - name: dockersock
    path: /var/run
- name: drone-docker-registry
  image: registry:2
  privileged: false
  volumes: []
volumes:
- name: awsconfig
  temp: {}
- name: dockersock
  temp: {}
- name: dockerconfig
  temp: {}
image_pull_secrets:
- DOCKERHUB_CREDENTIALS

---
################################################
# Generated using dronegen, do not edit by hand!
# Use 'make dronegen' to update.
# Generated at dronegen/relcli.go (main.relcliPipeline)
################################################

kind: pipeline
type: kubernetes
name: publish-rlz
environment:
  RELCLI_IMAGE: 146628656107.dkr.ecr.us-west-2.amazonaws.com/gravitational/relcli:prod-7680ffb-20240117T224722
trigger:
  event:
    include:
    - promote
  target:
    include:
    - production
  repo:
    include:
    - gravitational/*
clone:
  disable: true
depends_on:
- promote-build
- teleport-container-images-branch-promote
- publish-os-package-repos
- promote-teleport-oci-distroless-images
- promote-teleport-hardened-amis
- promote-teleport-kube-agent-updater-oci-images
- promote-teleport-spacelift-runner-oci-images
steps:
- name: Check if commit is tagged
  image: alpine
  commands:
  - '[ -n ${DRONE_TAG} ] || (echo ''DRONE_TAG is not set. Is the commit tagged?''
    && exit 1)'
- name: Wait for docker
  image: docker
  pull: if-not-exists
  commands:
  - timeout 30s /bin/sh -c 'while [ ! -S /var/run/docker.sock ]; do sleep 1; done'
  - printenv DOCKERHUB_PASSWORD | docker login -u="$DOCKERHUB_USERNAME" --password-stdin
  environment:
    DOCKERHUB_PASSWORD:
      from_secret: DOCKERHUB_READONLY_TOKEN
    DOCKERHUB_USERNAME:
      from_secret: DOCKERHUB_USERNAME
  volumes:
  - name: dockersock
    path: /var/run
  - name: dockerconfig
    path: /root/.docker
- name: Assume AWS Role
  image: amazon/aws-cli
  pull: if-not-exists
  commands:
  - aws sts get-caller-identity
  - |-
    printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s\n" \
      $(aws sts assume-role \
        --role-arn "$AWS_ROLE" \
        --role-session-name $(echo "drone-${DRONE_REPO}-${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
        --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
        --output text) \
      > /root/.aws/credentials
  - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
  - aws sts get-caller-identity --profile default
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: TELEPORT_BUILD_USER_READ_ONLY_KEY
    AWS_ROLE:
      from_secret: TELEPORT_BUILD_READ_ONLY_AWS_ROLE
    AWS_SECRET_ACCESS_KEY:
      from_secret: TELEPORT_BUILD_USER_READ_ONLY_SECRET
  volumes:
  - name: awsconfig
    path: /root/.aws
- name: Pull relcli
  image: docker:cli
  commands:
  - apk add --no-cache aws-cli
  - aws ecr get-login-password | docker login -u="AWS" --password-stdin 146628656107.dkr.ecr.us-west-2.amazonaws.com
  - docker pull $RELCLI_IMAGE
  environment:
    AWS_DEFAULT_REGION: us-west-2
  volumes:
  - name: dockersock
    path: /var/run
  - name: awsconfig
    path: /root/.aws
- name: Publish in Release API
  image: docker:git
  commands:
  - mkdir -p /tmpfs/creds
  - echo "$RELEASES_CERT" | base64 -d > "$RELCLI_CERT"
  - echo "$RELEASES_KEY" | base64 -d > "$RELCLI_KEY"
  - trap "rm -rf /tmpfs/creds" EXIT
  - for i in $(seq 10); do docker run -i -v /tmpfs/creds:/tmpfs/creds -e DRONE_REPO
    -e DRONE_TAG -e RELCLI_BASE_URL -e RELCLI_CERT -e RELCLI_KEY $RELCLI_IMAGE auto_publish
    -f -v 6 && break; done || false
  environment:
    RELCLI_BASE_URL: https://releases-prod.platform.teleport.sh
    RELCLI_CERT: /tmpfs/creds/releases.crt
    RELCLI_KEY: /tmpfs/creds/releases.key
    RELEASES_CERT:
      from_secret: RELEASES_CERT
    RELEASES_KEY:
      from_secret: RELEASES_KEY
  volumes:
  - name: dockersock
    path: /var/run
  - name: tmpfs
    path: /tmpfs
  - name: awsconfig
    path: /root/.aws
services:
- name: Start Docker
  image: docker:dind
  privileged: true
  volumes:
  - name: tmpfs
    path: /tmpfs
  - name: dockersock
    path: /var/run
volumes:
- name: tmpfs
  temp:
    medium: memory
- name: awsconfig
  temp: {}
- name: dockersock
  temp: {}
- name: dockerconfig
  temp: {}
image_pull_secrets:
- DOCKERHUB_CREDENTIALS
---
kind: signature
hmac: 47d3b4d44c75e4b7c86eba814ac8cdb16c8de36d493b2e1661cdc28d7bbe601b

...
